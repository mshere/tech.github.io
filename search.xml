<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（七）—— 交易脚本（智能合约）]]></title>
      <url>/posts/643232a4.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/rawpixel-652547-unsplash.jpg-webp" alt=""></p><p><a href="https://wangwei.one/posts/630e7ae5.html">上一篇</a> 文章我们引入 UTXOset 和 Merkle Tree 对交易流程做了些许优化，本篇文章我们将介绍比特币另一个更加重要的机制 —— 交易脚本。</p><p>在介绍 <a href="https://wangwei.one/posts/9cf9e42a.html">UTXO的文章</a> 中，我们已经了解到比特币的交易输出由锁定脚本锁定，它只能被交易输出所被指向的交易输入中的解锁脚本所解锁，今天让我们来详细讨论一下它们的实现机制。</p><a id="more"></a><h2><span id="交易详情">交易详情</span></h2><p>如今，大多数比特币网络处理的交易是以“Alice付给Bob”的形式存在的。同时，它们是以一种称为“P2PKH”（Pay-to-Public-Key-Hash）脚本为基础的。然而，通过使用脚本来锁定输出和解锁输入意味着通过使用编程语言，比特币交易可以包含无限数量的条件。当然，比特币交易并不限于“Alice付给Bob” 的形式和模式。”</p><p>这只是这个脚本语言可以表达的可能性的冰山一角。稍后， 我们将会全面展示比特币交易脚本语言的各个组成部分；同时，我们也会演示如何使用它去表达复杂的使用条件以及解锁脚本如何去满足这些花费条件。</p><blockquote><p>比特币交易验证并不基于一个不变的模式，而是通过运行脚本语言来实现。这种语言可以表达出多到数不尽的条件变种。这也是比特币作为一种“可编程的货币”所拥有的权力。</p></blockquote><p>我们以<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch02.asciidoc" target="_blank" rel="external">《精通比特币（第二版）》第二章节</a> 中 Alice向Bob购买咖啡为例，点击查看该笔 <a href="https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2" target="_blank" rel="external">交易详情</a></p><blockquote><p>交易输入：0.1000 BTC</p><p>手续费用：0.0005 BTC</p><p>支付费用：0.0150 BTC</p><p>找 零： 0.0845 BTC</p></blockquote><p><img src="https://img.i7years.com/blog/tx-stream.png" alt="tx"></p><p>该笔交易的数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hash"</span>: <span class="string">"0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2"</span>,</span><br><span class="line">    <span class="attr">"locktime"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">258</span>,</span><br><span class="line">    <span class="attr">"txid"</span>: <span class="string">"0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"vin"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"scriptSig"</span>: &#123;</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"sequence"</span>: <span class="number">4294967295</span>,</span><br><span class="line">            <span class="attr">"txid"</span>: <span class="string">"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18"</span>,</span><br><span class="line">            <span class="attr">"vout"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vout"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"n"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">                <span class="attr">"addresses"</span>: [</span><br><span class="line">                    <span class="string">"1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac"</span>,</span><br><span class="line">                <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">0.015</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"n"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">                <span class="attr">"addresses"</span>: [</span><br><span class="line">                    <span class="string">"1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac"</span>,</span><br><span class="line">                <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">0.0845</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vsize"</span>: <span class="number">258</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="交易输入">交易输入</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"vin": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"scriptSig"</span>: &#123;</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sequence"</span>: <span class="number">4294967295</span>,</span><br><span class="line">        <span class="attr">"txid"</span>: <span class="string">"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18"</span>,</span><br><span class="line">        <span class="attr">"vout"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>它所包含的信息：</p>
<ul>
<li>交易ID。包含了它所指向的UTXO的交易的Hash值。</li>
<li>UTXO下标。定义了它所指向的UTXO在上一笔交易中交易输出数组的位置(下标值)。</li>
<li>签名。用于满足它所指向的UTXO上所设定的花费条件。</li>
</ul>
<h4><span id="交易输出">交易输出</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">"vout": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"n"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">            <span class="attr">"addresses"</span>: [</span><br><span class="line">                <span class="string">"1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac"</span>,</span><br><span class="line">            <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">0.015</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"n"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">            <span class="attr">"addresses"</span>: [</span><br><span class="line">                <span class="string">"1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac"</span>,</span><br><span class="line">            <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">0.0845</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>它所包含的信息：</p>
<ul>
<li><p>比特币的数量。单位：satoshis（聪）</p>
</li>
<li><p>比特币地址。交易输出所绑定的地址。</p>
</li>
<li><p>锁定脚本。定义了花费这笔交易输出所需要满足的限制条件。其中包含了一些字符串，例如：<code>OP_DUP</code>、<code>OP_HASH160</code>、<code>OP_EQUALVERIFY</code>、<code>OP_CHECKSIG</code>，这些叫操作码，后面会做介绍。</p>
</li>
</ul>
<p>那么，交易输入中的<code>script</code> 是如何满足交易输出中<code>script_string</code>的限制条件的呢？接下来，我们来一起看下比特币的交易脚本是如何工作的。首先，我们来了解一下比特币所用到脚本语言的特性以及它的工作原理。</p>
<h2><span id="比特币脚本语言">比特币脚本语言</span></h2><h3><span id="特性">特性</span></h3><p>脚本是一种类似Forth的基于堆栈的逆波兰表示法的图灵非完备语言。接下来，让我们逐个解释一下：</p>
<h4><span id="图灵非完备turing-incomplete">图灵非完备（<strong>Turing Incomplete</strong>）</span></h4><blockquote>
<p>什么是图灵完备</p>
<p>在<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AE%A1%E7%AE%97%E6%80%A7%E7%90%86%E8%AE%BA" target="_blank" rel="external">可计算性理论</a>里，如果一系列操作数据的规则（如<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86" target="_blank" rel="external">指令集</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="external">编程语言</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F" target="_blank" rel="external">细胞自动机</a>）可以用来模拟<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA" target="_blank" rel="external">单带图灵机</a>，那么它是<strong>图灵完备的</strong>。这个词源于引入图灵机概念的数学家<a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5" target="_blank" rel="external">艾倫·图灵</a>。</p>
<p>虽然<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA" target="_blank" rel="external">图灵机</a>会受到储存能力的<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86" target="_blank" rel="external">物理</a>限制，图灵完全性通常指「具有无限存储能力的通用物理机器或编程语言」。</p>
<p>来源：<a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7" target="_blank" rel="external">维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank" rel="external">https://en.wikipedia.org/wiki/Turing_completeness</a></p>
</blockquote>
<p>图灵非完备语言将会有有限的功能，不能进行跳转或/和循环。因此它们不能进入无线循环。图灵完备就意味着，在给定的计算资源和内存下，图灵完备程序，能够解决任何问题。<a href="https://blockgeeks.com/guides/solidity/" target="_blank" rel="external">Solidity</a> 就是其中一种图灵完备语言。</p>
<h4><span id="为什么比特币脚本是图灵非完备的">为什么比特币脚本是图灵非完备的</span></h4><p>因为没有必要。比特币脚本没有必要做到像以太坊智能合约那样复杂。事实上，如果一个脚本是图灵完备的，它会给恶意的人以机会去随意创造复杂的交易，这将会吃掉比特币网络的哈希率并降低整个系统的性能。</p>
<blockquote>
<p><strong>哈希率</strong>是比特币网络的处理能力的衡量单位。为了安全，比特币网络必须进行高强度的数学运算。网络的哈希率达到10TH/s，意味着这个网络每秒能处理10亿次计算。</p>
</blockquote>
<h4><span id="逆波兰表示法reverse-polish-notation">逆波兰表示法(<strong>Reverse Polish notation</strong>)</span></h4><blockquote>
<p><strong>逆波兰表示法</strong>（<strong>Reverse Polish notation</strong>，<strong>RPN</strong>，或<strong>逆波兰记法</strong>），是一种是由<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0" target="_blank" rel="external">波兰</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AE%B6" target="_blank" rel="external">数学家</a><a href="https://zh.wikipedia.org/wiki/%E6%89%AC%C2%B7%E6%AD%A6%E5%8D%A1%E8%B0%A2%E7%BB%B4%E5%A5%87" target="_blank" rel="external">扬·武卡谢维奇</a>1920年引入的数学表达式方式，在逆波兰记法中，所有<a href="https://zh.wikipedia.org/w/index.php?title=%E6%93%8D%E4%BD%9C%E7%AC%A6&amp;action=edit&amp;redlink=1" target="_blank" rel="external">操作符</a>置于<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E6%95%B0" target="_blank" rel="external">操作数</a>的后面，因此也被称为<strong>后缀表示法</strong>。逆波兰记法不需要括号来标识操作符的优先级。</p>
<p>来源：<a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="external">维基百科</a> </p>
</blockquote>
<p>例如：</p>
<table>
<thead>
<tr>
<th>解释</th>
<th>常规表示</th>
<th>逆波兰表示法</th>
</tr>
</thead>
<tbody>
<tr>
<td>三加四</td>
<td>3 + 4</td>
<td>34+</td>
</tr>
<tr>
<td>先3减去4，再加上5</td>
<td>3 - 4 + 5</td>
<td>3 4 - 5 +</td>
</tr>
<tr>
<td>先3减去4，再乘以5</td>
<td>(3 - 4)*5</td>
<td>3 4 - 5 *</td>
</tr>
</tbody>
</table>
<h4><span id="基于堆栈">基于堆栈</span></h4><p>这是一种具有 LIFO（Last In First Out）特性的数据结构，熟悉数据结构的应该非常清楚，这里不多做介绍。想深入了解的朋友，可以查看我的另一篇文章：<a href="https://wangwei.one/posts/d1e0a844.html">https://wangwei.one/posts/d1e0a844.html</a></p>
<p><img src="https://img.i7years.com/blog/stack-1.png" alt="stack"></p>
<h4><span id="类forth脚本语言">类Forth脚本语言</span></h4><p>比特币脚本恰好类似于编程语言“Forth”，它也恰好是基于堆栈的一种编程语言。</p>
<blockquote>
<p>查看：<a href="https://zh.wikipedia.org/wiki/Forth" target="_blank" rel="external">Forth编程语言</a></p>
</blockquote>
<h3><span id="工作原理">工作原理</span></h3><p>比特币的脚本语言非常简单，这种语言的代码无非就是一系列数据和操作符。脚本语言通过从左至右地处理每个项目的方式执行脚本。数字（常数）被推送至堆栈，操作符向堆栈推送（或移除）一个或多个参数，对它们进行处理，甚至可能会向堆栈推送一个结果。例如，OP_ADD将从堆栈移除两个项目，将二者相加，然后再将二者相加之和推送到堆栈。</p>
<p>条件操作符评估一项条件，产生一个真或假的结果。例如，OP_EQUAL从堆栈移除两个项目，假如二者相等则推送真（表示为1），假如二者不等则推送为假（表示为0）。比特币交易脚本常含条件操作符，当一笔交易有效时，就会产生True的结果。</p>
<p>我们以一个简单的脚本来进行演示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> OP_ADD <span class="number">5</span> OP_EQUAL</span><br></pre></td></tr></table></figure>
<p>从左至右，依次执行，过程如下：</p>
<p><img src="https://img.i7years.com/blog/script-example1.png" alt=""></p>
<p>弄明白这个过程之后，你会发现其中所蕴含的堆栈特性以及逆波兰表示法特性。接下来，我们来看下比特币脚本的锁定与解锁逻辑。</p>
<h2><span id="锁定与解锁逻辑">锁定与解锁逻辑</span></h2><p>比特币的交易验证引擎依赖于两类脚本来验证比特币交易：一个锁定脚本和一个解锁脚本。</p>
<p><strong>锁定脚本</strong>是放置在输出上的消费条件：它指定将来要花费输出必须满足的条件。锁定脚本常被称为<code>scriptPubKey</code>，因为它通常包含公钥或比特币地址（公钥哈希）。</p>
<p><strong>解锁脚本</strong>是通过“解决”或满足锁定脚本上的交易输出条件并允许交易输出花费的脚本。 解锁脚本是每个交易输入的一部分。大多数情况下，它包含了由用户私钥所产生的数字签名。解锁脚本常被称为 <code>scriptSig</code> ，因为它通常包含数字签名。</p>
<p>每当要验证一笔交易的有效性时，解锁脚本和锁定脚本会随着堆栈的传递被分别执行。首先，使用堆栈执行引擎执行解锁脚本。如果解锁脚本在执行过程中未报错(例如:没有“悬挂”操作码)，则复制 主堆栈(而不是备用堆栈)，并执行锁定脚本。如果从解锁脚本中复制而来的堆栈数据执行锁定脚本的结果 为“TRUE”，那么解锁脚本就成功地满足了锁定脚本所设置的条件，因此，该输入是一个能使用该UTXO的有效授 权。如果在合并脚本后的结果不是”TRUE“以外的任何结果，输入都是无效的，因为它不能满足UTXO中所设置的使 用该笔资金的条件。 </p>
<p>下图所示是最为常见类型的比特币交易（向公钥哈希进行一笔支付）的解锁和锁定脚本样本，该样本展示了在脚本验证之前将解锁脚本和锁定脚本串联而成的组合脚本。</p>
<p><img src="https://img.i7years.com/blog/bitcoin-script.png" alt=""></p>
<p>这是比特币脚本中使用最为常见的一种形式，名叫 <em>Pay to Public Key Hash</em> (P2PKH)。基于前面 <code>2 + 3 = 5</code> 的验证过程，我们可以得到 P2PKH 脚本在堆栈引擎中的验证过程如下所示：</p>
<p><img src="https://img.i7years.com/blog/P2PKH.png" alt=""></p>
<p>好了， 到此为止，你已经对比特币的交易脚本以及它的工作原理已经有了一个非常清楚的理解与认识。下面我们开始用代码来实现它的工作机制。</p>
<h2><span id="代码实现">代码实现</span></h2><p>参考资料</p>
<ul>
<li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc" target="_blank" rel="external">《精通比特币（第二版）》第六章</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-6</a></li>
</ul>
<ul>
<li><a href="https://blockgeeks.com/guides/best-bitcoin-script-guide" target="_blank" rel="external">https://blockgeeks.com/guides/best-bitcoin-script-guide</a></li>
<li><a href="https://blockgeeks.com/guides/bitcoin-script-guide-part-2" target="_blank" rel="external">https://blockgeeks.com/guides/bitcoin-script-guide-part-2</a></li>
<li><a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="external">https://en.bitcoin.it/wiki/Script</a></li></ul>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> bitcoin-script </tag>
            
            <tag> smart contract </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（六）—— 交易（Merkle Tree）]]></title>
      <url>/posts/630e7ae5.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-38136.webp" alt=""></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-6/</a></p></blockquote><h2><span id="引言">引言</span></h2><p>在这一系列文章的最开始部分，我们提到过区块链是一个分布式的数据库。那时候，我们决定跳过”分布式”这一环节，并且聚焦于”数据存储”这一环节。到目前为止，我们几乎实现了区块链的所有组成部分。在本篇文章中，我们将会涉及一些在前面的文章中所忽略的一些机制，并且在下一篇文章中我们将开始研究区块链的分布式特性。</p><a id="more"></a><p>前面各个部分内容：</p><ol><li><a href="https://wangwei.one/posts/df195d9.html">基本原型</a></li><li><a href="https://wangwei.one/posts/7890ab7e.html">工作量证明</a></li><li><a href="https://wangwei.one/posts/35c768a3.html">持久化 &amp; 命令行</a></li><li><a href="https://wangwei.one/posts/9cf9e42a.html">交易（UTXO）</a></li><li><a href="https://wangwei.one/posts/f9088e0f.html">地址（钱包）</a></li></ol><h2><span id="utxo池">UTXO池</span></h2><p>在 <a href="https://wangwei.one/posts/35c768a3.html">持久化 &amp; 命令行</a> 这篇文章中，我们研究了比特币核心存储区块的方式。当中我们提到过与区块相关的数据存储在 <strong>blocks</strong> 这个数据桶中，而交易数据则存储在 <strong>chainstate</strong> 这个数据桶中，让我们来回忆一下，<strong>chainstate</strong> 数据桶的数据结构：</p><ul><li><p>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction</p><blockquote><p>某笔交易的UTXO记录</p></blockquote></li></ul><ul><li><p>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs</p><blockquote><p>数据库所表示的UTXO的区块Hash</p></blockquote></li></ul><p>从那篇文章开始，我们已经实现了比特币的交易机制，但是我们还没有用到 <strong>chainstate</strong> 数据桶去存储我们的交易输出。所以，这将是我们现在要去做的事情。</p><p><strong>chainstate</strong> 不会去存储交易数据。相反，它存储的是 UTXO 集，也就是未被花费的交易输出集合。除此之外，它还存储了”数据库所表示的UTXO的区块Hash”，我们这里先暂且忽略这一点，因为我们还没有用到区块高度（这一点我们会在后面的文章进行实现）。</p><p>那么，我们为什么需要 UTXO 池呢？</p><p>一起来看一下我们前面实现的 <strong>findUnspentTransactions</strong> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Transaction[] findUnspentTransactions(<span class="keyword">byte</span>[] pubKeyHash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(pubKeyHash);</span><br><span class="line">     Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">     <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">         Block block = blockchainIterator.next();</span><br><span class="line">         <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">             String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">             <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                 <span class="keyword">if</span> (transaction.getOutputs()[outIndex].isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                     unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> unspentTxs;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>该方法是用来查找钱包地址对应的包含未花费交易输出的交易信息。由于交易信息是存储在区块当中，所以我们现有的做法是遍历区块链中的每个区块，然后遍历每个区块中的交易信息，再然后遍历每个交易中的交易输出，并检查交易输出是否被相应的钱包地址所锁定，效率非常低下。截止2018年3月29号，比特币中有 <a href="https://blockchain.info/zh-cn/block-height/515698" target="_blank" rel="external">515698</a> 个区块，并且这些数据占据了140+Gb 的磁盘空间。这也就意味着一个人必须运行全节点（下载所有的区块数据）才能验证交易信息。此外，验证交易信息需要遍历所有的区块。</p>
<p>针对这个问题的解决办法是需要有一个存储了所有UTXOs（未花费交易输出）的索引，这就是 UTXOs 池所要做的事情：UTXOs池其实是一个缓存空间，它所缓存的数据需要从构建区块链中所有的交易数据中获得（通过遍历所有的区块链，不过这个构建操作只需要执行一次即可），并且它后续还会用于钱包余额的计算以及新的交易数据的验证。截止到2017年9月，UTXOs池大约为 2.7Gb。</p>
<p>好了，让我们来想一下，为了实现 UTXOs 池我们需要做哪些事情。当前，有下列方法被用于查找交易信息：</p>
<ol>
<li><p><strong>Blockchain.getAllSpentTXOs</strong>  —— 查询所有已被花费的交易输出。它需要遍历区块链中所有区块中交易信息。</p>
</li>
<li><p><strong>Blockchain.findUnspentTransactions</strong> —— 查询包含未被花费的交易输出的交易信息。它也需要遍历区块链中所有区块中交易信息。</p>
</li>
<li><p><strong>Blockchain.findSpendableOutputs</strong> —— 该方法用于新的交易创建之时。它需要找到足够多的交易输出，以满足所需支付的金额。需要调用 <strong>Blockchain.findUnspentTransactions</strong> 方法。</p>
</li>
<li><p><strong>Blockchain.findUTXO</strong> —— 查询钱包地址所对应的所有未花费交易输出，然后用于计算钱包余额。需要调用</p>
<p><strong>Blockchain.findUnspentTransactions</strong> 方法。</p>
</li>
<li><p><strong>Blockchain.findTransaction</strong> —— 通过交易ID查询交易信息。它需要遍历所有的区块直到找到交易信息为止。</p>
</li>
</ol>
<p>如你所见，上面这些方法都需要去遍历数据库中的所有区块。由于UTXOs池只存储未被花费的交易输出，而不会存储所有的交易信息，因此我们不会对有 <strong>Blockchain.findTransaction</strong> 进行优化。</p>
<p>那么，我们需要下列这些方法：</p>
<ol>
<li><strong>Blockchain.findUTXO</strong> —— 通过遍历所有的区块来找到所有未被花费的交易输出.</li>
<li><strong>UTXOSet.reindex</strong> —— 调用上面 <strong>findUTXO</strong> 方法，然后将查询结果存储在数据库中。也即需要进行缓存的地方。</li>
<li><strong>UTXOSet.findSpendableOutputs</strong> —— 与 <strong>Blockchain.findSpendableOutputs</strong> 类似，区别在于会使用 UTXO 池。</li>
<li><strong>UTXOSet.findUTXO</strong> —— 与<strong>Blockchain.findUTXO</strong> 类似，区别在于会使用 UTXO 池。</li>
<li><strong>Blockchain.findTransaction</strong> —— 逻辑保持不变。</li>
</ol>
<p>这样，两个使用最频繁的方法将从现在开始使用缓存！让我们开始编码吧！</p>
<p>定义 <strong>UTXOSet</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Blockchain blockchain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重建 UTXO 池索引:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重建 UTXO 池索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Synchronized</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Start to reIndex UTXO set !"</span>);</span><br><span class="line">        RocksDBUtils.getInstance().cleanChainStateBucket();</span><br><span class="line">        Map&lt;String, TXOutput[]&gt; allUTXOs = blockchain.findAllUTXOs();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, TXOutput[]&gt; entry : allUTXOs.entrySet()) &#123;</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"ReIndex UTXO set finished ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此方法用于初始化 UTXOSet。首先，需要清空 <code>chainstate</code> 数据桶，然后查询所有未被花费的交易输出，并将它们保存到 <code>chainstate</code> 数据桶中。</p>
<p>实现 <strong>findSpendableOutputs</strong> 方法，供 <strong>Transation.newUTXOTransaction</strong> 调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, <span class="keyword">byte</span>[]&gt; entry : chainstateBucket.entrySet()) &#123;</span><br><span class="line">            String txId = entry.getKey();</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; txOutputs.length; outId++) &#123;</span><br><span class="line">                TXOutput txOutput = txOutputs[outId];</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现 <strong>findUTXOs</strong> 接口，供 <strong>CLI.getBalance</strong> 调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXOs(<span class="keyword">byte</span>[] pubKeyHash) &#123;</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">if</span> (chainstateBucket.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] value : chainstateBucket.values()) &#123;</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value);</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上这些方法都是先前 <strong>Blockchain</strong> 中相应方法的微调版，先前的方法将不再使用。</p>
<p>有了UTXO池之后，意味着我们的交易数据分开存储到了两个不同的数据桶中：交易数据存储到了 <strong>block</strong> 数据桶中，而UTXO存储到了 <strong>chainstate</strong> 数据桶中。这就需要一种同步机制来保证每当一个新的区块产生时，UTXO池能够及时同步最新区块中的交易数据，毕竟我们不想频地进行 <strong>reIndex</strong> 。因此，我们需要如下方法：</p>
<p>更新UTXO池：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新UTXO池</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 当一个新的区块产生时，需要去做两件事情：</span></span><br><span class="line"><span class="comment">     * 1）从UTXO池中移除花费掉了的交易输出；</span></span><br><span class="line"><span class="comment">     * 2）保存新的未花费交易输出；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlock 最新的区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Block tipBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tipBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"Fail to update UTXO set ! tipBlock is null !"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to update UTXO set ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction transaction : tipBlock.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据交易输入排查出剩余未被使用的交易输出</span></span><br><span class="line">            <span class="keyword">if</span> (!transaction.isCoinbase()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="comment">// 余下未被使用的交易输出</span></span><br><span class="line">                    TXOutput[] remainderUTXOs = &#123;&#125;;</span><br><span class="line">                    String txId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                    TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (txOutputs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; txOutputs.length; outIndex++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (outIndex != txInput.getTxOutputIndex()) &#123;</span><br><span class="line">                            remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 没有剩余则删除，否则更新</span></span><br><span class="line">                    <span class="keyword">if</span> (remainderUTXOs.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().deleteUTXOs(txId);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新的交易输出保存到DB中</span></span><br><span class="line">            TXOutput[] txOutputs = transaction.getOutputs();</span><br><span class="line">            String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(txId, txOutputs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们将 UTXOSet 用到它们所需之处去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建区块链</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createBlockchain</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        UTXOSet utxoSet = <span class="keyword">new</span> UTXOSet(blockchain);</span><br><span class="line">        utxoSet.reIndex();</span><br><span class="line">        log.info(<span class="string">"Done ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当创建一个新的区块链是，我们需要重建 UTXO 池索引。截止目前，这是唯一一处用到 <strong>reIndex</strong> 的地方，尽管看起有些多余，因为在区块链创建之初仅仅只有一个区块和一笔交易。</p>
<p>修改 <strong>CLI.send</strong> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当一个新的区块产生后，需要去更新 UTXO 池数据。</p>
<p>让我们来检查一下它们的运行情况：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">164.961</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00225493862611</span>bc517cb6b3610e99d26d98a6b52484c9fa745df6ceff93f445 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">'1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -to  <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">0001</span>ab21f71ff2d6d532bf3b3388db790c2b03e28d7bd27bd669c5f6380a4e5b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">0009</span>b925cc94e3db8bab2958b1fc2d1764aa15531e20756d92c3a93065c920f0 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">'1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf'</span>: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line">Balance of <span class="string">'1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG'</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line">Balance of <span class="string">'1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV'</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2><span id="奖励机制">奖励机制</span></h2><p>前面的章节中我们省略了矿工挖矿的奖励机制。时机已经成熟，该实现它了。</p>
<p>矿工奖励其实是一个 coinbase 交易（创币交易）。当一个矿工节点开始去生产一个新的区块时，他会从队列中取出一些交易数据，并且为它们预制一个 coinbase 交易。这笔 coinbase 交易中仅有的交易输出包含了矿工的公钥hash。</p>
<p>只需要更新 <strong>send</strong> 命令接口，我们就可以轻松实现矿工的奖励机制：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        <span class="comment">// 新交易</span></span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        <span class="comment">// 奖励</span></span><br><span class="line">        Transaction rewardTx = Transaction.newCoinbaseTX(from, <span class="string">""</span>);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction, rewardTx&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"> 	   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还需要修改交易验证方法，coinbase 交易直接验证通过：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tx.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我们的实现逻辑中，代币的发送也是区块的生产者，因此，奖励也归他所有。</p>
<p>让我们来验证一下奖励机制：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">17.973</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">0000</span>defe83a851a5db3803d5013bbc20c6234f176b2c52ae36fdb53d28b33d93 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX -amount <span class="number">6</span></span><br><span class="line">Elapsed Time: <span class="number">30.887</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">00005</span>fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT -amount <span class="number">3</span></span><br><span class="line">Elapsed Time: <span class="number">45.267</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">00009</span>fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line">Balance of <span class="string">'1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD'</span>: <span class="number">21</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line">Balance of <span class="string">'17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX'</span>: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line">Balance of <span class="string">'12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT'</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</strong> 这个地址一共收到了三份奖励：</p>
<ul>
<li><p>第一次是开采创世区块；</p>
</li>
<li><p>第二次是开采区块：00005fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7</p>
</li>
<li><p>第三次是开采区块：00009fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13</p>
</li>
</ul>
<h2><span id="merkle-tree">Merkle Tree</span></h2><p>Merkle Tree（默克尔树） 是这篇文章中我们需要重点讨论的一个机制。</p>
<p>正如我前面提到的那样，整个比特币的数据库占到了大约140G的磁盘空间。由于比特币的分布式特性，网络中的每一个节点必须是独立且自给自足的。每个比特币节点都是路由、区块链数据库、挖矿、钱包服务的功能集合。每个节点都参与全网络的路由功能，同时也可能包含其他功能。每个节点都参与验证并传播交易及区块信息，发现并维持与对等节点的连接。一个全节点（full node）包括以下四个功能：</p>
<p><img src="https://img.i7years.com/blog/full_node.png-zoom50" alt="full node"></p>
<p>随着越来越多的人开始使用比特币，这条规则开始变得越来越难以遵循：让每一个人都去运行一个完整的节点不太现实。在中本聪发布的 <a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="external">比特币白皮书</a> 中，针对这个问题提出了一个解决方案：Simplified Payment Verification (SPV)（简易支付验证）。SPV是比特币的轻量级节点，它不需要下载所有的区块链数据，也<strong>不需要验证区块和交易数据</strong>。相反，当SPV想要验证一笔交易的有效性时，它会从它所连接的全节点上检索所需要的一些数据。这种机制保证了在只有一个全节点的情况，可以运行多个SPV轻钱包节点。</p>
<blockquote>
<p>更多有关SPV的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch08.asciidoc#simplified-payment-verification-spv-nodes" target="_blank" rel="external">《精通比特币（第二版）》第八章</a></p>
</blockquote>
<p>为了使SPV成为可能，就需要有一种方法在没有全量下载区块数据的情况下，来检查一个区块是否包含了某笔交易。这就是 <strong>Merkle Tree</strong> 发挥作用的地方了。</p>
<p>比特币中所使用的Merkle Tree是为了获得交易的Hash值，随后这个已经被Pow（工作量证明）系统认可了的Hash值会被保存到区块头中。到目前为止，我们只是简单地计算了一个区块中每笔交易的Hash值，然后在准备Pow数据时，再对这些交易进行 <strong>SHA-256</strong> 计算。虽然这是一个用于获取区块交易唯一表示的一个不错的方式，但是这种方式不具备 Merkle Tree 的优点。</p>
<blockquote>
<p>更多有关Merkle Tree的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#merkle-trees" target="_blank" rel="external">《精通比特币（第二版）》第九章</a></p>
</blockquote>
<p>来看一下Merkle Tree的结构：</p>
<p><img src="https://img.i7years.com/blog/merkle-tree-diagram.png" alt=""></p>
<p>每一个区块都会构建一个Merkle Tree，它从最底部的叶子节点开始往上构建，每一个交易的Hash就是一个叶子节点（比特币中用的双SHA256算法）。叶子节点的数量必须是偶数个，但是并不是每一个区块都能包含偶数笔交易数据。如果存在奇数笔交易数据，那么最后一笔交易数据将会被复制一份（这仅仅发生在Merkle Tree中，而不是区块中）。</p>
<p>从下往上移动，叶子节点成对分组，它们的Hash值被连接到一起，并且在此基础上再次计算出新的Hash值。新的Hash 形成新的树节点。这个过程不断地被重复，直到最后仅剩一个被称为根节点的树节点。这个根节点的Hash就是区块中交易数据们的唯一代表，它会被保存到区块头中，并被用于参与POW系统的计算。</p>
<p>Merkle树的好处是节点可以在不下载整个块的情况下验证某笔交易的合法性。 为此，只需要交易Hash，Merkle树根Hash和Merkle路径。</p>
<p>Merkle Tree代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.ByteUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默克尔树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MerkleTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叶子节点Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[][] leafHashes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MerkleTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        constructTree(leafHashes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从底部叶子节点开始往上构建整个Merkle Tree</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leafHashes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">constructTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leafHashes == <span class="keyword">null</span> || leafHashes.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ERROR:Fail to construct merkle tree ! leafHashes data invalid ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leafHashes = leafHashes;</span><br><span class="line">        List&lt;Node&gt; parents = bottomLevel(leafHashes);</span><br><span class="line">        <span class="keyword">while</span> (parents.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            parents = internalLevel(parents);</span><br><span class="line">        &#125;</span><br><span class="line">        root = parents.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个层级节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> children</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">internalLevel</span><span class="params">(List&lt;Node&gt; children)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(children.size() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size() - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node child1 = children.get(i);</span><br><span class="line">            Node child2 = children.get(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(child1, child2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部节点奇数个，只对left节点进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (children.size() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node child = children.get(children.size() - <span class="number">1</span>);</span><br><span class="line">            Node parent = constructInternalNode(child, <span class="keyword">null</span>);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底部节点构建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">bottomLevel</span><span class="params">(<span class="keyword">byte</span>[][] hashes)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(hashes.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashes.length - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node leaf1 = constructLeafNode(hashes[i]);</span><br><span class="line">            Node leaf2 = constructLeafNode(hashes[i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(leaf1, leaf2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hashes.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node leaf = constructLeafNode(hashes[hashes.length - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 奇数个节点的情况，复制最后一个节点</span></span><br><span class="line">            Node parent = constructInternalNode(leaf, leaf);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建叶子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">constructLeafNode</span><span class="params">(<span class="keyword">byte</span>[] hash)</span> </span>&#123;</span><br><span class="line">        Node leaf = <span class="keyword">new</span> Node();</span><br><span class="line">        leaf.hash = hash;</span><br><span class="line">        <span class="keyword">return</span> leaf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建内部节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">constructInternalNode</span><span class="params">(Node leftChild, Node rightChild)</span> </span>&#123;</span><br><span class="line">        Node parent = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (rightChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent.hash = leftChild.hash;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.hash = internalHash(leftChild.hash, rightChild.hash);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.left = leftChild;</span><br><span class="line">        parent.right = rightChild;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算内部节点Hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] internalHash(<span class="keyword">byte</span>[] leftChildHash, <span class="keyword">byte</span>[] rightChildHash) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] mergedBytes = ByteUtils.merge(leftChildHash, rightChildHash);</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.sha256(mergedBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merkle Tree节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] hash;</span><br><span class="line">        <span class="keyword">private</span> Node left;</span><br><span class="line">        <span class="keyword">private</span> Node right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改 <strong>Block.hashTransaction</strong> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">        <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">            txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].hash();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MerkleTree(txIdArrays).getRoot().getHash();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MerkleTree的根节点的Hash值，就是区块中交易信息的唯一代表。</p>
<h2><span id="小结">小结</span></h2><p>这一节我们主要是对前面的交易机制做了进一步的优化，加入UTXO池和Merkle Tree机制。</p>
<p>下一讲，我们来介绍一下比特币的交易脚本相关的内容。</p>
<h2><span id="资料">资料</span></h2><ol>
<li>源码：<a href="https://github.com/wangweiX/blockchain-java/tree/part6-transaction2" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part6-transaction2</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="external">《精通比特币（第二版）》</a></li>
<li><a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2" target="_blank" rel="external">The UTXO Set</a>:_Data_Storage#The_UTXO<em>set</em>.28chainstate_leveldb.29)</li>
<li><a href="https://statoshi.info/dashboard/db/unspent-transaction-output-set" target="_blank" rel="external">UTXO set statistics</a></li>
<li><a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees" target="_blank" rel="external">Merkle Tree</a></li>
<li><a href="https://medium.com/@jonaldfyookball/why-every-bitcoin-user-should-understand-spv-security-520d1d45e0b9" target="_blank" rel="external">Why every Bitcoin user should understand “SPV security”</a></li>
<li><a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="external">Script</a></li>
<li><a href="https://github.com/sipa/bitcoin/commit/450cbb0944cd20a06ce806e6679a1f4c83c50db2" target="_blank" rel="external">“Ultraprune” Bitcoin Core commit</a></li>
<li><a href="https://medium.com/@maraoz/smart-contracts-and-bitcoin-a5d61011d9b1" target="_blank" rel="external">Smart contracts and Bitcoin</a></li>
</ol>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=26e600c30e75eaa13e96be514125b88979ee8ec589372b3f60eb5e3d6884f3e35992f70a44875916b4efc8d87f3021bbf4dea9c23253a8496120b75cc47a6cb30&amp;h=5da52a1d62de45729187a3eed46039f776095760c0848e670140ced8c3c0c32a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=26e600c30e75eaa13e96be514125b88979ee8ec589372b3f60eb5e3d6884f3e35992f70a44875916b4efc8d87f3021bbf4dea9c23253a8496120b75cc47a6cb30&amp;h=5da52a1d62de45729187a3eed46039f776095760c0848e670140ced8c3c0c32a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> Merkle Tree </tag>
            
            <tag> UTXO </tag>
            
            <tag> SPV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（五）—— 地址（钱包）]]></title>
      <url>/posts/f9088e0f.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-730547.webp" alt="wallet"></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-5/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-5/</a></p></blockquote><h2><span id="引言">引言</span></h2><p>在 <a href="https://wangwei.one/posts/9cf9e42a.html">上一篇</a> 文章当中，我们开始了交易机制的实现。你已经了解到交易的一些非个人特征：没有用户账户，您的个人数据（例如：姓名、护照号码以及SSN(美国社会安全卡（Social Security Card）上的9 位数字)）不是必需的，并且不存储在比特币的任何地方。但仍然必须有一些东西能够识别你是这些交易输出的所有者（例如：锁定在这些输出上的币的所有者）。这就是比特币地址的作用所在。到目前为止，我们只是使用了任意的用户定义的字符串当做地址，现在是时候来实现真正的地址了，就像它们在比特币中实现的一样。</p><a id="more"></a><h2><span id="比特币地址">比特币地址</span></h2><p>这里有一个比特币地址的示例：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" target="_blank" rel="external">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a>。这是一个非常早期的比特币地址，据称是属于中本聪的比特币地址。比特币地址是公开的。如果你想要给某人发送比特币，你需要知道对方的比特币地址。但是地址（尽管它是唯一的）并不能作为你是一个钱包所有者的凭证。事实上，这样的地址是公钥的一种可读性更好的表示 。在比特币中，你的身份是存储在你计算机上（或存储在你有权访问的其他位置）的一对（或多对）私钥和公钥。比特币依靠加密算法的组合来创建这些密钥，并保证世界上没有其他人任何人可以在没有物理访问密钥的情况下访问您的比特币。</p><blockquote><p>比特币地址与公钥不同。比特币地址是由公钥经过单向的哈希函数生成的</p></blockquote><p><img src="https://img.i7years.com/blog/mbc2_0405_wangwei.png" alt="PubKey to bitcoin address"></p><p>接下来，让我们来讨论一下这些加密算法。</p><blockquote><p><strong>注意</strong>：不要向本篇文章中的代码所生成的任何比特币地址发送真实的比特币来进行测试，否则后果自负……</p></blockquote><h2><span id="公钥密码学">公钥密码学</span></h2><p>公钥加密算法（public-key cryptography）使用的是密钥对：公钥和私钥。公钥属于非敏感信息，可以向任何人透露。相比之下，私钥不能公开披露：除了所有者之外，任何人都不能拥有私钥的权限，因为它是用作所有者标识的私钥。你的私钥代表就是你（当然是在加密货币世界里的）。</p><p>本质上，比特币钱包就是一对这样的密钥。当你安装一个钱包应用程序或者使用比特币客户端去生成一个新的地址时，它们就为你创建好了一个密钥对。在比特币种，谁控制了私钥，谁就掌握了所有发往对应公钥地址上所有比特币的控制权。</p><p>私钥和公钥只是随机的字节序列，因此它们不能被打印在屏幕上供人读取。这就是为什么比特币会用一种算法将公钥的字节序列转化为人类可读的字符串形式。</p><blockquote><p>如果你曾今使用过比特币钱包的应用程序，它可能会为你生成助记词密码短语。这些助记词可以用来替代私钥，并且能够生成私钥。这种机制是通过 <a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki" target="_blank" rel="external">BIP-039</a> 来实现的。</p></blockquote><p>好了，现在我们已经知道在比特币中由什么来决定用户的标识了。但是，比特币是如何校验交易输出（和它里面存储的一些币）的所有权的呢？</p><h2><span id="数字签名">数字签名</span></h2><p>在数学和密码学中，有个数字签名的概念，这套算法保证了以下几点：</p><ol><li>保证数据从发送端传递到接收端的过程中不会被篡改；</li><li>数据由某个发送者创建；</li><li>发送者不能否认发送的数据；</li></ol><p>通过对数据应用签名算法（即签署数据），可以得到一个签名，以后可以对其进行验证。数字签名需要使用私钥，而验证则需要公钥。</p><p>为了能够签署数据我们需要：</p><ol><li>用于被签名的数据；</li><li>私钥。</li></ol><p>签名操作会产生一个存储在交易输入中的签名。为了能够验证一个签名，我们需要：</p><ol><li>签名之后的数据；</li><li>签名；</li><li>公钥。</li></ol><p>简单来讲，这个验证的过程可以被描述为：检查签名是由被签名数据加上私钥得来，并且这个公钥也是由该私钥生成。</p><blockquote><p>数字签名并不是一种加密方法，你无法从签名反向构造出源数据。这个和我们 <a href="https://wangwei.one/posts/7890ab7e.html">前面</a> 提到过的Hash算法有点类似：通过对一个数据使用Hash算法，你可以得到该数据的唯一表示。它们两者的不同之处在于，签名算法多了一个密钥对：它让数字签名得以验证成为可能。</p><p>但是密钥对也能够用于去加密数据：私钥用于加密数据，公钥用于解密数据。不过比特币并没有使用加密算法。</p></blockquote><p>在比特币中，每一笔交易输入都会被该笔交易的创建者进行签名。比特币中的每一笔交易在放入区块之前都必须得到验证。验证的意思就是：</p><ul><li>检查交易输入是否拥有引用前一笔交易中交易输出的权限</li><li>检查交易的签名是否正确</li></ul><p>数据签名以及签名验证的过程如下图所示：</p><p><img src="https://img.i7years.com/blog/signing-scheme.png" alt="signing-scheme"></p><p>让我们来回顾一下交易的完整生命周期：</p><ol><li>最开始，会有一个包含了Coinbase交易的创世区块。由于在Coinbase交易中没有真正的交易输入，所以它不需要签名。Coinbase交易的交易输出会包含一个Hashing之后的公钥（使用的算法为 <code>RIPEMD16(SHA256(PubKey))</code> ）</li><li>当一个人发送比特币时，会创建一笔交易。这笔交易的交易输入会引用前一笔或多笔交易的交易输出。每一个交易输入将会存储未经Hashing处理的公钥以及整个交易的签名信息。</li><li>当比特币网络中的其他节点收到其他节点广播的交易数据之后将，将会对其进行验证。其他的事情除外，他们将会验证：<ul><li>检查交易输入中公钥的Hash值是否与它所引用的交易输出的Hash值想匹配，这是确保发送方只能发送属于他们自己的比特币。</li><li>检查签名是否正确，这是为了确保这笔交易是由比特币的真正所有者创建的。</li></ul></li><li>当一个矿工准备开始开采一个新的区块时，他会将交易信息放入区块中，然后开始挖矿。</li><li>当一个区块完成挖矿之后，网络中的其他节点将会收到一条区块已挖矿完毕的消息，并且他们会把这个区块添加到区块链中去。</li><li>当一个区块被添加到区块链之后，就标志着这笔交易已经完成，它所产生的交易输出将会在新的交易中被引用。</li></ol><h2><span id="椭圆曲线密码学">椭圆曲线密码学</span></h2><p>正如前面所提到的那样，公钥和私钥是一串随机的字符序列。由于私钥是用来识别比特币所有者身份的缘故，因此有一个必要的条件：这个随机算法必须产生真正的随机序列。我们不希望意外地生成其他人所拥有的私钥。也就是要保证随机序列的绝对唯一性。</p><p>比特币是使用的椭圆曲线来生成的私钥。椭圆曲线是一个非常复杂的数学概念，这里我们不做详细的介绍（如果你对此非常好奇，可以点击 <a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" target="_blank" rel="external">this gentle introduction to elliptic curves</a> 进行详细的 了解，警告：数学公式）。我们需要知道的是，这些曲线可以用来生成真正大而随机的数字。比特币所采用的曲线算法能够随机生成一个介于0到 2^2^56之间的数字（这是一个非常大的数字，用十进制表示的话，大约是10^77， 而整个可见的宇宙中，原子数在 10^78 到 10^82 之间） 。这么巨大的上限意味着产生两个一样的私钥是几乎不可能的事情。</p><p>另外，我们将会使用比特币中所使用的 ECDSA （椭圆曲线数字签名算法）去签署交易信息。</p><h2><span id="base58和base58check编码">Base58和Base58Check编码</span></h2><p>现在让我们回到上面提到的比特币地址：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" target="_blank" rel="external">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a> . 现在我们知道这个地址其实是公钥的一种可读高的表示方式。如果我们对他进行解码，我们会看到公钥看起来是这样子的（字节序列的十六进制的表示方式）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0062</span>E907B15CBF27D5425399EBF6F0FB50EBB88F18C29B7D93</span><br></pre></td></tr></table></figure>
<h4><span id="base58">Base58</span></h4><p>Base64使用了26个小写字母、26个大写字母、10个数字以及两个符号（例如“+”和“/”），用于在电子邮件这样的基于文本的媒介中传输二进制数据。Base64通常用于编码邮件中的附件。Base58是一种基于文本的二进制编码格式，用在比特币和其它的加密货币中。这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。Base58是Base64编码格式的子集，同样使用大小写字母和10个数字，但舍弃了一些容易错读和在特定字体中容易混淆的字符。具体地，Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母L）、I（大写字母i），以及“+”和“/”两个字符。简而言之，Base58就是由不包括（0，O，l，I）的大小写字母和数字组成。</p>
<p>比特币的Base58字母表：</p>
<blockquote>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
</blockquote>
<h4><span id="base58check">Base58Check</span></h4><p>Base58Check是一种常用在比特币中的Base58编码格式，增加了错误校验码来检查数据在转录中出现的错误。校验码长4个字节，添加到需要编码的数据之后。校验码是从需要编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。使用Base58check编码格式时，编码软件会计算原始数据的校验码并和结果数据中自带的校验码进行对比。二者不匹配则表明有错误产生，那么这个Base58Check格式的数据就是无效的。例如，一个错误比特币地址就不会被钱包认为是有效的地址，否则这种错误会造成资金的丢失。</p>
<p>为了使用Base58Check编码格式对数据（数字）进行编码，首先我们要对数据添加一个称作“版本字节”的前缀，这个前缀用来明确需要编码的数据的类型。例如，比特币地址的前缀是0（十六进制是0x00），而对私钥编码时前缀是128（十六进制是0x80）。 </p>
<p>让我们以示意图的形式展示一下从公钥得到地址的过程：</p>
<p><img src="https://img.i7years.com/blog/mbc2_0406_wangwei.png" alt="Base58Check Encoding"></p>
<p>因此，上述解码的公钥由三部分组成：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Version  Public key hash                           Checksum</span><br><span class="line"><span class="number">00</span>       <span class="number">62</span>E907B15CBF27D5425399EBF6F0FB50EBB88F18  C29B7D93</span><br></pre></td></tr></table></figure>
<p>由于哈希函数是单向的（也就说无法逆转回去），所以不可能从一个哈希中提取公钥。不过通过执行哈希函数并进行哈希比较，我们可以检查一个公钥是否被用于哈希的生成。</p>
<p>OK，现在我们有了所有的东西，让我们来编写一些代码。 当一些概念被写成代码时，我们会对此理解的更加清晰和深刻。</p>
<h2><span id="地址实现">地址实现</span></h2><p>让我们从 <strong>Wallet</strong> 的构成开始，这里我们需要先引入一个maven包：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>钱包结构</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/03/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验码长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADDRESS_CHECKSUM_LEN = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BCECPrivateKey privateKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initWallet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化钱包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyPair keyPair = newECKeyPair();</span><br><span class="line">            BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();</span><br><span class="line">            BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] publicKeyBytes = publicKey.getQ().getEncoded(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setPrivateKey(privateKey);</span><br><span class="line">            <span class="keyword">this</span>.setPublicKey(publicKeyBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的密钥对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> KeyPair <span class="title">newKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注册 BC Provider</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        <span class="comment">// 创建椭圆曲线算法的密钥对生成器，算法为 ECDSA</span></span><br><span class="line">        KeyPairGenerator g = KeyPairGenerator.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        <span class="comment">// 椭圆曲线（EC）域参数设定</span></span><br><span class="line">        <span class="comment">// bitcoin 为什么会选择 secp256k1，详见：https://bitcointalk.org/index.php?topic=151120.0</span></span><br><span class="line">        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">        g.initialize(ecSpec, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> g.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所谓的钱包，其实本质上就是一个密钥对。这里我们需要借助 <strong><em>KeyPairGenerator</em></strong> 生成密钥对。</p>
<p>接着，我们来生成比特币的钱包地址：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取钱包地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取 ripemdHashedKey</span></span><br><span class="line">        <span class="keyword">byte</span>[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPublicKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加版本 0x00</span></span><br><span class="line">        ByteArrayOutputStream addrStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        addrStream.write((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        addrStream.write(ripemdHashedKey);</span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 计算校验码</span></span><br><span class="line">        <span class="keyword">byte</span>[] checksum = BtcAddressUtils.checksum(versionedPayload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 得到 version + paylod + checksum 的组合</span></span><br><span class="line">        addrStream.write(checksum);</span><br><span class="line">        <span class="keyword">byte</span>[] binaryAddress = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 执行Base58转换处理</span></span><br><span class="line">        <span class="keyword">return</span> Base58Check.rawBytesToBase58(binaryAddress);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候，你就可以得到 <strong>真实的比特币地址</strong> 了，并且你可以到 <a href="https://blockchain.info/" target="_blank" rel="external">blockchain.info</a> 上去检查这个地址的余额。</p>
<blockquote>
<p> 例如，通过 <strong>getAddress</strong> 方法，得到了一个比特币地址为：<a href="https://blockchain.info/address/1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16" target="_blank" rel="external">1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16</a></p>
</blockquote>
<p>我敢保证，无论你生成多少次比特币地址，它的余额始终为0.这就是为什么选择适当的公钥密码算法如此重要：考虑到私钥是随机数字，产生相同数字的机会必须尽可能低。 理想情况下，它必须低至“永不”。</p>
<p>另外，需要注意的是你不需要连接到比特币的节点上去获取比特币的地址。有关地址生成的开源算法工具包已经有很多编程语言和库实现了。</p>
<p>现在，我们需要去修改交易输入与输出，让他们开始使用真实的地址：</p>
<h4><span id="交易输入">交易输入</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] signature;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查公钥hash是否用于交易输入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">usesKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lockingHash = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPubKey());</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(lockingHash, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="交易输出">交易输出</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKeyHash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TXOutput <span class="title">newTXOutput</span><span class="params">(<span class="keyword">int</span> value, String address)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 反向转化为 byte 数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = Base58Check.base58ToBytes(address);</span><br><span class="line">        <span class="keyword">byte</span>[] pubKeyHash = Arrays.copyOfRange(versionedPayload, <span class="number">1</span>, versionedPayload.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TXOutput(value, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查交易输出是否能够使用指定的公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLockedWithKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.getPubKeyHash(), pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码中还有很多其他的地方需要变动，这里不一一指出，详见文末的源码连接。</p>
</blockquote>
<p>注意，由于我们不会去实现脚本语言特性，所以我们不再使用 <strong>scriptPubKey</strong> 和 <strong>scriptSig</strong> 字段。取而代之的是，我们将 <strong>scriptSig</strong> 拆分为了 <strong>signature</strong> 和 <strong>pubKey</strong> 字段，<strong>scriptPubKey</strong> 重命名为了 <strong>pubKeyHash</strong> 。我们将会实现类似于比特币中的交易输出锁定/解锁逻辑和交易输入的签名逻辑，但是我们会在方法中执行此操作。</p>
<p><strong>usesKey</strong> 用于检查交易输入中的公钥是否能够解锁交易输出。需要注意的是，交易输入中存储的是未经hash过的公钥，但是方法实现中对它做了一步 <code>ripeMD160Hash</code> 转化。</p>
<p><strong>isLockedWithKey</strong> 用于检查提供的公钥Hash是否能够用于解锁交易输出，这个方法是 <strong>usesKey</strong> 的补充。<strong>usesKey</strong> 被用于 <strong>getAllSpentTXOs</strong> 方法中，<strong>isLockedWithKey</strong> 被用于 <strong>findUnspentTransactions</strong> 方法中，这样使得在前后两笔交易之间建立起了连接。</p>
<p><strong>newTXOutput</strong> 方法中，将 value 锁定到了 address 上。当我们向别人发送比特币时，我们只知道他们的地址，因此函数将地址作为唯一的参数。然后解码地址，并从中提取公钥哈希并保存在PubKeyHash字段中。</p>
<p>现在，让我们一起来检查一下是否能够正常运行：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">19</span>aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">6.77</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>e44be0c94c39a4fef24c67d85c428e8bfbd227e292d75c0f4d398e2e81c </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">'13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e -to  <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVd -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh -to <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e-amount <span class="number">5</span></span><br><span class="line">Elapsed Time: <span class="number">4.477</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>da41dfacc8032a553ed5b1aa5e24318d5d89ca14a16c4f70129609c8365 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">'13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line">Balance of <span class="string">'1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">19</span>aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line">Balance of <span class="string">'19aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Nice! 现在让我们一起来实现交易签名部分的内容。</p>
<h2><span id="签名实现">签名实现</span></h2><p>交易数据必须被签名，因为这是比特币中能够保证不能花费属于他人比特币的唯一方法。如果一个签名是无效的，那么这笔交易也是无效的，这样的话，这笔交易就不能被添加到区块链中去。</p>
<p>我们已经有了实现交易签名的所有片段，还有一个事情除外：用于签名的数据。交易数据中哪一部分是真正用于签名的呢？难道是全部数据？选择用于签名的数据相当的重要。用于签名的数据必须包含以独特且唯一的方式标识数据的信息。例如，仅对交易输出签名是没有意义的，因为此签名不会考虑发送发与接收方。</p>
<p>考虑到交易数据要解锁前面的交易输出，重新分配交易输出中的 <em>value</em> 值，并且锁定新的交易输出，因此下面这些数据是必须被签名的：</p>
<ol>
<li>存储在解锁了的交易输出中的公钥Hash。它标识了交易的发送方。</li>
<li>存储在新的、锁定的交易输出中的公钥Hash。它标识了交易的接收方。</li>
<li>新的交易输出中包含的 <em>value</em> 值。</li>
</ol>
<blockquote>
<p>在比特币中，锁定/解锁逻辑存储在脚本中，解锁脚本存储在交易输入的 <em>ScriptSig</em> 字段中，而锁定脚本存储在交易输出的 <em>ScriptPubKey</em> 的字段中。 由于比特币允许不同类型的脚本，因此它会对ScriptPubKey的全部内容进行签名。</p>
</blockquote>
<p>如你所见，我们不需要去对存储在交易输入中的公钥进行签名。正因为如此，在比特币中，所签名的并不是一个交易，而是一个去除部分内容的交易输入副本，交易输入里面存储了被引用交易输出的 <code>ScriptPubKey</code> 。</p>
<blockquote>
<p>获取修剪后的交易副本的详细过程在<a href="https://en.bitcoin.it/wiki/File:Bitcoin_OpCheckSig_InDetail.png" target="_blank" rel="external">这里</a>. 虽然它可能已经过时了，但是我并没有找到另一个更可靠的来源。</p>
</blockquote>
<p>OK，它看起来有点复杂，因此让我们来开始coding吧。我们将从 <strong>Sign</strong> 方法开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap  前面多笔交易集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(BCECPrivateKey privateKey, Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，因为它不存在交易输入信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Previous transaction is not correct"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">      </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        ecdsaSign.initSign(privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; txCopy.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">            ecdsaSign.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line">            <span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line">            <span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法需要私钥和前面多笔交易集合作为参数。正如前面所提到的那样，为了能够对交易信息进行签名，我们需要能够访问到被交易数据中的交易输入所引用的交易输出，因此我们需要得到存储这些交易输出的交易信息。</p>
<p>让我们来一步一步review这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 coinbase 交易信息不存在交易输入信息，因此它不需要签名，直接return.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure>
<p>创建交易的副本</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用于签名的交易数据副本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">trimmedCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TXInput[] tmpTXInputs = <span class="keyword">new</span> TXInput[<span class="keyword">this</span>.getInputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            tmpTXInputs[i] = <span class="keyword">new</span> TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] tmpTXOutputs = <span class="keyword">new</span> TXOutput[<span class="keyword">this</span>.getOutputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getOutputs().length; i++) &#123;</span><br><span class="line">            TXOutput txOutput = <span class="keyword">this</span>.getOutputs()[i];</span><br><span class="line">            tmpTXOutputs[i] = <span class="keyword">new</span> TXOutput(txOutput.getValue(), txOutput.getPubKeyHash());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Transaction(<span class="keyword">this</span>.getTxId(), tmpTXInputs, tmpTXOutputs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个交易数据的副本包含了交易输入与交易输出，但是交易输入的 <em>Signature</em> 与 <em>PubKey</em> 需要设置为null。</p>
<p>使用私钥初始化 <code>SHA256withECDSA</code> 签名算法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br></pre></td></tr></table></figure>
<p>接下来，我们迭代交易副本中的交易输入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (TXInput txInput : txCopy.getInputs()) &#123;</span><br><span class="line">      <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">      Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">      <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">      TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">      txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">      txInputCopy.setSignature(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>在每一个 txInput中，<strong><em>signature</em></strong> 都需要设置为<code>null</code>（仅仅是为了二次确认检查），并且 <strong>pubKey</strong> 设置为它所引用的交易输出的 <strong><em>pubKeyHash</em></strong> 字段。在此刻，除了当前的正在循环的交易输入(txInput)外，其他所有的交易输入都是”空的”，也就是说他们的 <code>Signature</code> 和 <code>PubKey</code> 字段被设置为 <code>null</code>。因此，<strong>交易输入是被分开签名的</strong>，尽管这对于我们的应用并不十分紧要，但是比特币允许交易包含引用了不同地址的输入。</p>
<p><code>Hash</code> 方法对交易进行序列化，并使用 SHA-256 算法进行哈希。哈希后的结果就是我们要签名的数据。在获取完哈希，我们应该重置 <code>PubKey</code> 字段，以便于它不会影响后面的迭代。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">txCopy.setTxId(txCopy.hash());</span><br><span class="line">txInput.setPubKey(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>现在，最关键的部分来了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br><span class="line">ecdsaSign.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line"><span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line"><span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br></pre></td></tr></table></figure>
<p>使用 <code>SHA256withECDSA</code>  签名算法加上私钥，来对交易ID进行签名，从而得到了交易输入所要设置的交易签名。</p>
<p>现在，让我们来实现交易的验证功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap 前面多笔交易集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，也就无需验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Previous transaction is not correct"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名验证的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">        </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        Signature ecdsaVerify = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">            BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">            BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">            ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">            ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">            PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">            ecdsaVerify.initVerify(publicKey);</span><br><span class="line">            ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首选，同前面签名一样，我们先获取交易的拷贝数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure>
<p>获取椭圆曲线参数和签名类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">Signature ecdsaVerify = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br></pre></td></tr></table></figure>
<p>接下来，我们来检查每一个交易输入的签名是否正确：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">    TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">    <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">    Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">    <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">    TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">    TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">    txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">    txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">    <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">    txCopy.setTxId(txCopy.hash());</span><br><span class="line">    txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分与Sign方法中的相同，因为在验证过程中我们需要签署相同的数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">ecdsaVerify.initVerify(publicKey);</span><br><span class="line">ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于交易输入中存储的 <code>pubkey</code> ，实际上是椭圆曲线上的一对 x,y 坐标，所以我们可以从 pubKey 得到公钥<code>PublicKey</code>，然后在用公钥去签名进行验证。如果验证成功，则返回true，否则，返回false。</p>
<p>现在，我们需要一个方法来获取以前的交易。 由于这需要与区块链互动，我们将使其成为 <strong>blockchain</strong> 的一种方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据交易ID查询交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txId 交易ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Transaction <span class="title">findTransaction</span><span class="params">(<span class="keyword">byte</span>[] txId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator iterator = <span class="keyword">this</span>.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = iterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction tx : block.getTransactions()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.equals(tx.getTxId(), txId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Can not found tx by txId ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行交易签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx         交易数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signTransaction</span><span class="params">(Transaction tx, BCECPrivateKey privateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 先来找到这笔新的交易中，交易输入所引用的前面的多笔交易的数据</span></span><br><span class="line">        Map&lt;String, Transaction&gt; prevTxMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction prevTx = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx);</span><br><span class="line">        &#125;</span><br><span class="line">        tx.sign(privateKey, prevTxMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Transaction&gt; prevTx = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction transaction = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tx.verify(prevTx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们需要对我们的交易进行真正的签名和验证了，交易的签名发生在 <strong>newUTXOTransaction</strong> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">    newTx.setTxId(newTx.hash());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行交易签名</span></span><br><span class="line">    blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newTx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易的验证发生在一笔交易被放入区块之前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 挖矿前，先验证交易记录</span></span><br><span class="line">    <span class="keyword">for</span> (Transaction tx : transactions) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.verifyTransactions(tx)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Fail to mine block ! Invalid transaction ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，让我们再一次对整个工程的代码做一个测试，测试结果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">164.961</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000524231</span>ae1832c49957848d2d1871cc35ff4d113c23be1937c6dff5cdf2a </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">'1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -to  <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6 -to <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -amount <span class="number">5</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000354</span>f86cde369d4c39d2b3016ac9a74956425f1348b4c26b2cddb98c100b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">'1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line">Balance of <span class="string">'1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line">Balance of <span class="string">'13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Good！没有任何错误！</p>
<p>让我们注释掉 <code>NewUTXOTransaction</code> 方法中的一行代码，确保未被签名的交易不能被添加到区块中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span></span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Fail to verify transaction ! transaction invalid ! </span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.verifyTransactions(Blockchain.java:<span class="number">334</span>)</span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.mineBlock(Blockchain.java:<span class="number">76</span>)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.send(CLI.java:<span class="number">202</span>)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.parse(CLI.java:<span class="number">79</span>)</span><br><span class="line">	at one.wangwei.blockchain.BlockchainTest.main(BlockchainTest.java:<span class="number">23</span>)</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<p><strong><em>WalletUtils</em></strong> 如若抛出异常：Illegal key size or default parameters，请按以下方法进行解决：</p>
<p><a href="https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters" target="_blank" rel="external">https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters</a></p>
<h2><span id="总结">总结</span></h2><p>这一节，我们学到了:</p>
<ol>
<li>使用椭圆曲线加密算法，如何去创建钱包；</li>
<li>了解到了如何去生成比特币地址；</li>
<li>如何去对交易信息进行签名并对签名进行验证；</li>
</ol>
<p>到目前为止，我们已经实现了比特币的许多关键特性！ 我们已经实现了除外网络外的几乎所有功能，并且在下一篇文章中，我们将继续完善交易这一环节机制。</p>
<h2><span id="资料">资料</span></h2><ul>
<li><p>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part5-wallet" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part5-wallet</a></p>
</li>
<li><p><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc" target="_blank" rel="external">《精通比特币（第二版）》—— 第四章</a></p>
</li>
<li><p><a href="http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories" target="_blank" rel="external">Elliptic Curve Key Pair Generation and Key Factories</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/30116758/generating-publickey-from-x-and-y-values-of-elliptic-curve-point" target="_blank" rel="external">How to create public key objects with x and y coordinates?</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="external">Public-key cryptography</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Digital_signature" target="_blank" rel="external">Digital signatures</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Elliptic_curve" target="_blank" rel="external">Elliptic curve</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Elliptic_curve_cryptography" target="_blank" rel="external">Elliptic curve cryptography</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" rel="external">ECDSA</a></p>
</li>
<li><p><a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" target="_blank" rel="external">Technical background of Bitcoin addresses</a></p>
</li>
<li><p><a href="https://en.bitcoin.it/wiki/Address" target="_blank" rel="external">Address</a></p>
</li>
<li><p><a href="https://en.bitcoin.it/wiki/Base58Check_encoding" target="_blank" rel="external">Base58</a></p>
</li>
<li><p><a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" target="_blank" rel="external">A gentle introduction to elliptic curve cryptography</a></p>
<p>​</p>
</li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=e314e0662f84fc732e37faa7abfa5615ce04675d70c3fad51d534ac60c7f38a41e5f468d43d209823e008299b24bde00ffcbd172896c1be5a1655c37f332e1a71&amp;h=cf27d733b01c15c2dff665f44233f12735f93bf3a4529166506fce3caff2872a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=e314e0662f84fc732e37faa7abfa5615ce04675d70c3fad51d534ac60c7f38a41e5f468d43d209823e008299b24bde00ffcbd172896c1be5a1655c37f332e1a71&amp;h=cf27d733b01c15c2dff665f44233f12735f93bf3a4529166506fce3caff2872a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> Elliptic Curve </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（四）—— 交易（UTXO）]]></title>
      <url>/posts/9cf9e42a.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/ecommerce-2140604.jpg" alt="bitcoin-blockchain-transactions"></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-4/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-4/</a></p></blockquote><h2><span id="引言">引言</span></h2><p><a href="https://wangwei.one/posts/35c768a3.html">上一篇</a> 文章，我们实现了区块数据的持久化，本篇开始交易环节的实现。交易这一环节是整个比特币系统当中最为关键的一环，并且区块链唯一的目的就是通过安全的、可信的方式来存储交易信息，防止它们创建之后被人恶意篡改。今天我们开始实现交易这一环节，但由于这是一个很大的话题，所以我们分为两部分：第一部分我们将实现区块链交易的基本机制，到第二部分，我们再来研究它的细节。</p><a id="more"></a><h2><span id="比特币交易">比特币交易</span></h2><p>如果你开发过Web应用程序，为了实现支付系统，你可能会在数据库中创建一些数据库表：<code>账户</code> 和 <code>交易记录</code>。账户用于存储用户的个人信息以及账户余额等信息，交易记录用于存储资金从一个账户转移到另一个账户的记录。但是在比特币中，支付系统是以一种完全不一样的方式实现的，在这里：</p><ul><li>没有账户</li><li>没有余额</li><li>没有地址</li><li>没有 Coins（币）</li><li>没有发送者和接受者</li></ul><p>由于区块链是一个公开的数据库，我们不希望存储有关钱包所有者的敏感信息。<code>Coins</code> 不会汇总到钱包中。交易不会将资金从一个地址转移到另一个地址。没有可保存帐户余额的字段或属性。只有交易信息。那比特币的交易信息里面到底存储的是什么呢？</p><h3><span id="交易组成">交易组成</span></h3><p>一笔比特币的交易由 <code>交易输入</code> 和 <code>交易输出</code> 组成，数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易的Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXInput[] inputs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXOutput[] outputs;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一笔交易的 <code>交易输入</code> 其实是指向上一笔交易的<code>交易输出</code> （这个后面详细说明）。我们钱包里面的 Coin（币）实际是存储在这些 <code>交易输出</code> 里面。下图表示了区块链交易系统里面各个交易相互引用的关系：</p>
<p><img src="https://img.i7years.com/blog/transactions-diagram.png" alt="transactions-diagram"></p>
<p>注意：</p>
<ol>
<li>有些 <code>交易输出</code> 并不是由 <code>交易输入</code> 产生，而是凭空产生的（后面会详细介绍）。</li>
<li>但，<code>交易输入</code> 必须指向某个 <code>交易输出</code>，它不能凭空产生。</li>
<li>在一笔交易里面，<code>交易输入</code> 可能会来自多笔交易所产生的 <code>交易输出</code>。</li>
</ol>
<p>在整篇文章中，我们将使用诸如“钱”，“币”，“花费”，“发送”，“账户”等词语。但比特币中没有这样的概念，在比特币交易中，交易信息是由 <code>锁定脚本</code> 锁定一个数值，并且只能被所有者的 <code>解锁脚本</code> 解锁。（解铃还须系铃人）</p>
<h2><span id="交易输出">交易输出</span></h2><p>让我们先从交易输出开始，他的数据结构如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁定脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptPubKey;</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，它表示的是能够存储 “coins（币）”的交易输出（注意 <strong>value</strong> 字段）。并且这里所谓的 <strong>value</strong> 实际上是由存储在  <strong>ScriptPubKey</strong> （锁定脚本）中的一个puzzle（难题） 所锁定。在内部，比特币使用称为脚本的脚本语言，用于定义输出锁定和解锁逻辑。这个语言很原始（这是故意的，以避免可能的黑客和滥用），但我们不会详细讨论它。 你可以在这里找到它的详细解释。<a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="external">here</a></p>
<blockquote>
<p>在比特币中，<em>value</em> 字段存储着 <em>satoshis</em> 的任意倍的数值，而不是BTC的数量。<em>satoshis</em> 是比特币的百万分之一（0.00000001 BTC），因此这是比特币中最小的货币单位（如1美分）。</p>
<blockquote>
<p><em>satoshis</em>：聪</p>
</blockquote>
<p>锁定脚本是一个放在一个输出值上的“障碍”，同时它明确了今后花费这笔输出的条件。由于锁定脚本往往含有一个公钥（即比特币地址），在历史上它曾被称作一个脚本公钥代码。在大多数比特币应用源代码中，脚本公钥代码便是我们所说的锁定脚本。 </p>
</blockquote>
<p>由于我们还没有实现钱包地址的逻辑，所以这里先暂且忽略锁定脚本相关的逻辑。<strong>ScriptPubKey</strong> 将会存储任意的字符串（用户定义的钱包地址）</p>
<blockquote>
<p>顺便说一句，拥有这样的脚本语言意味着比特币也可以用作智能合约平台。</p>
</blockquote>
<p>关于 <code>交易输出</code> 的一个重要的事情是它们是<strong>不可分割的</strong>，这意味着你不能将它所存储的数值拆开来使用。当这个交易输出在新的交易中被交易输入所引用时，它将作为一个整体被花费掉。 如果其值大于所需值，那么剩余的部分则会作为零钱返回给付款方。 这与真实世界的情况类似，例如，您支付5美元的钞票用于购买1美元的东西，那么你将会得到4美元的零钱。</p>
<h2><span id="交易输入">交易输入</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptSig;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面提到过，一个交易输入指向的是某一笔交易的交易输出：</p>
<ul>
<li><strong>txId</strong> 存储的是某笔交易的ID值</li>
<li><strong>txOutputIndex</strong> 存储的是交易中这个交易输出的索引位置（因为一笔交易可能包含多个交易输出）</li>
<li><strong>scriptSig</strong> 主要是提供用于交易输出中 <strong>ScriptPubKey</strong> 所需的验证数据。<ul>
<li>如果这个数据被验证正确，那么相应的交易输出将被解锁，并且其中的 value 能够生成新的交易输出；</li>
<li>如果不正确，那么相应的交易输出将不能被交易输入所引用；</li>
</ul>
</li>
</ul>
<p>通过锁定脚本与解锁脚本这种机制，保证了某个用户不能花费属于他人的Coins。</p>
<p>同样，由于我们尚未实现钱包地址功能，<strong>ScriptSig</strong> 将会存储任意的用户所定义的钱包地址。我们将会在下一章节实现公钥和数字签名验证。</p>
<p>说了这么多，我们来总结一下。交易输出是”Coins”实际存储的地方。每一个交易输出都带有一个锁定脚本，它决定了解锁的逻辑。每一笔新的交易必须至少有一个交易输入与交易输出。一笔交易的交易输入指向前一笔交易的交易输出，并且提供用于锁定脚本解锁需要的数据（<code>ScriptSig</code> 字段），然后利用交易输出中的 <code>value</code> 去创建新的交易输出。</p>
<blockquote>
<p>注意，这段话的原文如下，但是里面有表述错误的地方，交易输出带有的是锁定脚本，而不是解锁脚本。</p>
<p>Let’s sum it up. Outputs are where “coins” are stored. Each output comes with an unlocking script, which determines the logic of unlocking the output. Every new transaction must have at least one input and output. An input references an output from a previous transaction and provides data (the <code>ScriptSig</code> field) that is used in the output’s unlocking script to unlock it and use its value to create new outputs.</p>
</blockquote>
<p>那到底是先有交易输入还是先有交易输出呢？</p>
<h2><span id="鸡与蛋的问题">鸡与蛋的问题</span></h2><p>在比特币中，鸡蛋先于鸡出现。交易输入源自于交易输出的逻辑是典型的”先有鸡还是先有蛋”的问题：交易输入产生交易输出，交易输出又会被交易输入所引用。在比特币中，<strong>交易输出先于交易输入出现</strong>。</p>
<p>当矿工开始开采区块时，区块中会被添加一个 <strong>coinbase</strong> 交易（创币交易）。coinbase 交易是一种特殊的交易，它不需要以前已经存在的交易输出。它会凭空创建出交易输出（i.e: Coins）。也即，鸡蛋的出现并不需要母鸡，这笔交易是作为矿工成功挖出新的区块后的一笔奖励。</p>
<p>正如你所知道的那样，在区块链的最前端，即第一个区块，有一个创世区块。他产生了区块链中有史以来的第一个交易输出，并且由于没有前一笔交易，也就没有相应的输出，因此不需要前一笔交易的交易输出。</p>
<p>让我们来创建 coinbase 交易：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建CoinBase交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to   收账的钱包地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 解锁脚本数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">newCoinbaseTX</span><span class="params">(String to, String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(data)) &#123;</span><br><span class="line">        data = String.format(<span class="string">"Reward to '%s'"</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建交易输入</span></span><br><span class="line">    TXInput txInput = <span class="keyword">new</span> TXInput(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;&#125;, -<span class="number">1</span>, data);</span><br><span class="line">    <span class="comment">// 创建交易输出</span></span><br><span class="line">    TXOutput txOutput = <span class="keyword">new</span> TXOutput(SUBSIDY, to);</span><br><span class="line">    <span class="comment">// 创建交易</span></span><br><span class="line">    Transaction tx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, <span class="keyword">new</span> TXInput[]&#123;txInput&#125;, <span class="keyword">new</span> TXOutput[]&#123;txOutput&#125;);</span><br><span class="line">    <span class="comment">// 设置交易ID</span></span><br><span class="line">    tx.setTxId();</span><br><span class="line">    <span class="keyword">return</span> tx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>coinbase交易只有一个交易输入。在我们的代码实现中，<strong>txId</strong> 是空数组，<strong>txOutputIndex</strong> 设置为了 -1。另外，coinbase交易不会在 <strong>ScriptSig</strong> 字段上存储解锁脚本，相反，存了一个任意的数据。</p>
<blockquote>
<p>在比特币中，第一个 coinbase 交易报刊了如下的信息：”The Times 03/Jan/2009 Chancellor on brink of second bailout for banks”. <a href="https://blockchain.info/tx/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b?show_adv=true" target="_blank" rel="external">点击查看</a></p>
</blockquote>
<p><strong>SUBSIDY</strong> 是挖矿奖励数量。在比特币中，这个奖励数量没有存储在任何地方，而是依据现有区块的总数进行计算而得到：区块总数 除以 210000。开采创世区块得到的奖励为50BTC，每过 210000 个区块，奖励会减半。在我们的实现中，我们暂且将挖矿奖励设置为常数。（至少目前是这样）</p>
<h2><span id="在区块链中存储交易信息">在区块链中存储交易信息</span></h2><p>从现在开始，每一个区块必须存储至少一个交易信息，并且尽可能地避免在没有交易数据的情况下进行挖矿。这意味着我们必须移除 <strong>Block</strong> 对象中的 <strong>date</strong> 字段，取而代之的是 <strong>transactions</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] transactions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相应地，<strong>newGenesisBlock</strong> 与 <strong>newBlock</strong> 也都需要做改变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coinbase</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">(Transaction coinbase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Block.newBlock(<span class="string">""</span>, <span class="keyword">new</span> Transaction[]&#123;coinbase&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, Transaction[] transactions)</span> </span>&#123;</span><br><span class="line">     Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, transactions, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">     ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">     PowResult powResult = pow.run();</span><br><span class="line">     block.setHash(powResult.getHash());</span><br><span class="line">     block.setNonce(powResult.getNonce());</span><br><span class="line">     <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，修改 <strong>newBlockchain</strong> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        <span class="comment">// 创建 coinBase 交易</span></span><br><span class="line">        Transaction coinbaseTX = Transaction.newCoinbaseTX(address, <span class="string">""</span>);</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock(coinbaseTX);</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，代码有钱包地址的接口，将会收到开采创世区块的奖励。</p>
<h2><span id="工作量证明pow">工作量证明（Pow）</span></h2><p>Pow算法必须将存储在区块中的交易信息考虑在内，以保存交易信息存储的一致性和可靠性。因此，我们必须修改 <strong>ProofOfWork.prepareData</strong> 接口代码逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().hashTransaction(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中  <strong>hashTransaction</strong> 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">   <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">       txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].getTxId();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> DigestUtils.sha256(ByteUtils.merge(txIds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，我们使用哈希值来作为数据的唯一标识。我们希望区块中的所有交易数据都能通过一个哈希值来定义它的唯一标识。为了达到这个目的，我们计算了每一个交易的唯一哈希值，然后将他们串联起来，再对这个串联后的组合进行哈希值计算。</p>
<blockquote>
<p>比特币使用更复杂的技术：它将所有包含在块中的交易表示为 <a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees" target="_blank" rel="external">Merkle树</a> ，并在Proof-of-Work系统中使用该树的根散列。 这种方法只需要跟节点的散列值就可以快速检查块是否包含某笔交易，而无需下载所有交易。</p>
</blockquote>
<h2><span id="utxo未花费交易输出">UTXO（未花费交易输出）</span></h2><blockquote>
<p>UTXO：unspend transaction output.（未被花费的交易输出）</p>
<p>在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO.</p>
</blockquote>
<p><em>UTXO</em> 是理解比特币交易原理的关键所在，我们先来看一段场景：</p>
<p>场景：假设你过去分别向A、B、C这三个比特币用户购买了BTC，从A手中购买了3.5个BTC，从B手中购买了4.5个BTC，从C手中购买了2个BTC，现在你的比特币钱包里面恰好剩余10个BTC。</p>
<p>问题：这个10个BTC是真正的10个BTC吗？其实不是，这句话可能听起来有点怪。（什么！我钱包里面的BTC不是真正的BTC，你不要吓我……）</p>
<p>解释：前面提到过在比特币的交易系统当中，并不存在账户、余额这些概念，所以，你的钱包里面的10个BTC，并不是说钱包余额为10个BTC。而是说，这10个BTC其实是由你的比特币地址（钱包地址|公钥）锁定了的散落在各个区块和各个交易里面的UTXO的总和。</p>
<p>UTXO 是比特币交易的基本单位，每笔交易都会产生UTXO，一个UTXO可以是一“聪”的任意倍。给某人发送比特币实际上是创造新的UTXO，绑定到那个人的钱包地址，并且能被他用于新的支付。</p>
<p>一般的比特币交易由 <code>交易输入</code> 和 <code>交易输出</code> 两部分组成。A向你支付3.5个BTC这笔交易，实际上产生了一个新的UTXO，这个新的UTXO 等于 3.5个BTC（3.5亿聪），并且锁定到了你的比特币钱包地址上。</p>
<p>假如你要给你女（男）朋友转 1.5 BTC，那么你的钱包会从可用的UTXO中选取一个或多个可用的个体来拼凑出一个大于或等于一笔交易所需的比特币量。比如在这个假设场景里面，你的钱包会选取你和C的交易中的UTXO作为 交易输入，input = 2BTC，这里会生成两个新的交易输出，一个输出（UTXO = 1.5 BTC）会被绑定到你女（男）朋友的钱包地址上，另一个输出（UTXO = 0.5 BTC）会作为找零，重新绑定到你的钱包地址上。</p>
<blockquote>
<p>有关比特币交易这部分更详细的内容，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions" target="_blank" rel="external">《精通比特币（第二版）》第6章 —— 交易</a></p>
</blockquote>
<p>我们需要找到所有未花费的交易输出（UTXO）。<em>Unspent(未花费)</em> 意味着这些交易输出从未被交易输入所指向。这前面的图片中，UTXO如下：</p>
<ol>
<li>tx0, output 1;</li>
<li>tx1, output 0;</li>
<li>tx3, output 0;</li>
<li>tx4, output 0.</li>
</ol>
<p>当然，当我们检查余额时，我不需要区块链中所有的UTXO，我只需要能被我们解锁的UTXO（当前，我们还没有实现密钥对，而是替代为用户自定义的钱包地址）。首先，我们在交易输入与交易输出上定义锁定-解锁的方法：</p>
<p>交易输入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line">  	</span><br><span class="line">    ...</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canUnlockOutputWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptSig().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交易输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canBeUnlockedWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptPubKey().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们暂时用 <strong>unlockingData</strong> 来与脚本字段进行比较。我们会在后面的文章中来对这部分内容进行优化，我们将会基于私钥来实现用户的钱包地址。</p>
<p>下一步，查询所有与钱包地址绑定的包含UTXO的交易信息，有点复杂（本篇先这样实现，后面我们做一个与钱包地址映射的UTXO池来进行优化）：</p>
<ul>
<li>从与钱包地址对应的交易输入中查询出所有已被花费了的交易输出</li>
<li>再来排除，寻找包含未被花费的交易输出的交易</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] findUnspentTransactions(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(address);</span><br><span class="line">        Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">                String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                    <span class="keyword">if</span> (transaction.getOutputs()[outIndex].canBeUnlockedWith(address)) &#123;</span><br><span class="line">                        unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unspentTxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从交易输入中查询区块链中所有已被花费了的交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交易ID以及对应的交易输出下标地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">int</span>[]&gt; getAllSpentTXOs(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义TxId ——&gt; spentOutIndex[]，存储交易ID与已被花费的交易输出数组索引值</span></span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; spentTXOs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line">                <span class="comment">// 如果是 coinbase 交易，直接跳过，因为它不存在引用前一个区块的交易输出</span></span><br><span class="line">                <span class="keyword">if</span> (transaction.isCoinbase()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (txInput.canUnlockOutputWith(address)) &#123;</span><br><span class="line">                        String inTxId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                        <span class="keyword">int</span>[] spentOutIndexArray = spentTXOs.get(inTxId);</span><br><span class="line">                        <span class="keyword">if</span> (spentOutIndexArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            spentTXOs.put(inTxId, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;txInput.getTxOutputIndex()&#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex());</span><br><span class="line">                            spentTXOs.put(inTxId, spentOutIndexArray);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spentTXOs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到了所有包含UTXO的交易数据，接下来，我们就可以得到所有UTXO集合了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXO(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transaction[] unspentTxs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (unspentTxs == <span class="keyword">null</span> || unspentTxs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTxs) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : tx.getOutputs()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们可以实现获取钱包地址余额的接口了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询钱包余额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getBalance</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        TXOutput[] txOutputs = blockchain.findUTXO(address);</span><br><span class="line">        <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (txOutputs != <span class="keyword">null</span> &amp;&amp; txOutputs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                balance += txOutput.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Balance of '%s': %d\n"</span>, address, balance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询 <em>wangwei</em> 这个钱包地址的余额：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2><span id="转账">转账</span></h2><p>现在，我们想要给某人发送一些币。因此，我们需要创建一笔新的交易，然后放入区块中，再进行挖矿。到目前为止，我们只是实现了 <em>coinbase</em> 交易，现在我们需要实现常见的创建交易接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 from 向  to 支付一定的 amount 的金额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from       支付钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to         收款钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     交易金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockchain 区块链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpendableOutputResult result = blockchain.findSpendableOutputs(from, amount);</span><br><span class="line">        <span class="keyword">int</span> accumulated = result.getAccumulated();</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = result.getUnspentOuts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accumulated &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Not enough funds"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, <span class="keyword">int</span>[]&gt;&gt; iterator = unspentOuts.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        TXInput[] txInputs = &#123;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, <span class="keyword">int</span>[]&gt; entry = iterator.next();</span><br><span class="line">            String txIdStr = entry.getKey();</span><br><span class="line">            <span class="keyword">int</span>[] outIdxs = entry.getValue();</span><br><span class="line">            <span class="keyword">byte</span>[] txId = Hex.decodeHex(txIdStr);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outIndex : outIdxs) &#123;</span><br><span class="line">                txInputs = ArrayUtils.add(txInputs, <span class="keyword">new</span> TXInput(txId, outIndex, from));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] txOutput = &#123;&#125;;</span><br><span class="line">        txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput(amount, to));</span><br><span class="line">        <span class="keyword">if</span> (accumulated &gt; amount) &#123;</span><br><span class="line">            txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput((accumulated - amount), from));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">        newTx.setTxId();</span><br><span class="line">        <span class="keyword">return</span> newTx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在创建新的交易输出之前，我们需要事先找到所有的UTXO，并确保有足够的金额。这就是 <strong>findSpendableOutputs</strong> 要干的事情。之后，为每个找到的输出创建一个引用它的输入。接下来，我们创建两个交易输出：</p>
<ol>
<li>一个 <em>output</em> 用于锁定到接收者的钱包地址上。这个是真正被转走的coins；</li>
<li>另一个 <em>output</em> 锁定到发送者的钱包地址上。这个就是 找零。只有当用于支付的UTXO总和大于要支付的金额时，才会创建这部分的 交易输出。记住：交易输出是<strong>不可分割的</strong></li>
</ol>
<p><strong>findSpendableOutputs</strong> 需要调用我们之前创建的 <strong>findUnspentTransactions</strong> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(String address, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transaction[] unspentTXs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTXs) &#123;</span><br><span class="line"></span><br><span class="line">            String txId = Hex.encodeHexString(tx.getTxId());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; tx.getOutputs().length; outId++) &#123;</span><br><span class="line"></span><br><span class="line">                TXOutput txOutput = tx.getOutputs()[outId];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法会遍历所有的UTXO并统计他们的总额。当计算的总额恰好大于或者等于需要转账的金额时，方法会停止遍历，然后返回用于支付的总额以及按交易ID分组的交易输出索引值数组。我们不想要花更多的钱。</p>
<p>现在，我们可以修改 <strong>Block.mineBlock</strong> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包交易，进行挖矿</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Fail to get last block hash ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Block block = Block.newBlock(lastBlockHash, transactions);</span><br><span class="line">        <span class="keyword">this</span>.addBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，我们来实现转账的接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        RocksDBUtils.getInstance().closeDB();</span><br><span class="line">        System.out.println(<span class="string">"Success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转账，意味着创建一笔新的交易并且通过挖矿的方式将其存入区块中。但是，比特币不会像我们这样做，它会把新的交易记录先存到内存池中，当一个矿工准备去开采一个区块时，它会把打包内存池中的所有交易信息，并且创建一个候选区块。只有当这个包含所有交易信息的候选区块被成功开采并且被添加到区块链上时，这些交易信息才算被确认。</p>
<p>让我们来测试一下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先确认 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转账</span></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Pedro -amount <span class="number">6</span></span><br><span class="line">Elapsed Time: <span class="number">0.828</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c5f50cf72db1f375a5d454f98bc49d07335db921cbef5fa9e58ad34d462 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Pedro 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address Pedro</span><br><span class="line">Balance of <span class="string">'Pedro'</span>: <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>赞！现在让我们来创建更多的交易并且确保从多个交易输出进行转账是正常的：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Pedro -to Helen -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">2.533</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c81d541ad407a3767ad633d1147602df86fe14e1962ec145ab17b633e88 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Helen -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">1.481</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c3f8b82c2b970438f5f1f39d56bb8a9d66341efc92a02ffcbff91acd84b </span><br><span class="line"></span><br><span class="line">Success!</span><br></pre></td></tr></table></figure>
<p>现在，Helen 这个钱包地址上有了两笔从 wangwei 和 Pedro 转账中产生的UTXO，让我们将它们再转账给另外一个人：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Helen -to Rachel -amount <span class="number">3</span></span><br><span class="line">Elapsed Time: <span class="number">17.136</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">000000</span>b1226a947166c2b01a15d1cd3558ddf86fe99bad28a0501a2af60f6a02 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">2</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Pedro  </span><br><span class="line">Balance of <span class="string">'Pedro'</span>: <span class="number">4</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Helen</span><br><span class="line">Balance of <span class="string">'Helen'</span>: <span class="number">1</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Rachel</span><br><span class="line">Balance of <span class="string">'Rachel'</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>非常棒！让我们来测试一下失败的场景：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh send -from wangwei -to Ivan -amount <span class="number">5</span> </span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line">        at one.wangwei.blockchain.transaction.Transaction.newUTXOTransaction(Transaction.java:<span class="number">104</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.send(CLI.java:<span class="number">138</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.parse(CLI.java:<span class="number">73</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.Main.main(Main.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<h2><span id="总结">总结</span></h2><p>本篇内容有点难度，但好歹我们现在有了交易信息了。尽管，缺少像比特币这一类加密货币的一些关键特性：</p>
<ol>
<li>钱包地址。我们还没有基于私钥的真实地址。</li>
<li>奖励。挖矿绝对没有利润。</li>
<li>UTXO池。当我们计算钱包地址的余额时，我们需要遍历所有的区块中的所有交易信息，当有许许多多的区块时，这将花费不少的时间。此外，如果我们想验证以后的交易，可能需要很长时间。 UTXO迟旨在解决这些问题并快速处理交易。</li>
<li>内存池。 这是交易在打包成区块之前存储的地方。 在我们当前的实现中，一个块只包含一笔交易，而且效率很低。</li>
</ol>
<h2><span id="资料">资料</span></h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part4-transaction1" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part4-transaction1</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions" target="_blank" rel="external">《精通比特币（第二版）》第6章 —— 交易</a></li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=ef3077c075f4ea9ffa0bd7a17d004d0af5fd1f67d8380989aba29b505c2343e7a5cf4e8a4ef75b82cb5ddea2428e5a8d9d0437c0a236ee49230005bb49104e8b1&amp;h=3e4f040f8eb07adfd8915dda4dbb1e2301860d195e5b9445a0256e56d01cebc7&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=ef3077c075f4ea9ffa0bd7a17d004d0af5fd1f67d8380989aba29b505c2343e7a5cf4e8a4ef75b82cb5ddea2428e5a8d9d0437c0a236ee49230005bb49104e8b1&amp;h=3e4f040f8eb07adfd8915dda4dbb1e2301860d195e5b9445a0256e56d01cebc7&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> UTXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（三）—— 持久化 & 命令行]]></title>
      <url>/posts/35c768a3.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/Millerblockchainadj-3200x2400.webp" alt="blockchain"></p><blockquote><p>文章的主要思想和内容均来自：<a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></p></blockquote><h2><span id="引言">引言</span></h2><p><a href="https://wangwei.one/posts/7890ab7e.html">上一篇</a> 文章我们实现了区块链的工作量证明机制（Pow），尽可能地实现了挖矿。但是距离真正的区块链应用还有很多重要的特性没有实现。今天我们来实现区块链数据的存储机制，将每次生成的区块链数据保存下来。有一点需要注意，区块链本质上是一款分布式的数据库，我们这里不实现”分布式”，只聚焦于数据存储部分。</p><a id="more"></a><h2><span id="数据库选择">数据库选择</span></h2><p>到目前为止，我们的实现机制中还没有区块存储这一环节，导致我们的区块每次生成之后都保存在了内存中。这样不便于我们重新使用区块链，每次都要从头开始生成区块，也不能够跟他人共享我们的区块链，因此，我们需要将其存储在磁盘上。</p><p>我们该选择哪一款数据库呢？事实上，在《<a href="https://github.com/wangweiX/blockchain-explore/tree/master/white-paper/0000-bitcoin" target="_blank" rel="external">比特币白皮书</a>》中并没有明确指定使用哪一种的数据库，因此这个由开发人员自己决定。<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%9C%AC%E8%81%AA" target="_blank" rel="external">中本聪</a> 开发的 <a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="external">Bitcoin Core</a> 中使用的是<a href="https://github.com/google/leveldb" target="_blank" rel="external">LevelDB</a>。原文 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="external">Building Blockchain in Go. Part 3: Persistence and CLI</a> 中使用的是 <a href="https://github.com/boltdb/bolt" target="_blank" rel="external">BoltDB</a> ，对Go语言支持比较好。</p><p>但是我们这里使用的是Java来实现，BoltDB不支持Java，这里我们选用 <a href="https://github.com/facebook/rocksdb" target="_blank" rel="external">Rocksdb</a> 。</p><blockquote><p>RocksDB是由Facebook数据库工程团队开发和维护的一款key-value存储引擎，比LevelDB性能更加强大，有关Rocksdb的详细介绍，请移步至官方文档：<a href="https://github.com/facebook/rocksdb" target="_blank" rel="external">https://github.com/facebook/rocksdb</a> ，这里不多做介绍。</p></blockquote><h2><span id="数据结构">数据结构</span></h2><p>在我们开始实现数据持久化之前，我们先要确定我们该如何去存储我们的数据。为此，我们先来看看比特币是怎么做的。</p><p>简单来讲，比特币使用了两个”buckets(桶)”来存储数据：</p><ul><li><strong>blocks</strong>. 描述链上所有区块的元数据.</li><li><strong>chainstate</strong>. 存储区块链的状态，指的是当前所有的<code>UTXO</code>（未花费交易输出）以及一些元数据.</li></ul><blockquote><p>“在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO。”</p><p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transaction-outputs-and-inputs" target="_blank" rel="external">《精通比特币》第二版 第06章节 —— 交易的输入与输出</a></p></blockquote><p>此外，每个区块数据都是以单独的文件形式存储在磁盘上。这样做是出于性能的考虑：当读取某一个单独的区块数据时，不需要加载所有的区块数据到内存中来。</p><p>在 <code>blocks</code> 这个桶中，存储的键值对：</p><ul><li><p>‘b’ + 32-byte block hash -&gt; block index record</p><blockquote><p>区块的索引记录</p></blockquote></li><li><p>‘f’ + 4-byte file number -&gt; file information record</p><blockquote><p>文件信息记录</p></blockquote></li><li><p>‘l’ -&gt; 4-byte file number: the last block file number used</p><blockquote><p>最新的一个区块所使用的文件编码</p></blockquote></li><li><p>‘R’ -&gt; 1-byte boolean: whether we’re in the process of reindexing</p><blockquote><p>是否处于重建索引的进程当中</p></blockquote></li><li><p>‘F’ + 1-byte flag name length + flag name string -&gt; 1 byte boolean: various flags that can be on or off</p><blockquote><p>各种可以打开或关闭的flag标志</p></blockquote></li><li><p>‘t’ + 32-byte transaction hash -&gt; transaction index record</p><blockquote><p>交易索引记录</p></blockquote></li></ul><p>在 <code>chainstate</code> 这个桶中，存储的键值对：</p><ul><li><p>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction</p><blockquote><p>某笔交易的UTXO记录</p></blockquote></li></ul><ul><li><p>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs</p><blockquote><p>数据库所表示的UTXO的区块Hash（抱歉，这一点我还没弄明白……）</p></blockquote></li></ul><p>由于我们还没有实现交易相关的特性，因此，我们这里只使用 <code>block</code> 桶。另外，前面提到过的，这里我们不会实现各个区块数据各自存储在独立的文件上，而是统一存放在一个文件里面。因此，我们不要存储和文件编码相关的数据，这样一来，我们所用到的键值对就简化为：</p><ul><li><p>32-byte block-hash -&gt; Block structure (serialized)</p><blockquote><p>区块数据与区块hash的键值对</p></blockquote></li><li><p>‘l’ -&gt; the hash of the last block in a chain</p><blockquote><p>最新一个区块hash的键值对</p></blockquote></li></ul><p>(<a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2" target="_blank" rel="external">查看更加详细的解释</a>:_Data_Storage))</p><h2><span id="序列化">序列化</span></h2><p>RocksDB的Key与Value只能以byte[]的形式进行存储，这里我们需要用到序列化与反序列化库 <a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="external">Kryo</a>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 对象对应的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        Input input = <span class="keyword">new</span> Input(bytes);</span><br><span class="line">        Object obj = <span class="keyword">new</span> Kryo().readClassAndObject(input);</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 需要序列化的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        Output output = <span class="keyword">new</span> Output(<span class="number">4096</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Kryo().writeClassAndObject(output, object);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = output.toBytes();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="持久化">持久化</span></h2><p>上面已经说过，我们这里使用<code>RocksDB</code>，我们先写一个相关的工具类<code>RocksDBUtils</code>，主要的功能如下：</p>
<ul>
<li>putLastBlockHash：保存最新一个区块的Hash值</li>
<li>getLastBlockHash：查询最新一个区块的Hash值</li>
<li>putBlock：保存区块</li>
<li>getBlock：查询区块</li>
</ul>
<blockquote>
<p>注意：BoltDB 支持 Bucket 的特性，而RocksDB 不支持，所以需要我们自己使用Map来做一个映射。</p>
</blockquote>
<h3><span id="rocksdbutils">RocksDBUtils</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.block.Block;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.SerializeUtils;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDB;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocksDBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链数据文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_FILE = <span class="string">"blockchain.db"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块桶前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLOCKS_BUCKET_KEY = <span class="string">"blocks"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新一个区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_BLOCK_KEY = <span class="string">"l"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> RocksDBUtils instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RocksDBUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RocksDBUtils.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> RocksDBUtils();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RocksDB db;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * block buckets</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; blocksBucket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RocksDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        openDB();</span><br><span class="line">        initBlockBucket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db = RocksDB.open(DB_FILE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to open db ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 blocks 数据桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBlockBucket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY);</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketBytes = db.get(blockBucketKey);</span><br><span class="line">            <span class="keyword">if</span> (blockBucketBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                blocksBucket = Maps.newHashMap();</span><br><span class="line">                db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to init block bucket ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlockHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putLastBlockHash</span><span class="params">(String tipBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to put last block hash ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastBlockHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY);</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHashBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) SerializeUtils.deserialize(lastBlockHashBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(block.getHash(), SerializeUtils.serialize(block));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to put block ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getBlock</span><span class="params">(String blockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Block) SerializeUtils.deserialize(blocksBucket.get(blockHash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to close db ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="创建区块链">创建区块链</span></h3><p>现在我们来优化 <code>Blockchain.newBlockchain</code> 接口的代码逻辑，改为如下逻辑：</p>
<p><img src="https://img.i7years.com/blog/blockchain_flow.jpg" alt=""></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock();</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 <code>Blockchain</code>  的数据结构，只记录最新一个区块链的Hash值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String lastBlockHash;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Blockchain</span><span class="params">(String lastBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastBlockHash = lastBlockHash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次挖矿完成后，我们也需要将最新的区块信息保存下来，并且更新最新区块链Hash值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Fail to add block into blockchain ! "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(lastBlockHash, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RocksDBUtils.getInstance().putLastBlockHash(block.getHash());</span><br><span class="line">    RocksDBUtils.getInstance().putBlock(block);</span><br><span class="line">    <span class="keyword">this</span>.lastBlockHash = block.getHash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此，存储部分的功能就实现完毕，我们还缺少一个功能：</p>
<h2><span id="检索区块链">检索区块链</span></h2><p>现在，我们所有的区块都保存到了数据库，因此，我们能够重新打开已有的区块链并且向其添加新的区块。但这也导致我们再也无法打印出区块链中所有区块的信息，因为，我们没有将区块存储在数组当中。让我们来修复这个瑕疵！</p>
<p>我们在Blockchain中创建一个内部类 <code>BlockchainIterator</code> ，作为区块链的迭代器，通过区块之前的hash连接来依次迭代输出区块信息，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String currentBlockHash;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BlockchainIterator</span><span class="params">(String currentBlockHash)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currentBlockHash = currentBlockHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有下一个区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hashNext</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(currentBlockHash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (lastBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创世区块直接放行</span></span><br><span class="line">            <span class="keyword">if</span> (lastBlock.getPrevBlockHash().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Block <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (currentBlock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.currentBlockHash = currentBlock.getPrevBlockHash();</span><br><span class="line">                <span class="keyword">return</span> currentBlock;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    ....    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="测试">测试</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 1.0 BTC to wangwei"</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 2.5 more BTC to wangwei"</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 3.5 more BTC to wangwei"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">                Block block = iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (block != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> validate = ProofOfWork.newProofOfWork(block).validate();</span><br><span class="line">                    System.out.println(block.toString() + <span class="string">", validate = "</span> + validate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出*/</span></span><br><span class="line"></span><br><span class="line">Block&#123;hash=<span class="string">'0000012f87a0510dd0ee7048a6bd52db3002bae7d661126dc28287bd6c23189a'</span>, prevBlockHash=<span class="string">'0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf'</span>, data=<span class="string">'Send 3.5 more BTC to wangwei'</span>, timeStamp=<span class="number">1519724875</span>, nonce=<span class="number">369110</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf'</span>, prevBlockHash=<span class="string">'00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79'</span>, data=<span class="string">'Send 2.5 more BTC to wangwei'</span>, timeStamp=<span class="number">1519724872</span>, nonce=<span class="number">896348</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79'</span>, prevBlockHash=<span class="string">'0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703'</span>, data=<span class="string">'Send 1.0 BTC to wangwei'</span>, timeStamp=<span class="number">1519724869</span>, nonce=<span class="number">673955</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703'</span>, prevBlockHash=<span class="string">''</span>, data=<span class="string">'Genesis Block'</span>, timeStamp=<span class="number">1519724866</span>, nonce=<span class="number">840247</span>&#125;, validate = <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h2><span id="命令行界面">命令行界面</span></h2><p><code>CLI</code> 部分的内容，这里不做详细介绍，具体可以去查看文末的Github源码链接。大致步骤如下：</p>
<h5><span id="配置">配置</span></h5><p>添加pom.xml配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>one.wangwei.blockchain.cli.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- this is used for inheritance merges --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 指定在打包节点执行jar包合并操作 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加shell脚本 <code>blockchain.sh</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Check if the jar has been built.</span><br><span class="line">if [ ! -e target/blockchain-java-jar-with-dependencies.jar ]; then</span><br><span class="line">  echo "Compiling blockchain project to a JAR"</span><br><span class="line">  mvn package -DskipTests</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">java -jar target/blockchain-java-jar-with-dependencies.jar "$@"</span><br></pre></td></tr></table></figure>
<h5><span id="执行命令">执行命令</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入工程根路劲</span></span><br><span class="line">$ cd blockchain-java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印帮助信息</span></span><br><span class="line">$ ./blockchain.sh -h </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加区块</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 1.5 BTC to wangwei"</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 2.5 BTC to wangwei"</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 3.5 BTC to wangwei"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印区块链</span></span><br><span class="line">$ ./blockchain.sh -print</span><br></pre></td></tr></table></figure>
<h2><span id="总结">总结</span></h2><p>本篇我们实现了区块链的存储功能，接下来我们将实现地址、交易、钱包这一些列的功能。</p>
<h2><span id="资料">资料</span></h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part3-persistence" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part3-persistence</a></li>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="external">《精通比特币》第二版</a></li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=62076a14b3d0693cf88d19db7e2d6a5a8e05b3de0c77deee242615c5480f8818104c24b65500a8cac096dee3b2e6862cec266916ee6545dd38f3650a459c7b221&amp;h=7732ed4bedb1bb10a4d24df75b719ac2d56ae76a1b5a8f06ccc2ca6dc2d3ce30&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=62076a14b3d0693cf88d19db7e2d6a5a8e05b3de0c77deee242615c5480f8818104c24b65500a8cac096dee3b2e6862cec266916ee6545dd38f3650a459c7b221&amp;h=7732ed4bedb1bb10a4d24df75b719ac2d56ae76a1b5a8f06ccc2ca6dc2d3ce30&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> RocksDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（二）—— 工作量证明]]></title>
      <url>/posts/7890ab7e.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/bitcoin-miner.webp" alt=""></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></p></blockquote><h2><span id="引言">引言</span></h2><p>在 <a href="https://wangwei.one/posts/df195d9.html">上一篇</a> 文章中，我们实现了区块链最基本的数据结构模型，添加区块以及和前一个区块连接在一起。但是，我们的实现方式非常简单，而真实的比特币区块链中，每一个区块的添加都是需要经过大量的计算才可以完成，这个过程就是我们熟知的<code>挖矿</code>。</p><a id="more"></a><h2><span id="工作量证明机制">工作量证明机制</span></h2><p>区块链最关键的一个思想就是，必须进行大量且困难的计算工作才能将交易数据存放到区块链上。这种工作机制才能保证整个区块链数据的安全性和一致性。同时，完成这个计算工作的矿工会得到相应的Token奖励。</p><p>这套机制和我们的现实生活非常相似：我们必须努力工作来赚取报酬用以维持我们的生活。在区块链中，网络中的矿工们努力工作来维持区块链网络，为其添加区块，并且获得一定的Token奖励。作为他们工作的成果，一个区块以安全的方式被组合进了区块链中，这样就保证了整个区块链数据库的稳定性。还有一个必须要注意的是，某个矿工完成了计算工作的结果，还必须得到其他所有矿工的认同（证明是正确的），这样才算完成。</p><p>这一整套的计算和证明机制，就称为<strong>Proof-of-Work（工作量证明）</strong>。计算工作是非常非常困难的，因为它需要消耗大量的计算机算力资源，即使是性能非常高的计算机都不能非常快地计算出正确的结果。此外，随着时间的推移，这项计算工作的难度也会随之增加，目的是为了保证每小时6个新区块的出块率。在比特币中，这种工作的目标是找到满足某个特定要求的区块Hash（哈希值）。这个区块哈希值就是工作结果的一个证明。因此，计算工作的目的就是为了寻找到这个证明值。</p><p>最后要注意的是，计算出这个特定的Hash（哈希值）是非常困难的，但是别人来验证这个Hash值是否正确的时候，是非常简单的，一下子就能完成。</p><h2><span id="hashing">Hashing</span></h2><blockquote><p>Hash：哈希 | 散列</p></blockquote><p>我们来讨论一下<strong>Hashing（哈希）</strong>，对这一块非常熟悉的朋友可以直接跳过这一段内容。</p><p>哈希是一种计算机算法，该算法能够计算出任意大小数据的哈希值，并且这个哈希值的长度是固定的，256bit。这个被计算出来的哈希值能够作为这个数据的<strong>唯一</strong>代表。哈希算法有几个关键的特性：</p><blockquote><ul><li><strong>不可逆性</strong>。不能根据一个哈希值推导出原始数据。所以，哈希不是加密。</li><li><strong>唯一性</strong>。每个数据有且仅有一个唯一的哈希值。</li><li><strong>迥异性</strong>。原始数据一丁点的变化都将得到完全不一样的哈希值。</li></ul></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHA256(&quot;wangwei1&quot;) ——&gt; 1e898b7c9adaad86c20139a302ccd5277f81040cab68dc2aecfc684773532652</span><br><span class="line">SHA256(&quot;wangwei2&quot;) ——&gt; c9cc7417c17318c8aab448cc8ace24c53b6dcf350f5c5fd8e91cbc3b011a179d</span><br></pre></td></tr></table></figure>
<p>哈希算法被广泛用于验证文件的一致性上。比如软件提供商通常会在安装包上附加一个检验码（checksums），当我们下载完一个软件安装包后，可以用哈希函数计算一下这个软件安装包的哈希值，然后再和软件安装包的检验码做个对比，就可以知道下载的安装包是否完整、是否有数据丢失。</p>
<p>在区块链中，哈希值用于保证区块的一致性。每一个区块被用于进行哈希计算的数据，都包含前一个区块链的哈希值，因此任何人想要修改区块的数据几乎是不可能的，他必须要把整个区块链中从创世区块到最新的区块的所有哈希值全部重新计算一遍。</p>
<blockquote>
<p>你可以脑补一下这个工作量有多大，按照目前计算机的算力来看，几乎不可能</p>
</blockquote>
<h2><span id="hashcash">Hashcash</span></h2><p>比特币的工作量证明是使用的是<a href="https://en.wikipedia.org/wiki/Hashcash" target="_blank" rel="external">Hashcash</a>算法，一种最初被用于反垃圾邮件的算法，它可以被拆解为以下几步：</p>
<ol>
<li>获取某种公开可知的数据data（在邮件案例中，指的是收件人邮件地址；比特币案例中，指的是区块头）</li>
<li>添加一个计数器counter，初始值设置为0；</li>
<li>计算 data 与 counter拼接字符串的哈希值；</li>
<li>检查上一步的哈希值是否满足某个条件，满足则停止计算，不满足则 counter 加1，然后重复第3步和第4步，直到满足这个特定的条件为止。</li>
</ol>
<p>这是一种粗暴的算法：你改变计数器，计算一个新的哈希值，检查它，增加计数器，计算一个新的哈希值，循环往复，这就是为什么它需要花费大量计算机算力资源的原因所在。</p>
<p>让我们来近距离看一下这个特定的条件指的是什么。在原始的<code>Hashcash</code>算法中，这个特殊的要求指的是计算出来的哈希值的前20bit必须全是零，</p>
<p>在比特币种，这种要求哈希值前面有多少个零打头的要求是随着时间的推移而不断调整的，这是出于设计的目的，尽管在计算机的算力会不断的提升和越来越多的矿工加入这个网络中的情况下，都要保证每10min生产一个区块。</p>
<p>我们演示一下这个算法，</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算字符串'I like donuts'的哈希值</span></span><br><span class="line">SHA256(<span class="string">"I like donuts"</span>) </span><br><span class="line">——&gt; f80867f6efd4484c23b0e7184e53fe4af6ab49b97f5293fcd50d5b2bfa73a4d0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接一个计数器值(ca07ca)，再次进行Hash计算</span></span><br><span class="line">SHA256(<span class="string">"I like donutsca07ca"</span>) </span><br><span class="line">——&gt; <span class="number">0000002</span>f7c1fe31cb82acdc082cfec47620b7e4ab94f2bf9e096c436fc8cee06</span><br></pre></td></tr></table></figure>
<p>这里的<code>ca07ca</code>是计数器值的十六进制，他表示的十进制值为<code>13240266</code></p>
<blockquote>
<p>即，从0开始，总共计算了13240266次，才计算出<code>I like donuts</code>这个数据的Hash值，满足前6位(3字节)全是零。</p>
</blockquote>
<h2><span id="代码实现">代码实现</span></h2><blockquote>
<p>思路：</p>
<p>1）每次区块被添加到区块链之前，先要进行挖矿（Pow）</p>
<p>2）挖矿过程中，产生的 Hash 值，如果小于难度目标值则添加进区块，否则继续挖矿，直到找到正确的Hash为止</p>
<p>3）最后，验证区块Hash是否有效</p>
</blockquote>
<h4><span id="定义pow类">定义Pow类</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作量证明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProofOfWork</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TARGET_BITS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Block block;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigInteger target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProofOfWork</span><span class="params">(Block block, BigInteger target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.block = block;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的工作量证明，设定难度目标值</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 对1进行移位运算，将1向左移动 (256 - TARGET_BITS) 位，得到我们的难度目标值</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProofOfWork <span class="title">newProofOfWork</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        BigInteger targetValue = BigInteger.valueOf(<span class="number">1</span>).shiftLeft((<span class="number">256</span> - TARGET_BITS));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProofOfWork(block, targetValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>设定一个难度目标位<code>TARGET_BITS</code>，表示最终挖矿挖出来Hash值，转化为二进制后，与256相比，长度少了多少bit，也即二进制前面有多少bit是零.</p>
<blockquote>
<ul>
<li><code>TARGET_BITS</code> 越大，最终<code>targetValue</code>就越小，要求计算出来的Hash越来越小，也就是挖矿的难度越来越大。</li>
<li>我们这里的<code>TARGET_BITS</code>是固定的，但是在真实的比特币中，难度目标是随着时间的推推，会动态调整的。详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch10.asciidoc#target-representation" target="_blank" rel="external">《精通比特币 （第二版）》第10章</a></li>
</ul>
</blockquote>
</li>
<li><p>由于数值比较大，这里要使用<code>BitInteger</code>类型。</p>
</li>
</ul>
<h4><span id="准备数据">准备数据</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参与Hash运算的如下几个信息：<ul>
<li>前一个区块（父区块）的Hash值；</li>
<li>区块中的交易数据；</li>
<li>区块生成的时间；</li>
<li>难度目标；</li>
<li>用于工作量证明算法的计数器</li>
</ul>
</li>
</ul>
<blockquote>
<p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#block-header" target="_blank" rel="external">《精通比特币 （第二版）》第09章</a></p>
</blockquote>
<h4><span id="pow算法">Pow算法</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行工作量证明，开始挖矿，找到小于难度目标值的Hash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PowResult <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> nonce = <span class="number">0</span>;</span><br><span class="line">    String shaHex = <span class="string">""</span>;</span><br><span class="line">    System.out.printf(<span class="string">"Mining the block containing：%s \n"</span>, <span class="keyword">this</span>.getBlock().getData());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">while</span> (nonce &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">        String data = <span class="keyword">this</span>.prepareData(nonce);</span><br><span class="line">        shaHex = DigestUtils.sha256Hex(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> BigInteger(shaHex, <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Elapsed Time: %s seconds \n"</span>, (<span class="keyword">float</span>) (System.currentTimeMillis() - startTime) / <span class="number">1000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"correct hash Hex: %s \n\n"</span>, shaHex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonce++;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> PowResult(nonce, shaHex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环体里面主要以下四步：<ul>
<li>准备数据</li>
<li>进行sha256运算</li>
<li>转化为BigInter类型</li>
<li>与target进行比较</li>
</ul>
</li>
<li>最后，返回正确的Hash值以及运算计数器<code>nonce</code> </li>
</ul>
<h4><span id="验证区块hash有效性">验证区块Hash有效性</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证区块是否有效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = <span class="keyword">this</span>.prepareData(<span class="keyword">this</span>.getBlock().getNonce());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(DigestUtils.sha256Hex(data), <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="修改区块添加逻辑">修改区块添加逻辑</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">    Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, data, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">    ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">    PowResult powResult = pow.run();</span><br><span class="line">    block.setHash(powResult.getHash());</span><br><span class="line">    block.setNonce(powResult.getNonce());</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建区块</li>
<li>创建Pow算法对象</li>
<li>执行Pow算法</li>
<li>保存返回的Hash以及运算计数器</li>
</ul>
<h4><span id="测试运行">测试运行</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 1 BTC to Ivan"</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 2 more BTC to Ivan"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Prev.hash: "</span> + block.getPrevBlockHash());</span><br><span class="line">            System.out.println(<span class="string">"Data: "</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">"Hash: "</span> + block.getHash());</span><br><span class="line">            System.out.println(<span class="string">"Nonce: "</span> + block.getNonce());</span><br><span class="line"></span><br><span class="line">            ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">            System.out.println(<span class="string">"Pow valid: "</span> +  pow.validate() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定TARGET_BITS = 20，得到如下结果：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Mining the block containing：Genesis Block </span><br><span class="line">Elapsed Time: <span class="number">2.118</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">1</span> BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">1.069</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">2</span> more BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">4.258</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000777f</span>93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f </span><br><span class="line"></span><br><span class="line">Prev.hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Nonce: <span class="number">522163</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Nonce: <span class="number">474758</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: <span class="number">00000777f</span>93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f</span><br><span class="line">Nonce: <span class="number">1853839</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h2><span id="总结">总结</span></h2><p>我们正在一步一步接近真实的区块链架构，本篇我们实现了挖矿机制，但是我们还有很多关键性的功能没有实现：区块链数据库的持久性、钱包、地址、交易、共识机制，这些我们后面一步一步来实现</p>
<h2><span id="资料">资料</span></h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part2-pow" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part2-pow</a></li>
</ul>
<ul>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="external">《精通比特币（第二版）》</a></li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=4fb1e0818984baa1c44f0816f56490d616247c0ec4bc1ae69ce5d7b75ac93468a4fdab2d120a8077ff54b467b6c268ab220dc4247374ed06e5000972488d30e60&amp;h=976aeef7414e3e5779d73cb9950c566eb1ac7a0d75f2ab76a0bea31b30e94686&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=4fb1e0818984baa1c44f0816f56490d616247c0ec4bc1ae69ce5d7b75ac93468a4fdab2d120a8077ff54b467b6c268ab220dc4247374ed06e5000972488d30e60&amp;h=976aeef7414e3e5779d73cb9950c566eb1ac7a0d75f2ab76a0bea31b30e94686&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> pow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（一）—— 基本原型]]></title>
      <url>/posts/df195d9.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/Blockchain-Technology-is-Changing-the-World-As-We-Know-It.webp" alt=""></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></p></blockquote><h2><span id="引言">引言</span></h2><p>区块链技术是一项比人工智能更具革命性的技术，人工智能只是提高了人类的生产力，而区块链则将改变人类社会的生产关系，它将会颠覆我们人类社会现有的协作方式。了解和掌握区块链相关知识和技术，是我们每位开发人员必须要去做的事情，这样我们才能把握住这波时代趋势的红利。</p><p>本文将基于Java语言构建简化版的blockchain，来实现数字货币。</p><a id="more"></a><h2><span id="创建区块">创建区块</span></h2><p>区块链是由包含交易信息的区块从后向前有序链接起来的数据结构。区块被从后向前有序地链接在这个链条里，每个区块都指向前一个区块。以比特币为例，每个区块主要包含如下信息字段：</p><blockquote><ul><li>区块大小：用字节表示的区块数据大小</li><li>区块头：组成区块头的几个字段<ul><li>区块头hash值</li><li>父区块头hash值</li><li>时间戳：区块产生的近似时间</li><li>Merkle根：该区块中交易的merkle树根的哈希值</li><li>难度目标：该区块工作量证明算法的难度目标</li><li>Nonce：用于工作量证明算法的计数器</li></ul></li><li>交易计数器：交易的数量</li><li>交易：记录在区块里的交易信息</li></ul><blockquote><p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#structure-of-a-block" target="_blank" rel="external">《精通比特币》（第二版）第9章——区块链</a></p></blockquote></blockquote><h5><span id="区块数据结构">区块数据结构</span></h5><p><img src="https://img.i7years.com/blog/1_627BG-7qMtaXNsX0n41C6Q.png" alt=""></p><p>在这里，我们主要是为了实现最简单的区块链结构，仅仅包含以下几个信息字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(String hash, String previousHash, String data, <span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="区块hash值计算">区块Hash值计算</span></h5><p>加密Hash值，一个通过SHA256算法对区块头进行二次哈希计算而得到的数字指纹。Hash值用于确保blockchain的安全。Hash计算是计算敏感的操作，即使在高性能电脑也需要花费一段时间来完成计算(这也就是为什么人们购买高性能GPU进行比特币挖矿的原因)。blockchain架构设计有意使Hash计算变得困难，这样做是为了加大新增一个block的难度，进而防止block在增加后被随意修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">        Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, data.getBytes(),     Instant.now().getEpochSecond());</span><br><span class="line">        block.setHash();</span><br><span class="line">        <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算区块Hash</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getPrevBlockHash())) &#123;</span><br><span class="line">        prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] headers = ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getTimeStamp()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setHash(DigestUtils.sha256Hex(headers));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="创建区块链">创建区块链</span></h2><p>区块链本质上是一种<strong>有序</strong>、<strong>反向链接链表</strong>的数据结构。这意味着，block按照插入的顺序存放，同时每个block都保存指向上一个block的链接。这种结构保证可以快速获取最新插入的block同时获取它的hash值。这种结构保证可以快速获取最新插入的block同时（高效地）获取它的hash值。</p>
<h5><span id="区块链数据结构">区块链数据结构</span></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Block&gt; blockList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blockchain</span><span class="params">(List&lt;Block&gt; blockList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockList = blockList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="添加区块">添加区块</span></h5><blockquote>
<p>新增一个添加区块链的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">   Block previousBlock = blockList.get(blockList.size() - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(previousBlock.getHash(), data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block 区块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.blockList.add(block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="创世区块">创世区块</span></h5><blockquote>
<p>在添加区块之前，区块链必须有个<code>创世区块</code>，在<code>Block</code>中新增创世区块方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Block.newBlock(<span class="string">""</span>, <span class="string">"Genesis Block"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="创建区块链">创建区块链</span></h5><blockquote>
<p>再在<code>Blockchain</code>中新增创建区块链的方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Block&gt; blocks = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    blocks.add(Block.newGenesisBlock());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(blocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="测试运行">测试运行</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 1 BTC to Ivan"</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 2 more BTC to Ivan"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Prev. hash: "</span> + block.getPreviousHash());</span><br><span class="line">            System.out.println(<span class="string">"Data: "</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">"Hash: "</span> + block.getHash());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出如下信息：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Prev. hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: <span class="number">4492</span>cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line"></span><br><span class="line">Prev. hash: <span class="number">4492</span>cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line"></span><br><span class="line">Prev. hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: <span class="number">42f</span>78d6a86f88aa9b5b10e468494dfd1b3f558a9fb74a01eb348c2cbfc5d000a</span><br></pre></td></tr></table></figure>
<h2><span id="总结">总结</span></h2><p>我们构建了一个非常简单的区块链原型：它只是一个块的数组，每个块都与前一个块有连接。 实际的区块链要复杂得多。 </p>
<ul>
<li>缺少交易信息：我们的区块链还没有任何交易信息。</li>
<li>缺少工作量证明：我们的生产区块非常简单快捷，实际的区块链中，生产一个区块需要进行大量的计算。</li>
<li>缺少共识机制：区块链是一个非单一决策者的分布式数据库。 因此，一个新的区块必须得到网络的其他参与者的确认和批</li>
</ul>
<p>在以后的文章中，我们将介绍这些功能。</p>
<h2><span id="资料">资料</span></h2><ul>
<li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype" target="_blank" rel="external">https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype</a></li>
</ul>
<ul>
<li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/" target="_blank" rel="external">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></li>
<li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="external">《精通比特币（第二版）》</a></li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>
<blockquote>
<p><a href="https://press.one/file/v?s=e2926b487ace53de6e9defb2a68561220b8da974cf712dccf8f546c770e6df6813abeb96bdb49d4199858fa8e404959a8b07631fc0c9804787f45f816f8abef30&amp;h=f3625969fe71d4d0b31df504b7f7c8598c5617fcf92b54238f65fa666724022c&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="external">https://press.one/file/v?s=e2926b487ace53de6e9defb2a68561220b8da974cf712dccf8f546c770e6df6813abeb96bdb49d4199858fa8e404959a8b07631fc0c9804787f45f816f8abef30&amp;h=f3625969fe71d4d0b31df504b7f7c8598c5617fcf92b54238f65fa666724022c&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(3) | EOS货币合约演示]]></title>
      <url>/posts/869983fd.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文演示如何创建账号、如何转账</p><p>官方文档：<a href="https://github.com/eosio/eos#example-currency-contract-walkthrough" target="_blank" rel="external">https://github.com/eosio/eos#example-currency-contract-walkthrough</a></p></blockquote><a id="more"></a><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt=""></p><h3><span id="启动eosio">启动EOSIO</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosiod/</span><br><span class="line">$ ./eosiod</span><br></pre></td></tr></table></figure>
<h3><span id="设置钱包并导入账户私钥">设置钱包并导入账户私钥</span></h3><h5><span id="创建钱包">创建钱包</span></h5><blockquote>
<p> 请确保你在启动<code>eosiod</code>之前，已经在<code>config.ini</code>中配置了钱包插件<code>plugin = eosio::wallet_api_plugin</code></p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosioc/</span><br><span class="line">$ ./eosioc wallet create -n wangwei </span><br><span class="line"><span class="comment"># 将在 ~/eos/build/programs/eosiod/data-dir/ 下生成一个名为wangwei的钱包文件 wangwei.wallet</span></span><br><span class="line"><span class="comment"># 不加 -n wangwei, 则会生成默认钱包文件，名为 default.wallet 文件</span></span><br></pre></td></tr></table></figure>
<h5><span id="导入测试账号">导入测试账号</span></h5><blockquote>
<p>将配置文件<code>config.ini</code>中给予的测试私钥导入到钱包中来，该私钥为测试账号<code>inita</code>的私钥</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入私钥 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 到 wangwei 这个钱包</span></span><br><span class="line">$ ./eosioc wallet import -n wangwei <span class="number">5</span>KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure>
<h3><span id="创建货币合约账号">创建货币合约账号</span></h3><h5><span id="创建两个密钥对">创建两个密钥对</span></h5><blockquote>
<p>创建两个密钥对，后面会分别赋予<code>owner</code>权限和<code>active</code>权限</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosioc/</span><br><span class="line">$ ./eosioc create key <span class="comment"># PUBLIC_KEY_1，权限：owner_key</span></span><br><span class="line">$ ./eosioc create key <span class="comment"># PUBLIC_KEY_2，权限：active_key</span></span><br></pre></td></tr></table></figure>
<h5><span id="创建一个新账号">创建一个新账号</span></h5><blockquote>
<p>使用<code>inita</code>创建一个名为<code>currency</code>的账号，将上一步生成的PUBLIC_KEY_1配置为它的owner权限，PUBLIC_KEY_2配置为它的active权限</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc create account inita currency PUBLIC_KEY_1 PUBLIC_KEY_2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"c5294137c04aa29178eeebe17f457288163e6b6e3e10c36644ddf8382a6d067e"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"c5294137c04aa29178eeebe17f457288163e6b6e3e10c36644ddf8382a6d067e"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"newaccount"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"inita"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"creator"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"owner"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [],</span><br><span class="line">              <span class="string">"keys"</span>: [&#123;</span><br><span class="line">                  <span class="string">"key"</span>: <span class="string">"EOS6ayDacXRvP8ZdLW4LNHvRsPeBQBbzvtm7HSkBuyvnLEkAUpfsS"</span>,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"active"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [],</span><br><span class="line">              <span class="string">"keys"</span>: [&#123;</span><br><span class="line">                  <span class="string">"key"</span>: <span class="string">"EOS6VJWWuc6C5p75P2NMNyFM4wYRcAx41NXD1nW7EVdFMGFTejMhZ"</span>,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"recovery"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [&#123;</span><br><span class="line">                  <span class="string">"permission"</span>: &#123;</span><br><span class="line">                    <span class="string">"actor"</span>: <span class="string">"inita"</span>,</span><br><span class="line">                    <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"keys"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"deposit"</span>: <span class="string">"1.0000 EOS"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"000000000093dd740000001e4d75af460100000000010002df9ca0db36688723ca23b83a2c11679945598ed7ef4bbe2234a7bfae283e16fe01000100000000010002d2be4c48f289f51bd9afb6680679cd6955181aabc8324c4d6ce729f0db9e054a01000100000001000000000093dd7400000000a8ed3232010000102700000000000004454f5300000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"eosio.auth"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">21</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="查询新账户信息">查询新账户信息</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get account currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"account_name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">  <span class="string">"eos_balance"</span>: <span class="string">"0.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"staked_balance"</span>: <span class="string">"1.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"unstaking_balance"</span>: <span class="string">"0.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"last_unstaking_time"</span>: <span class="string">"2035-10-29T06:32:22"</span>,</span><br><span class="line">  <span class="string">"permissions"</span>: [&#123;</span><br><span class="line">      <span class="string">"perm_name"</span>: <span class="string">"active"</span>,</span><br><span class="line">      <span class="string">"parent"</span>: <span class="string">"owner"</span>,</span><br><span class="line">      <span class="string">"required_auth"</span>: &#123;</span><br><span class="line">        <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"accounts"</span>: [],</span><br><span class="line">        <span class="string">"keys"</span>: [&#123;</span><br><span class="line">            <span class="string">"key"</span>: <span class="string">"EOS6VJWWuc6C5p75P2NMNyFM4wYRcAx41NXD1nW7EVdFMGFTejMhZ"</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"perm_name"</span>: <span class="string">"owner"</span>,</span><br><span class="line">      <span class="string">"parent"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"required_auth"</span>: &#123;</span><br><span class="line">        <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"accounts"</span>: [],</span><br><span class="line">        <span class="string">"keys"</span>: [&#123;</span><br><span class="line">            <span class="string">"key"</span>: <span class="string">"EOS6ayDacXRvP8ZdLW4LNHvRsPeBQBbzvtm7HSkBuyvnLEkAUpfsS"</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="导入前面生成的activite权限的私钥">导入前面生成的activite权限的私钥</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc wallet import -n wangwei XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>
<blockquote>
<p>EOS 几个密钥的特点</p>
<blockquote>
<p>公钥以<code>EOS</code>打头</p>
<p>私钥以<code>5</code>打头</p>
<p>钱包密钥以<code>PW</code>打头</p>
</blockquote>
</blockquote>
<h3><span id="上传样例合约到区块链上">上传样例合约到区块链上</span></h3><h5><span id="检查currency账号是否已经存在合约">检查<code>currency</code>账号是否已经存在合约</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get code currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息如下</span></span><br><span class="line">code hash: <span class="number">0000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>
<h5><span id="使用currency账号上传合约">使用<code>currency</code>账号上传合约</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc set contract currency ../../contracts/currency/currency.wast ../../contracts/currency/currency.abi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line">Reading WAST...</span><br><span class="line">Assembling WASM...</span><br><span class="line">Publishing contract...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"7566cf7ddbce99f64690c0a4d22577d0ee8154b7579be135b9e797356ea8cda1"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"7566cf7ddbce99f64690c0a4d22577d0ee8154b7579be135b9e797356ea8cda1"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setcode"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"vmtype"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"vmversion"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"code"</span>: <span class="string">"0061736d0100000001570f60017e0060027f7f0060037f7f7f017f60047e7e7f7f017f60017f017f60057e7e7e7f7f017f6000017f60027f7f017f60000060027e7e0060027e7e017f60017f0060047f7e7e7f0060047e7e7e7f0060037f7f7f0002b3010b03656e760b616374696f6e5f73697a65000603656e7606617373657274000103656e76086c6f61645f693634000503656e76066d656d637079000203656e76066d656d736574000203656e760b726561645f616374696f6e000703656e760c726571756972655f61757468000003656e7611726571756972655f726563697069656e74000003656e76047362726b000403656e760b73656e645f696e6c696e65000103656e760973746f72655f693634000303161508090a0b0b0b0b0c0c0d02010b07070704070e07010404017000000503010001073003066d656d6f72790200056170706c79000c1b5f474c4f42414c5f5f7375625f495f63757272656e63792e637070000b0af44015f202004100420037028c4041004200370294404100420037029c40410042003702a440410042003702ac40410041003602b440410041003602b840410041003602bc40410041003602c040410041003602c440410041003602c840410041003602cc40410041003602d040410041003602d440410041003602d840410041003602dc40410041003602e040410041003602e440410041003602e840410041003602ec40410041003602f040410041003602f440410041003602f840410041003602fc404100410036028041410041003602844141004100360288414100410036028c414100410036029041410041003602944141004100360298414100410036029c41410041003602a041410041003602a441410041003602a841410041003602ac41410041003602b041410041003602b441410041003602b841410041003602bc41410041003602c041410041003602c441410041003602c841410041003602cc41410041003602d041410041003602d4410b090020002001100d1a0b990201057f4100410028020441306b2206360204410021050240200042808080f0d1a9ddd7c600520d000240024002402001428080808080a0e998f600510d00200142808080b8d585cfe64d520d032006100e2006100f200641286a2d0000450d022006412c6a2802002205450d0220052005280200417f6a220436020020040d02200641246a2802002202450d0241002802cc4122044101480d02418cc00021052004410c6c418cc0006a21030340200541046a2802002204450d030240200441046a20024b0d00200420052802006a20024b0d030b2005410c6a22052003490d000c030b0b20061010200610110c010b2002417c6a2205200528020041ffffffff07713602000b410121050b4100200641306a36020420050b3301037f41004100280204220310002201410f6a4170716b22023602042002200110051a200020022001101d410020033602040ba80304017e017f027e027f4100410028020441306b22063602042000290300100620002903002101200029030810072001100720002903002101200642003703182006428486d59205370310200641206a428486d592052001200641106a10132006290328210320002903102104200041186a2202290300428486d592055141e0c1001001200320045a4180c4001001410141d0c20010012006428486d59205370320410141f0c20010012006200641206a410810031a2006200320047d370320410141f0c200100120064108722205200641206a410810031a20014280808080f2a9d3883220064110100a1a20002903082101200642003703182006428486d59205370310200641206a428486d592052001200641106a101320062903282104200029031021032002290300428486d592055141e0c1001001200320047c220420035a41a0c2001001410141d0c20010012006428486d59205370320410141f0c20010012006200641206a410810031a20062004370320410141f0c20010012005200641206a410810031a20014280808080f2a9d3883220064110100a1a4100200641306a3602040b8c0101047f41004100280204220410002201410f6a4170716b22023602042002200110051a200041106a220342848abd9a0537030020004200370308200141074b41f0c300100120002002410810031a2001417871220141084741f0c3001001200041086a200241086a410810031a200141104741f0c30010012003200241106a410810031a410020043602040bc30505027f017e017f017e017f4100410028020441d0006b220636020442808080f0d1a9ddd7c6001006200642003703482006428486d59205370340200641106a428486d5920542808080f0d1a9ddd7c600200641c0006a101220002903082103200041106a2202290300428486d592055141e0c1001001200320062903187c20035a41a0c20010012006200320062903187c370318410141d0c200100120062006290310370340410141f0c2001001200641206a200641c0006a410810031a20062006290318370340410141f0c2001001200641206a4108722204200641c0006a410810031a42808080f0d1a9ddd7c60042808080808080e4a646200641206a4110100a1a200642003703382006428486d59205370330200641c0006a428486d5920542808080f0d1a9ddd7c600200641306a101320062903482105200029030821032002290300428486d592055141e0c1001001200320057c220520035a41a0c2001001410141d0c20010012006428486d59205370340410141f0c2001001200641206a200641c0006a410810031a20062005370340410141f0c20010012004200641c0006a410810031a42808080f0d1a9ddd7c6004280808080f2a9d38832200641206a4110100a1a20002903082103200029030021052002290300428486d592055141e0c1001001200641003a0008200642003703002006410036020c42808080f0d1a9ddd7c6002005200320061014024020062d0008450d002006410c6a2802002200450d0020002000280200417f6a220236020020020d0020062802042204450d0041002802cc4122024101480d00418cc00021002002410c6c418cc0006a21010340200041046a2802002202450d0102400240200241046a20044b0d00200220002802006a20044b0d010b2000410c6a22002001490d010c020b0b2004417c6a2200200028020041ffffffff07713602000b4100200641d0006a3602040bba0201027f4100410028020441a0086b22053602042005200137030002400240200242808080f0d1a9ddd7c60042808080808080e4a646200541800810022204417f4c0d0020054200370388082005428486d5920537038008200441074b41f0c300100120054180086a2005410810031a200441787141084741f0c300100120054180086a41086a2005410872410810031a200041086a20052903880837030020002005290380083703000c010b410141d0c20010012005200329030037039808410141f0c200100120054180086a20054198086a410810031a2005200329030837039808410141f0c200100120054180086a41087220054198086a410810031a200242808080808080e4a64620054180086a4110100a1a200041086a2003290308370300200020032903003703000b4100200541a0086a3602040bba0201027f4100410028020441a0086b22053602042005200137030002400240200242808080f0d1a9ddd7c6004280808080f2a9d38832200541800810022204417f4c0d0020054200370388082005428486d5920537038008200441074b41f0c300100120054180086a2005410810031a200441787141084741f0c300100120054180086a41086a2005410872410810031a200041086a20052903880837030020002005290380083703000c010b410141d0c20010012005200329030037039808410141f0c200100120054180086a20054198086a410810031a2005200329030837039808410141f0c200100120054180086a41087220054198086a410810031a20024280808080f2a9d3883220054180086a4110100a1a200041086a2003290308370300200020032903003703000b4100200541a0086a3602040bbe0803077f047e017f410041002802044180016b220f3602044200210c423b210b4180c300210a4200210d034002400240024002400240200c4205560d00200a2c00002204419f7f6a41ff017141194b0d01200441a5016a21040c020b4200210e200c420b580d020c030b200441d0016a41002004414f6a41ff01714105491b21040b2004ad423886423887210e0b200e421f83200b42ffffffff0f8386210e0b200a41016a210a200c42017c210c200e200d84210d200b427b7c220b427a520d000b200f200d370340200f42808080f0d1a9ddd7c600370338410141e0c100100120032d0008210820032802002105200328020421040240200328020c220a450d00200a200a28020041016a3602000b200f41206a428486d59205370300200f41086a41246a2004360200200f41306a220320083a0000200f2001370310200f2000370308200f2002370318200f2005360228200f41346a200a3602000240200a450d00200a200a28020041016a3602000b200f41d8006a4101200f41386a10152105200f41c8006a41246a22094100360200200f4200370264200f42808080f0d1a9ddd7c600370348200f42808080b8d585cfe64d370350200f41f0006a200f41086a10162009200f280278360200200f200f290370370264024020032d0000450d00200f41346a2802002203450d0020032003280200417f6a220936020020090d00200f412c6a2802002206450d0041002802cc4122094101480d00418cc00021032009410c6c418cc0006a21070340200341046a2802002209450d0102400240200941046a20064b0d00200920032802006a20064b0d010b2003410c6a22032007490d010c020b0b2006417c6a2203200328020041ffffffff07713602000b0240200841ff0171450d00200a450d00200a200a280200417f6a220336020020030d002004450d0041002802cc4122034101480d00418cc000210a2003410c6c418cc0006a21080340200a41046a2802002203450d0102400240200341046a20044b0d002003200a2802006a20044b0d010b200a410c6a220a2008490d010c020b0b2004417c6a220a200a28020041ffffffff07713602000b200f41c8006a10170240200f2802642203450d0041002802cc4122044101480d00418cc000210a2004410c6c418cc0006a21080340200a41046a2802002204450d0102400240200441046a20034b0d002004200a2802006a20034b0d010b200a410c6a220a2008490d010c020b0b2003417c6a220a200a28020041ffffffff07713602000b200f41ec006a4100360200200f41e4006a4200370200024020052802002203450d0041002802cc4122044101480d00418cc000210a2004410c6c418cc0006a21080340200a41046a2802002204450d0102400240200441046a20034b0d002004200a2802006a20034b0d010b200a410c6a220a2008490d010c020b0b2003417c6a220a200a28020041ffffffff07713602000b4100200f4180016a3602040ba207010b7f20004100360208200042003702000240024002402001450d00410c2001410474101821070240200041046a2204280200450d004100210b4100210c03402007200b6a22082000280200200b6a2209290300370300200841086a200941086a290300370300200b41106a210b200c41016a220c2004280200490d000b0b024020002802002208450d0041002802cc41220c4101480d00418cc000210b200c410c6c418cc0006a21090340200b41046a280200220c450d0102400240200c41046a20084b0d00200c200b2802006a20084b0d010b200b410c6a220b2009490d010c020b0b2008417c6a220b200b28020041ffffffff07713602000b20002007360200200041086a220620013602002001450d014100210a0240200041046a220728020022082001220b470d004102210d0c030b4100210d0c020b4110210d0c010b4110210d0b037f024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240200d0e11020304050607090a010b0c0d0e0f000810100b2009417c6a220b200b28020041ffffffff0771360200200728020021084108210d0c1d0b20002004360200200620033602004100210d0c1c0b200028020020084104746a220b2002290300370300200b41086a200241086a2903003703002007200728020041016a2208360200200a41016a220a2001460d0e4101210d0c1b0b20082006280200220b470d0f4102210d0c1a0b417f2108200b417f460d0d4103210d0c190b410c200b41016a2203410474101821042007280200450d0e4104210d0c180b4100210b4100210c4105210d0c170b2004200b6a22082000280200200b6a2209290300370300200841086a200941086a290300370300200b41106a210b200c41016a220c20072802002208490d0d0c0e0b410021084106210d0c150b20002802002209450d0d4107210d0c140b41002802cc41220c4101480d0d4109210d0c130b418cc000210b200c410c6c418cc0006a2105410a210d0c120b200b41046a280200220c450d0c410b210d0c110b200c41046a20094b0d0e410c210d0c100b200c200b2802006a20094b0d0e410d210d0c0f0b200b410c6a220b2005490d0a0c0b0b20000f0b4110210d0c0c0b4100210d0c0b0b4100210d0c0a0b410f210d0c090b4105210d0c080b4106210d0c070b4108210d0c060b4108210d0c050b4108210d0c040b410a210d0c030b4108210d0c020b410d210d0c010b410e210d0c000b0b820303057f017e017f4100410028020441106b220836020420004100360208200042003702004160200128022022036b21062003ad210703402006417f6a2106200742078822074200520d000b410020066b21024100210502402006450d00410c200210182105200041086a20023602002000200536020020052103200221040340200341003a0000200341016a21032004417f6a22040d000b0b200041046a200236020020082005360204200820053602002008200520066b36020820082001101c1a200141206a350200210720082802042106200841086a210503402007a721032008200742078822074200522204410774200341ff0071723a000f200528020020066b41004a41f0c200100120082802042008410f6a410110031a2008200828020441016a220636020420040d000b0240200141206a2802002203450d00200141246a2802002104200841086a28020020066b20034e41f0c200100120082802042004200310031a2008200828020420036a3602040b4100200841106a3602040ba80302017e057f4100410028020441206b2206360204200041146a280200220341047441106a21022003ad21010340200241016a2102200142078822014200520d000b200041206a280200220320026a21022003ad21010340200241016a2102200142078822014200520d000b024002402002450d00410c2002101822052103200221040340200341003a0000200341016a21032004417f6a22040d000c020b0b410021050b200620053602082006200520026a220336021020062000290300370318200241074a41f0c20010012005200641186a410810031a200620002903083703182003200541086a22046b41074a41f0c20010012004200641186a410810031a2006200541106a36020c200641086a200041106a10192000411c6a101a1a20052002100902402005450d0041002802cc4122034101480d00418cc00021022003410c6c418cc0006a21040340200241046a2802002203450d0102400240200341046a20054b0d00200320022802006a20054b0d010b2002410c6a22022004490d010c020b0b2005417c6a2202200228020041ffffffff07713602000b4100200641206a3602040bd804010c7f02402001450d00024020002802c041220d0d004110210d200041c0c1006a41103602000b200141086a200141046a41077122026b200120021b210202400240024020002802c441220a200d4f0d002000200a410c6c6a4180c0006a21010240200a0d0020004184c0006a220d2802000d0020014180c000360200200d2000360200200041004180c00010041a0b200241046a210a034002402001280208220d200a6a20012802004b0d002001280204200d6a220d200d28020041808080807871200272360200200141086a22012001280200200a6a360200200d200d28020041808080807872360200200d41046a22010d030b2000101b22010d000b0b41fcffffff0720026b2104200041c8c1006a210b200041c0c1006a210c20002802c8412203210d03402000200d410c6c6a22014188c0006a28020020014180c0006a2205280200464190c300100120014184c0006a280200220641046a210d0340200620052802006a2107200d417c6a2208280200220941ffffffff07712101024020094100480d000240200120024f0d000340200d20016a220a20074f0d01200a280200220a4100480d012001200a41ffffffff07716a41046a22012002490d000b0b20082001200220012002491b200941808080807871723602000240200120024d0d00200d20026a200420016a41ffffffff07713602000b200120024f0d040b200d20016a41046a220d2007490d000b41002101200b4100200b28020041016a220d200d200c280200461b220d360200200d2003470d000b0b20010f0b2008200828020041808080807872360200200d0f0b41000bc40203037f017e037f4100410028020441106b22083602042000280204210620013502042105200041086a2103200041046a210403402005a721072008200542078822054200522202410774200741ff0071723a0008200328020020066b41004a41f0c20010012004280200200841086a410110031a2004200428020041016a220636020020020d000b0240200141046a2802002204450d002001280200220720044104746a2103200041046a2104034020082007290300370308200041086a220228020020066b41074a41f0c20010012004280200200841086a410810031a2004200428020041086a22063602002008200741086a290300370308200228020020066b41074a41f0c20010012004280200200841086a410810031a2004200428020041086a2206360200200741106a22072003470d000b0b4100200841106a36020420000b860203047f017e027f4100410028020441106b22083602042000280204210720013502042106200041086a2104200041046a210503402006a721022008200642078822064200522203410774200241ff0071723a000f200428020020076b41004a41f0c200100120052802002008410f6a410110031a2005200528020041016a220736020020030d000b0240200141046a2802002203450d0020012802002105200041086a2104200041046a21020340200820052d00003a000e200428020020076b41004a41f0c200100120022802002008410e6a410110031a2002200228020041016a2207360200200541016a21052003417f6a22030d000b0b4100200841106a36020420000b870301077f200020002802c4412201410c6c6a22064180c0006a210702400240418080c000410010086b220241004c0d00200241808004200241808004491b22021008220320064184c0006a2802002204200728020022066a460d010240200620002001410c6c6a4188c0006a22052802002201460d00200420016a2204200428020041808080807871417c20016b20066a72360200200520072802003602002004200428020041ffffffff07713602000b200041c4c1006a2207200728020041016a220736020020002007410c6c6a22004184c0006a200336020020004180c0006a2200200236020020034100200210041a20000f0b02402007280200220320064188c0006a22042802002206460d0020002001410c6c6a4184c0006a28020020066a2202200228020041808080807871417c20066b20036a72360200200420072802003602002002200228020041ffffffff07713602000b2000200041c4c1006a220728020041016a22023602c0412007200236020041000f0b2007200620026a36020020070b870201027f4100410028020441106b220336020420032001290300370308200028020820002802046b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a220236020420032001290308370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a220236020420032001290310370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a22023602042003200141186a290300370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a3602044100200341106a36020420000ba00203017f017e027f4100410028020441106b2206360204420021042000420037031020004200370320200041186a42848abd9a0537030041002105200041286a41003a00002000412c6a410036020020062001360204200620013602002006200120026a36020820062000101e1a20062802042102200641086a21030340200220032802004941b0c4001001200628020422022d000021012006200241016a2202360204200141ff0071200541ff0171220574ad2004842104200541076a210520014107760d000b200041206a2004a72201101f02402001450d00200041246a2802002105200641086a28020020062802046b20014f41f0c300100120052006280204200110031a2006200628020420016a3602040b4100200641106a3602040bd40101017f200028020820002802046b41074b41f0c300100120012000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141086a2000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141106a2000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141186a22012000280204410810031a2000200028020441086a3602042001290300428486d592055141c0c400100120000beb0301057f0240024002400240024002400240024002402001450d002000280200220420014d0d0120002001360200200028020420016a41003a00000f0b20002d0008450d072000410c6a2802002201450d0720012001280200417f6a22043602002004450d010c070b200420014f0d05410c2001101822022000280204200028020010031a20002d0008450d042000410c6a2802002204450d0420042004280200417f6a22033602002003450d010c040b20002802042202450d0541002802cc4122044101480d05418cc00021012004410c6c418cc0006a21030340200141046a2802002204450d060240200441046a20024b0d00200420012802006a20024b0d030b2001410c6a22012003490d000c060b0b200041046a2802002205450d0241002802cc4122034101480d02418cc00021042003410c6c418cc0006a21060340200441046a2802002203450d030240200341046a20054b0d00200320042802006a20054b0d030b2004410c6a22042006490d000c030b0b2002417c6a2201200128020041ffffffff07713602000c030b2005417c6a2204200428020041ffffffff07713602000b20002001360200200041046a2002360200200041086a41013a00002000410c6a41003602000b0f0b20004200370200200041086a41013a00002000410c6a41003602000b0bfb020b0041040b04603200000041e0c1000b3c617474656d707420746f20636f6e73747275637420746f6b656e2066726f6d206173736574207769746820646966666572656e742073796d626f6c000041a0c2000b26696e7465676572206f766572666c6f7720616464696e6720746f6b656e2062616c616e6365000041d0c2000b1b73696e676c65746f6e20746f6f2062696720746f2073746f7265000041f0c2000b06777269746500004180c3000b0761637469766500004190c3000b566d616c6c6f635f66726f6d5f6672656564207761732064657369676e656420746f206f6e6c792062652063616c6c6564206166746572205f686561702077617320636f6d706c6574656c7920616c6c6f6361746564000041f0c3000b057265616400004180c4000b2c696e746567657220756e646572666c6f77207375627472616374696e6720746f6b656e2062616c616e6365000041b0c4000b04676574000041c0c4000b16756e657870656374656420617373657420747970650000a312046e616d65200b616374696f6e5f73697a650006617373657274020000086c6f61645f693634050000000000066d656d63707903000000066d656d736574030000000b726561645f616374696f6e0200000c726571756972655f61757468010011726571756972655f726563697069656e740100047362726b01000b73656e645f696e6c696e650200000973746f72655f69363404000000001b5f474c4f42414c5f5f7375625f495f63757272656e63792e63707000056170706c79020130013181015f5a4e35656f73696f386469737061746368494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545454e53345f31337472616e736665725f6d656d6f454e53345f356973737565454a454545627979070130013101320133013401350136755f5a4e35656f73696f3133756e7061636b5f616374696f6e494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f454545545f76040130013101320133615f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545326f6e45524b4e53335f387472616e73666572450701300131013201330134013501366c5f5a4e35656f73696f3133756e7061636b5f616374696f6e494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545356973737565454545545f7605013001310132013301345e5f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545326f6e45524b4e53335f35697373756545070130013101320133013401350136af015f5a4e35656f73696f377461626c653634494c7935303933343138363737363535353638333834454c793134323839323335353232333930383531353834454e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545313463757272656e63795f7374617473454531336765745f6f725f637265617465457979524b53355f06013001310132013301340135a6015f5a4e35656f73696f377461626c653634494c7935303933343138363737363535353638333834454c7933363037373439373738373335313034303030454e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545376163636f756e74454531336765745f6f725f637265617465457979524b53355f060130013101320133013401356f5f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c793133383133313934323845794545453135696e6c696e655f7472616e7366657245797953325f4e535f36737472696e6745100130013101320133013401350136013701380139023130023131023132023133023134023135315f5a4e35656f73696f36766563746f72494e535f31367065726d697373696f6e5f6c6576656c45454332456a524b53315f0e01300131013201330134013501360137013801390231300231310231320231337a5f5a4e35656f73696f347061636b494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f4545454e535f36766563746f7249634545524b545f09013001310132013301340135013601370138185f5a4e4b35656f73696f36616374696f6e3473656e644576070130013101320133013401350136225f5a4e35656f73696f31346d656d6f72795f6d616e61676572366d616c6c6f63456d0e0130013101320133013401350136013701380139023130023131023132023133505f5a4e35656f73696f6c73494e535f31306461746173747265616d49506345454e535f31367065726d697373696f6e5f6c6576656c45454552545f53365f524b4e535f36766563746f724954305f4545090130013101320133013401350136013701383b5f5a4e35656f73696f6c73494e535f31306461746173747265616d495063454563454552545f53355f524b4e535f36766563746f724954305f4545090130013101320133013401350136013701382d5f5a4e35656f73696f31346d656d6f72795f6d616e6167657231366e6578745f6163746976655f68656170457608013001310132013301340135013601377b5f5a4e35656f73696f6c73494e535f31306461746173747265616d4950634545454552545f53355f524b4e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545387472616e7366657245040130013101320133705f5a4e35656f73696f36756e7061636b494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f454545545f504b636a0701300131013201330134013501367b5f5a4e35656f73696f7273494e535f31306461746173747265616d49504b634545454552545f53365f524e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545387472616e736665724503013001310132195f5a4e35656f73696f36737472696e6736726573697a65456a070130013101320133013401350136"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"eosio.auth"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">22</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setcode"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"vmtype"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"vmversion"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"code"</span>: <span class="string">"0061736d0100000001570f60017e0060027f7f0060037f7f7f017f60047e7e7f7f017f60017f017f60057e7e7e7f7f017f6000017f60027f7f017f60000060027e7e0060027e7e017f60017f0060047f7e7e7f0060047e7e7e7f0060037f7f7f0002b3010b03656e760b616374696f6e5f73697a65000603656e7606617373657274000103656e76086c6f61645f693634000503656e76066d656d637079000203656e76066d656d736574000203656e760b726561645f616374696f6e000703656e760c726571756972655f61757468000003656e7611726571756972655f726563697069656e74000003656e76047362726b000403656e760b73656e645f696e6c696e65000103656e760973746f72655f693634000303161508090a0b0b0b0b0c0c0d02010b07070704070e07010404017000000503010001073003066d656d6f72790200056170706c79000c1b5f474c4f42414c5f5f7375625f495f63757272656e63792e637070000b0af44015f202004100420037028c4041004200370294404100420037029c40410042003702a440410042003702ac40410041003602b440410041003602b840410041003602bc40410041003602c040410041003602c440410041003602c840410041003602cc40410041003602d040410041003602d440410041003602d840410041003602dc40410041003602e040410041003602e440410041003602e840410041003602ec40410041003602f040410041003602f440410041003602f840410041003602fc404100410036028041410041003602844141004100360288414100410036028c414100410036029041410041003602944141004100360298414100410036029c41410041003602a041410041003602a441410041003602a841410041003602ac41410041003602b041410041003602b441410041003602b841410041003602bc41410041003602c041410041003602c441410041003602c841410041003602cc41410041003602d041410041003602d4410b090020002001100d1a0b990201057f4100410028020441306b2206360204410021050240200042808080f0d1a9ddd7c600520d000240024002402001428080808080a0e998f600510d00200142808080b8d585cfe64d520d032006100e2006100f200641286a2d0000450d022006412c6a2802002205450d0220052005280200417f6a220436020020040d02200641246a2802002202450d0241002802cc4122044101480d02418cc00021052004410c6c418cc0006a21030340200541046a2802002204450d030240200441046a20024b0d00200420052802006a20024b0d030b2005410c6a22052003490d000c030b0b20061010200610110c010b2002417c6a2205200528020041ffffffff07713602000b410121050b4100200641306a36020420050b3301037f41004100280204220310002201410f6a4170716b22023602042002200110051a200020022001101d410020033602040ba80304017e017f027e027f4100410028020441306b22063602042000290300100620002903002101200029030810072001100720002903002101200642003703182006428486d59205370310200641206a428486d592052001200641106a10132006290328210320002903102104200041186a2202290300428486d592055141e0c1001001200320045a4180c4001001410141d0c20010012006428486d59205370320410141f0c20010012006200641206a410810031a2006200320047d370320410141f0c200100120064108722205200641206a410810031a20014280808080f2a9d3883220064110100a1a20002903082101200642003703182006428486d59205370310200641206a428486d592052001200641106a101320062903282104200029031021032002290300428486d592055141e0c1001001200320047c220420035a41a0c2001001410141d0c20010012006428486d59205370320410141f0c20010012006200641206a410810031a20062004370320410141f0c20010012005200641206a410810031a20014280808080f2a9d3883220064110100a1a4100200641306a3602040b8c0101047f41004100280204220410002201410f6a4170716b22023602042002200110051a200041106a220342848abd9a0537030020004200370308200141074b41f0c300100120002002410810031a2001417871220141084741f0c3001001200041086a200241086a410810031a200141104741f0c30010012003200241106a410810031a410020043602040bc30505027f017e017f017e017f4100410028020441d0006b220636020442808080f0d1a9ddd7c6001006200642003703482006428486d59205370340200641106a428486d5920542808080f0d1a9ddd7c600200641c0006a101220002903082103200041106a2202290300428486d592055141e0c1001001200320062903187c20035a41a0c20010012006200320062903187c370318410141d0c200100120062006290310370340410141f0c2001001200641206a200641c0006a410810031a20062006290318370340410141f0c2001001200641206a4108722204200641c0006a410810031a42808080f0d1a9ddd7c60042808080808080e4a646200641206a4110100a1a200642003703382006428486d59205370330200641c0006a428486d5920542808080f0d1a9ddd7c600200641306a101320062903482105200029030821032002290300428486d592055141e0c1001001200320057c220520035a41a0c2001001410141d0c20010012006428486d59205370340410141f0c2001001200641206a200641c0006a410810031a20062005370340410141f0c20010012004200641c0006a410810031a42808080f0d1a9ddd7c6004280808080f2a9d38832200641206a4110100a1a20002903082103200029030021052002290300428486d592055141e0c1001001200641003a0008200642003703002006410036020c42808080f0d1a9ddd7c6002005200320061014024020062d0008450d002006410c6a2802002200450d0020002000280200417f6a220236020020020d0020062802042204450d0041002802cc4122024101480d00418cc00021002002410c6c418cc0006a21010340200041046a2802002202450d0102400240200241046a20044b0d00200220002802006a20044b0d010b2000410c6a22002001490d010c020b0b2004417c6a2200200028020041ffffffff07713602000b4100200641d0006a3602040bba0201027f4100410028020441a0086b22053602042005200137030002400240200242808080f0d1a9ddd7c60042808080808080e4a646200541800810022204417f4c0d0020054200370388082005428486d5920537038008200441074b41f0c300100120054180086a2005410810031a200441787141084741f0c300100120054180086a41086a2005410872410810031a200041086a20052903880837030020002005290380083703000c010b410141d0c20010012005200329030037039808410141f0c200100120054180086a20054198086a410810031a2005200329030837039808410141f0c200100120054180086a41087220054198086a410810031a200242808080808080e4a64620054180086a4110100a1a200041086a2003290308370300200020032903003703000b4100200541a0086a3602040bba0201027f4100410028020441a0086b22053602042005200137030002400240200242808080f0d1a9ddd7c6004280808080f2a9d38832200541800810022204417f4c0d0020054200370388082005428486d5920537038008200441074b41f0c300100120054180086a2005410810031a200441787141084741f0c300100120054180086a41086a2005410872410810031a200041086a20052903880837030020002005290380083703000c010b410141d0c20010012005200329030037039808410141f0c200100120054180086a20054198086a410810031a2005200329030837039808410141f0c200100120054180086a41087220054198086a410810031a20024280808080f2a9d3883220054180086a4110100a1a200041086a2003290308370300200020032903003703000b4100200541a0086a3602040bbe0803077f047e017f410041002802044180016b220f3602044200210c423b210b4180c300210a4200210d034002400240024002400240200c4205560d00200a2c00002204419f7f6a41ff017141194b0d01200441a5016a21040c020b4200210e200c420b580d020c030b200441d0016a41002004414f6a41ff01714105491b21040b2004ad423886423887210e0b200e421f83200b42ffffffff0f8386210e0b200a41016a210a200c42017c210c200e200d84210d200b427b7c220b427a520d000b200f200d370340200f42808080f0d1a9ddd7c600370338410141e0c100100120032d0008210820032802002105200328020421040240200328020c220a450d00200a200a28020041016a3602000b200f41206a428486d59205370300200f41086a41246a2004360200200f41306a220320083a0000200f2001370310200f2000370308200f2002370318200f2005360228200f41346a200a3602000240200a450d00200a200a28020041016a3602000b200f41d8006a4101200f41386a10152105200f41c8006a41246a22094100360200200f4200370264200f42808080f0d1a9ddd7c600370348200f42808080b8d585cfe64d370350200f41f0006a200f41086a10162009200f280278360200200f200f290370370264024020032d0000450d00200f41346a2802002203450d0020032003280200417f6a220936020020090d00200f412c6a2802002206450d0041002802cc4122094101480d00418cc00021032009410c6c418cc0006a21070340200341046a2802002209450d0102400240200941046a20064b0d00200920032802006a20064b0d010b2003410c6a22032007490d010c020b0b2006417c6a2203200328020041ffffffff07713602000b0240200841ff0171450d00200a450d00200a200a280200417f6a220336020020030d002004450d0041002802cc4122034101480d00418cc000210a2003410c6c418cc0006a21080340200a41046a2802002203450d0102400240200341046a20044b0d002003200a2802006a20044b0d010b200a410c6a220a2008490d010c020b0b2004417c6a220a200a28020041ffffffff07713602000b200f41c8006a10170240200f2802642203450d0041002802cc4122044101480d00418cc000210a2004410c6c418cc0006a21080340200a41046a2802002204450d0102400240200441046a20034b0d002004200a2802006a20034b0d010b200a410c6a220a2008490d010c020b0b2003417c6a220a200a28020041ffffffff07713602000b200f41ec006a4100360200200f41e4006a4200370200024020052802002203450d0041002802cc4122044101480d00418cc000210a2004410c6c418cc0006a21080340200a41046a2802002204450d0102400240200441046a20034b0d002004200a2802006a20034b0d010b200a410c6a220a2008490d010c020b0b2003417c6a220a200a28020041ffffffff07713602000b4100200f4180016a3602040ba207010b7f20004100360208200042003702000240024002402001450d00410c2001410474101821070240200041046a2204280200450d004100210b4100210c03402007200b6a22082000280200200b6a2209290300370300200841086a200941086a290300370300200b41106a210b200c41016a220c2004280200490d000b0b024020002802002208450d0041002802cc41220c4101480d00418cc000210b200c410c6c418cc0006a21090340200b41046a280200220c450d0102400240200c41046a20084b0d00200c200b2802006a20084b0d010b200b410c6a220b2009490d010c020b0b2008417c6a220b200b28020041ffffffff07713602000b20002007360200200041086a220620013602002001450d014100210a0240200041046a220728020022082001220b470d004102210d0c030b4100210d0c020b4110210d0c010b4110210d0b037f024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240200d0e11020304050607090a010b0c0d0e0f000810100b2009417c6a220b200b28020041ffffffff0771360200200728020021084108210d0c1d0b20002004360200200620033602004100210d0c1c0b200028020020084104746a220b2002290300370300200b41086a200241086a2903003703002007200728020041016a2208360200200a41016a220a2001460d0e4101210d0c1b0b20082006280200220b470d0f4102210d0c1a0b417f2108200b417f460d0d4103210d0c190b410c200b41016a2203410474101821042007280200450d0e4104210d0c180b4100210b4100210c4105210d0c170b2004200b6a22082000280200200b6a2209290300370300200841086a200941086a290300370300200b41106a210b200c41016a220c20072802002208490d0d0c0e0b410021084106210d0c150b20002802002209450d0d4107210d0c140b41002802cc41220c4101480d0d4109210d0c130b418cc000210b200c410c6c418cc0006a2105410a210d0c120b200b41046a280200220c450d0c410b210d0c110b200c41046a20094b0d0e410c210d0c100b200c200b2802006a20094b0d0e410d210d0c0f0b200b410c6a220b2005490d0a0c0b0b20000f0b4110210d0c0c0b4100210d0c0b0b4100210d0c0a0b410f210d0c090b4105210d0c080b4106210d0c070b4108210d0c060b4108210d0c050b4108210d0c040b410a210d0c030b4108210d0c020b410d210d0c010b410e210d0c000b0b820303057f017e017f4100410028020441106b220836020420004100360208200042003702004160200128022022036b21062003ad210703402006417f6a2106200742078822074200520d000b410020066b21024100210502402006450d00410c200210182105200041086a20023602002000200536020020052103200221040340200341003a0000200341016a21032004417f6a22040d000b0b200041046a200236020020082005360204200820053602002008200520066b36020820082001101c1a200141206a350200210720082802042106200841086a210503402007a721032008200742078822074200522204410774200341ff0071723a000f200528020020066b41004a41f0c200100120082802042008410f6a410110031a2008200828020441016a220636020420040d000b0240200141206a2802002203450d00200141246a2802002104200841086a28020020066b20034e41f0c200100120082802042004200310031a2008200828020420036a3602040b4100200841106a3602040ba80302017e057f4100410028020441206b2206360204200041146a280200220341047441106a21022003ad21010340200241016a2102200142078822014200520d000b200041206a280200220320026a21022003ad21010340200241016a2102200142078822014200520d000b024002402002450d00410c2002101822052103200221040340200341003a0000200341016a21032004417f6a22040d000c020b0b410021050b200620053602082006200520026a220336021020062000290300370318200241074a41f0c20010012005200641186a410810031a200620002903083703182003200541086a22046b41074a41f0c20010012004200641186a410810031a2006200541106a36020c200641086a200041106a10192000411c6a101a1a20052002100902402005450d0041002802cc4122034101480d00418cc00021022003410c6c418cc0006a21040340200241046a2802002203450d0102400240200341046a20054b0d00200320022802006a20054b0d010b2002410c6a22022004490d010c020b0b2005417c6a2202200228020041ffffffff07713602000b4100200641206a3602040bd804010c7f02402001450d00024020002802c041220d0d004110210d200041c0c1006a41103602000b200141086a200141046a41077122026b200120021b210202400240024020002802c441220a200d4f0d002000200a410c6c6a4180c0006a21010240200a0d0020004184c0006a220d2802000d0020014180c000360200200d2000360200200041004180c00010041a0b200241046a210a034002402001280208220d200a6a20012802004b0d002001280204200d6a220d200d28020041808080807871200272360200200141086a22012001280200200a6a360200200d200d28020041808080807872360200200d41046a22010d030b2000101b22010d000b0b41fcffffff0720026b2104200041c8c1006a210b200041c0c1006a210c20002802c8412203210d03402000200d410c6c6a22014188c0006a28020020014180c0006a2205280200464190c300100120014184c0006a280200220641046a210d0340200620052802006a2107200d417c6a2208280200220941ffffffff07712101024020094100480d000240200120024f0d000340200d20016a220a20074f0d01200a280200220a4100480d012001200a41ffffffff07716a41046a22012002490d000b0b20082001200220012002491b200941808080807871723602000240200120024d0d00200d20026a200420016a41ffffffff07713602000b200120024f0d040b200d20016a41046a220d2007490d000b41002101200b4100200b28020041016a220d200d200c280200461b220d360200200d2003470d000b0b20010f0b2008200828020041808080807872360200200d0f0b41000bc40203037f017e037f4100410028020441106b22083602042000280204210620013502042105200041086a2103200041046a210403402005a721072008200542078822054200522202410774200741ff0071723a0008200328020020066b41004a41f0c20010012004280200200841086a410110031a2004200428020041016a220636020020020d000b0240200141046a2802002204450d002001280200220720044104746a2103200041046a2104034020082007290300370308200041086a220228020020066b41074a41f0c20010012004280200200841086a410810031a2004200428020041086a22063602002008200741086a290300370308200228020020066b41074a41f0c20010012004280200200841086a410810031a2004200428020041086a2206360200200741106a22072003470d000b0b4100200841106a36020420000b860203047f017e027f4100410028020441106b22083602042000280204210720013502042106200041086a2104200041046a210503402006a721022008200642078822064200522203410774200241ff0071723a000f200428020020076b41004a41f0c200100120052802002008410f6a410110031a2005200528020041016a220736020020030d000b0240200141046a2802002203450d0020012802002105200041086a2104200041046a21020340200820052d00003a000e200428020020076b41004a41f0c200100120022802002008410e6a410110031a2002200228020041016a2207360200200541016a21052003417f6a22030d000b0b4100200841106a36020420000b870301077f200020002802c4412201410c6c6a22064180c0006a210702400240418080c000410010086b220241004c0d00200241808004200241808004491b22021008220320064184c0006a2802002204200728020022066a460d010240200620002001410c6c6a4188c0006a22052802002201460d00200420016a2204200428020041808080807871417c20016b20066a72360200200520072802003602002004200428020041ffffffff07713602000b200041c4c1006a2207200728020041016a220736020020002007410c6c6a22004184c0006a200336020020004180c0006a2200200236020020034100200210041a20000f0b02402007280200220320064188c0006a22042802002206460d0020002001410c6c6a4184c0006a28020020066a2202200228020041808080807871417c20066b20036a72360200200420072802003602002002200228020041ffffffff07713602000b2000200041c4c1006a220728020041016a22023602c0412007200236020041000f0b2007200620026a36020020070b870201027f4100410028020441106b220336020420032001290300370308200028020820002802046b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a220236020420032001290308370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a220236020420032001290310370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a22023602042003200141186a290300370308200028020820026b41074a41f0c20010012000280204200341086a410810031a2000200028020441086a3602044100200341106a36020420000ba00203017f017e027f4100410028020441106b2206360204420021042000420037031020004200370320200041186a42848abd9a0537030041002105200041286a41003a00002000412c6a410036020020062001360204200620013602002006200120026a36020820062000101e1a20062802042102200641086a21030340200220032802004941b0c4001001200628020422022d000021012006200241016a2202360204200141ff0071200541ff0171220574ad2004842104200541076a210520014107760d000b200041206a2004a72201101f02402001450d00200041246a2802002105200641086a28020020062802046b20014f41f0c300100120052006280204200110031a2006200628020420016a3602040b4100200641106a3602040bd40101017f200028020820002802046b41074b41f0c300100120012000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141086a2000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141106a2000280204410810031a2000200028020441086a2202360204200028020820026b41074b41f0c3001001200141186a22012000280204410810031a2000200028020441086a3602042001290300428486d592055141c0c400100120000beb0301057f0240024002400240024002400240024002402001450d002000280200220420014d0d0120002001360200200028020420016a41003a00000f0b20002d0008450d072000410c6a2802002201450d0720012001280200417f6a22043602002004450d010c070b200420014f0d05410c2001101822022000280204200028020010031a20002d0008450d042000410c6a2802002204450d0420042004280200417f6a22033602002003450d010c040b20002802042202450d0541002802cc4122044101480d05418cc00021012004410c6c418cc0006a21030340200141046a2802002204450d060240200441046a20024b0d00200420012802006a20024b0d030b2001410c6a22012003490d000c060b0b200041046a2802002205450d0241002802cc4122034101480d02418cc00021042003410c6c418cc0006a21060340200441046a2802002203450d030240200341046a20054b0d00200320042802006a20054b0d030b2004410c6a22042006490d000c030b0b2002417c6a2201200128020041ffffffff07713602000c030b2005417c6a2204200428020041ffffffff07713602000b20002001360200200041046a2002360200200041086a41013a00002000410c6a41003602000b0f0b20004200370200200041086a41013a00002000410c6a41003602000b0bfb020b0041040b04603200000041e0c1000b3c617474656d707420746f20636f6e73747275637420746f6b656e2066726f6d206173736574207769746820646966666572656e742073796d626f6c000041a0c2000b26696e7465676572206f766572666c6f7720616464696e6720746f6b656e2062616c616e6365000041d0c2000b1b73696e676c65746f6e20746f6f2062696720746f2073746f7265000041f0c2000b06777269746500004180c3000b0761637469766500004190c3000b566d616c6c6f635f66726f6d5f6672656564207761732064657369676e656420746f206f6e6c792062652063616c6c6564206166746572205f686561702077617320636f6d706c6574656c7920616c6c6f6361746564000041f0c3000b057265616400004180c4000b2c696e746567657220756e646572666c6f77207375627472616374696e6720746f6b656e2062616c616e6365000041b0c4000b04676574000041c0c4000b16756e657870656374656420617373657420747970650000a312046e616d65200b616374696f6e5f73697a650006617373657274020000086c6f61645f693634050000000000066d656d63707903000000066d656d736574030000000b726561645f616374696f6e0200000c726571756972655f61757468010011726571756972655f726563697069656e740100047362726b01000b73656e645f696e6c696e650200000973746f72655f69363404000000001b5f474c4f42414c5f5f7375625f495f63757272656e63792e63707000056170706c79020130013181015f5a4e35656f73696f386469737061746368494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545454e53345f31337472616e736665725f6d656d6f454e53345f356973737565454a454545627979070130013101320133013401350136755f5a4e35656f73696f3133756e7061636b5f616374696f6e494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f454545545f76040130013101320133615f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545326f6e45524b4e53335f387472616e73666572450701300131013201330134013501366c5f5a4e35656f73696f3133756e7061636b5f616374696f6e494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545356973737565454545545f7605013001310132013301345e5f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545326f6e45524b4e53335f35697373756545070130013101320133013401350136af015f5a4e35656f73696f377461626c653634494c7935303933343138363737363535353638333834454c793134323839323335353232333930383531353834454e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545313463757272656e63795f7374617473454531336765745f6f725f637265617465457979524b53355f06013001310132013301340135a6015f5a4e35656f73696f377461626c653634494c7935303933343138363737363535353638333834454c7933363037373439373738373335313034303030454e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545376163636f756e74454531336765745f6f725f637265617465457979524b53355f060130013101320133013401356f5f5a4e35656f73696f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c793133383133313934323845794545453135696e6c696e655f7472616e7366657245797953325f4e535f36737472696e6745100130013101320133013401350136013701380139023130023131023132023133023134023135315f5a4e35656f73696f36766563746f72494e535f31367065726d697373696f6e5f6c6576656c45454332456a524b53315f0e01300131013201330134013501360137013801390231300231310231320231337a5f5a4e35656f73696f347061636b494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f4545454e535f36766563746f7249634545524b545f09013001310132013301340135013601370138185f5a4e4b35656f73696f36616374696f6e3473656e644576070130013101320133013401350136225f5a4e35656f73696f31346d656d6f72795f6d616e61676572366d616c6c6f63456d0e0130013101320133013401350136013701380139023130023131023132023133505f5a4e35656f73696f6c73494e535f31306461746173747265616d49506345454e535f31367065726d697373696f6e5f6c6576656c45454552545f53365f524b4e535f36766563746f724954305f4545090130013101320133013401350136013701383b5f5a4e35656f73696f6c73494e535f31306461746173747265616d495063454563454552545f53355f524b4e535f36766563746f724954305f4545090130013101320133013401350136013701382d5f5a4e35656f73696f31346d656d6f72795f6d616e6167657231366e6578745f6163746976655f68656170457608013001310132013301340135013601377b5f5a4e35656f73696f6c73494e535f31306461746173747265616d4950634545454552545f53355f524b4e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545387472616e7366657245040130013101320133705f5a4e35656f73696f36756e7061636b494e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c7931333831333139343238457945454531337472616e736665725f6d656d6f454545545f504b636a0701300131013201330134013501367b5f5a4e35656f73696f7273494e535f31306461746173747265616d49504b634545454552545f53365f524e535f313667656e657269635f63757272656e6379494e535f35746f6b656e494c7935303933343138363737363535353638333834454c79313338313331393432384579454545387472616e736665724503013001310132195f5a4e35656f73696f36737472696e6736726573697a65456a070130013101320133013401350136"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setabi"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"abi"</span>: &#123;</span><br><span class="line">              <span class="string">"types"</span>: [&#123;</span><br><span class="line">                  <span class="string">"new_type_name"</span>: <span class="string">"account_name"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"name"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"structs"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"from"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"to"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"quantity"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"memo"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"to"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"quantity"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"account"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"balance"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"currency_stats"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"supply"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"actions"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"transfer"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"issue"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"tables"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"account"</span>,</span><br><span class="line">                  <span class="string">"index_type"</span>: <span class="string">"i64"</span>,</span><br><span class="line">                  <span class="string">"key_names"</span>: [</span><br><span class="line">                    <span class="string">"currency"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"key_types"</span>: [</span><br><span class="line">                    <span class="string">"uint64"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"account"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"stat"</span>,</span><br><span class="line">                  <span class="string">"index_type"</span>: <span class="string">"i64"</span>,</span><br><span class="line">                  <span class="string">"key_names"</span>: [</span><br><span class="line">                    <span class="string">"currency"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"key_types"</span>: [</span><br><span class="line">                    <span class="string">"uint64"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"currency_stats"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46010c6163636f756e745f6e616d65046e616d6504087472616e7366657200040466726f6d0c6163636f756e745f6e616d6502746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67056973737565000202746f0c6163636f756e745f6e616d65087175616e74697479056173736574076163636f756e7400020863757272656e63790675696e7436340762616c616e63650675696e7436340e63757272656e63795f737461747300020863757272656e63790675696e74363406737570706c790675696e74363402000000572d3ccdcd087472616e736665720000000000a5317605697373756502000000204f4d113203693634010863757272656e6379010675696e743634076163636f756e740000000000904dc603693634010863757272656e6379010675696e7436340e63757272656e63795f7374617473"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="再次检查currency账号合约编号">再次检查<code>currency</code>账号合约编号</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get code currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回如下信息</span></span><br><span class="line">code hash: <span class="number">135</span>bb95927600a21dcc701223a107215e3b25cb19b196e0c38fa7d7f2082c869</span><br></pre></td></tr></table></figure>
<h5><span id="发行货币">发行货币</span></h5><blockquote>
<p>在使用货币合约之前，你必须先发行货币</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc push action currency issue <span class="string">'&#123;"to":"currency","quantity":"1000.0000 CUR"&#125;'</span> --permission currency@active</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回如下信息</span></span><br><span class="line"><span class="number">2347850</span>ms thread-<span class="number">0</span>   main.cpp:<span class="number">1149</span>                 operator()           ] Converting argument to binary...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"afd44bfce56e8f96eecf6075f7d98e8b573ca318e158002f0abc83489bcb46fb"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"afd44bfce56e8f96eecf6075f7d98e8b573ca318e158002f0abc83489bcb46fb"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"1000.0000 CUR"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af4680969800000000000443555200000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"1000.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">""</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af460000001e4d75af468096980000000000044355520000000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="检查货币合约的初始余额">检查货币合约的初始余额</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get table currency currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">     <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">     <span class="string">"balance"</span>: <span class="number">10000000</span></span><br><span class="line">     &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="用样本货币合约转移资金">用样本“货币”合约转移资金</span></h3><p>理论上，任何人在任何时间可以任何合约发送任意的消息，但是如果没有给予相应的权限的话，合约会拒绝接受该消息。消息的发送必须依赖一定的权限才能发送。</p>
<p>如下示例，使用<code>currency</code>账号的<code>active</code>权限向账户<code>inita</code>转移<code>20CUR</code></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc push action currency transfer <span class="string">'&#123;"from":"currency","to":"inita","quantity":"20.0000 CUR","memo":"my first transfer"&#125;'</span> --permission currency@active</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line"><span class="number">2646382</span>ms thread-<span class="number">0</span>   main.cpp:<span class="number">1149</span>                 operator()           ] Converting argument to binary...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"740bc3ed54ba251a0abaf32dd46e2b80f5187acc788881ea52550702ba84a23a"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"740bc3ed54ba251a0abaf32dd46e2b80f5187acc788881ea52550702ba84a23a"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"20.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">"my first transfer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46000000000093dd74400d0300000000000443555200000000116d79206669727374207472616e73666572"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">2</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"inita"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"20.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">"my first transfer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46000000000093dd74400d0300000000000443555200000000116d79206669727374207472616e73666572"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="读取样例货币合约账户余额">读取样例货币合约账户余额</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  查询 inita 余额</span></span><br><span class="line">$ ./eosioc get table inita currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">      <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">      <span class="string">"balance"</span>: <span class="number">200000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  查询 currency 余额</span></span><br><span class="line">$ ./eosioc get table currency currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">      <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">      <span class="string">"balance"</span>: <span class="number">9800000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由浅入深学习EOS]]></title>
      <url>/posts/1fee111e.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>带你系统性地、由浅入深地学习和了解EOS相关技术……</p></blockquote><a id="more"></a><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><h1><span id="前提">前提</span></h1><ul><li><p>需要对<code>区块链</code>有个基本的认识，比如什么是区块链，有哪些特点等等，网上资料很多。</p></li><li><p>对<code>比特币</code>的工作原理有一个深入的研究，推荐《精通比特币》第二版，一定要精读。</p></li><li><p>对<code>以太坊</code>、<code>智能合约</code>有所了解。</p></li></ul><h1><span id="初识eos">初识EOS</span></h1><ul><li><p>熟读EOS白皮书，这一块后面我会写一些EOS白皮书解读版出来。</p><blockquote><p>白皮书地址：<a href="https://github.com/EOSIO/Documentation" target="_blank" rel="external">https://github.com/EOSIO/Documentation</a></p></blockquote></li><li><p><a href="https://wangwei.one/posts/57dd6237.html">EOS术语表</a></p></li></ul><h1><span id="部署运行eos">部署运行EOS</span></h1><ol><li><a href="https://wangwei.one/posts/181733fc.html">运行EOS源代码（一）</a></li><li><a href="https://wangwei.one/posts/b726a89e.html">运行EOS源代码（二）</a></li><li><a href="https://wangwei.one/posts/81ba25e.html">EOS Programs &amp; Tools 介绍</a></li><li><a href="https://wangwei.one/posts/869983fd.html">EOS货币合约演示</a></li><li><a href="https://wangwei.one/posts/88eff102.html">连接EOS公共测试网络</a></li></ol><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[连接EOS公共测试网络]]></title>
      <url>/posts/88eff102.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文介绍如何将自己的本地测试网络连接到EOS公共测试网络(Public Testnet)上。</p><p>官方文档：<a href="https://github.com/EOSIO/eos/wiki/Testnet%3A%20Public" target="_blank" rel="external">https://github.com/EOSIO/eos/wiki/Testnet%3A%20Public</a></p></blockquote><a id="more"></a><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><h1><span id="准备">准备</span></h1><p>本地已经能够正常运行起了EOS的测试网络。如有问题，可参考这篇文档：<a href="https://wangwei.one/posts/181733fc.html">运行EOS源代码（一）</a></p><h1><span id="公共测试网络端点public-testnet-endpoints">公共测试网络端点(Public Testnet Endpoints)</span></h1><p>现在可以通过以下几种方式去访问EOS Public Testnet Endpoints</p><ul><li>HTTP Endpoint: <code>testnet1.eos.io</code></li><li>P2P Endpoint: <code>p2p-testnet1.eos.io:9876</code></li><li>Web Wallet Endpoint: <code>t1wallet.eos.io</code>, <code>t1api.eos.io</code>, <code>t1readonly.eos.io</code></li></ul><p>通过浏览器或者终端命令行<code>crul</code>访问<code>testnet1.eos.io/v1/chain/get_info</code>,获得测试链信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl testnet1.eos.io/v1/chain/get_info</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/WX20180122-193329.png" alt=""></p>
<h1><span id="将本地eosdeos服务端连接到公共测试网络上">将本地EOSD(EOS服务端)连接到公共测试网络上</span></h1><h4><span id="修改配置文件configini">修改配置文件config.ini</span></h4><ul>
<li><p>路径：<code>~/eos/build/scripts/testnet_np/config.ini</code></p>
</li>
<li><p>将配置项<code>p2p-server-address</code>中的<code>localhost</code>改为你当前网络的<code>公网Ip地址</code>，否则后面运行时会出现如下错误：</p>
<blockquote>
<p>公网Ip查询：直接百度，输入IP，即可查询</p>
</blockquote>
</li>
</ul>
<p><img src="https://img.i7years.com/blog/photo_2018-01-22_19-41-09.jpg" alt=""></p>
<h4><span id="执行脚本">执行脚本</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行公共测试网络连接脚本</span></span><br><span class="line">$ cd ~/eos/build/scripts</span><br><span class="line">$ ./start_npnode.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出</span></span><br><span class="line">Launched eosd.</span><br><span class="line">See testnet_np/stderr.txt <span class="keyword">for</span> eosd output.</span><br><span class="line">Synching requires at least <span class="number">8</span> minutes, depending on network conditions.</span><br></pre></td></tr></table></figure>
<h4><span id="查询区块同步日志">查询区块同步日志</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f testnet_np/stderr.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/WX20180122-194932@2x.png" alt=""></p>
<blockquote>
<p>看到 accept_block，Syncing Blockchain，表示本地正在从公共测试网络上同步区块信息。</p>
</blockquote>
<h1><span id="使用eosc客户端连接到公共测试网络上">使用EOSC客户端连接到公共测试网络上</span></h1><h4><span id="连接public-testnet">连接Public Testnet</span></h4><p>当<code>eosd</code>连接到了Public Testnet上时，再使用<code>eosc</code>连接到本地测试网络localhost:80即可</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eosc -H $&#123;http_endpoint&#125; -p <span class="number">80</span> $&#123;options&#125; $&#123;subcommand&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="钱包功能使用">钱包功能使用</span></h4><p>公共测试网络没有提供任何有关钱包的功能，为了能够对交易进行签名、发送交易信息以及进行相关的钱包操作，需要使用<code>eosc</code>连接到本地测试网络上并且要将 <code>eosd</code>连接到Public Testnet上时，这样才能进行相关钱包的操作。</p>
<h5><span id="创建钱包">创建钱包</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc wallet create</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/WX20180124-231535@2x.png" alt=""></p>
<h5><span id="创建密钥对">创建密钥对</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc create key</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/WX20180124-232320@2x.png" alt=""></p>
<h5><span id="导入私钥">导入私钥</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc wallet import <span class="number">5</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">imported private key <span class="keyword">for</span>: EOSxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(2) | EOS Glossary]]></title>
      <url>/posts/57dd6237.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文介绍和EOS相关的一些术语</p><p>官方文档：<a href="https://github.com/eosio/eos/wiki/Glossary" target="_blank" rel="external">https://github.com/eosio/eos/wiki/Glossary</a></p></blockquote><a id="more"></a><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><h2><span id="account账户">Account(账户)</span></h2><h5><span id="定义">定义</span></h5><p>An on-chain identifier made up of native and/or custom permissions that are assigned one or more keys or accounts.</p><blockquote><p>由本地和/或自定义权限组成的链上标识符，可以分配一个或多个密钥或者帐户。</p></blockquote><h2><span id="authority权力">Authority(权力)</span></h2><h5><span id="定义">定义</span></h5><p>An abstract of permissions that represent how permissions are organized in reality that are bound to an individual or groups of individuals.</p><blockquote><p>代表现实世界中一个个体或者一群个体的权限组织方式的抽象定义。</p></blockquote><h2><span id="block区块">Block(区块)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>Blk</p></blockquote><h5><span id="定义">定义</span></h5><p>A confirmable unit of the Blockchain. Each block contains zero or more Transactions, as well as a cryptographic connection to all prior blocks. When a block becomes “irreversibly confirmed” ，it’s because a supermajority of Block Producers have agreed that the given Block contains correct Transactions. Once a Block is irreversibly confirmed, it becomes a permanent part of the immutable Blockchain.</p><blockquote><p>区块链的可确认单位。 每个区块包含零笔或多笔交易，以及到先前所有区块的加密连接。 当绝对多数的区块生产者的一致同意该区块包含了正确的交易时， 这个区块就变成了“不可逆转地确认”。 一旦一个区块被不可逆转地确认，它就成为不可变更区块链的永久的一部分。</p></blockquote><h2><span id="dac去中心化的自治团体或公司">DAC(去中心化的自治团体或公司)</span></h2><h5><span id="定义">定义</span></h5><p>Decentralized Autonomous Collective, or Decentralized Autonomous Corporation.</p><blockquote><p>去中心化的自治集体或去中心化的自治公司</p></blockquote><h2><span id="dao去中心化自治组织">DAO(去中心化自治组织)</span></h2><h5><span id="定义">定义</span></h5><p>Decentralized Autonomous Organization.</p><blockquote><p>去中心化的自治组织</p></blockquote><h2><span id="dpos授权股权证明机制">DPoS(授权股权证明机制)</span></h2><h5><span id="定义">定义</span></h5><p>Delegated Proof of Stake. Also, “Democracy as Proof of Stake.” DPoS is one of a collection of consensus algorithms, i.e. methods by which block producers can agree (reach consensus) on which transactions and which blocks are “real” and should be confirmed and treated as irreversible.</p><blockquote><p><strong>授权股权证明机制</strong>，也叫做”民主主义证明机制”。DPoS是共识算法集合中的一种，即选取哪些区块生产者可以同意（达成共识）哪些交易和哪些区块是“真实的”并且应该被确认和被视为不可逆的一种算法。</p></blockquote><h2><span id="key-pair密钥对">Key pair(密钥对)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>keys</p></blockquote><h5><span id="定义">定义</span></h5><p>A public key and its corresponding private key</p><blockquote><p>公钥以及和它对应的私钥</p></blockquote><h2><span id="larimer拉瑞默">larimer(拉瑞默)</span></h2><h5><span id="定义">定义</span></h5><p>1/10000 of an EOS (token) <code>0.0001 EOS</code></p><blockquote><p>1 EOS = 10000 larimer</p></blockquote><h2><span id="master-password主密码">Master Password(主密码)</span></h2><h5><span id="定义">定义</span></h5><p>The password used to to unlock (decrypt) a wallet file</p><blockquote><p>用于解锁（解密）钱包文件的密码</p></blockquote><h2><span id="message消息">Message(消息)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>Msg</p></blockquote><h5><span id="定义">定义</span></h5><p>A change to the Blockchain. One or more messages make up a Transaction.</p><blockquote><p>表示区块链的一种变化，一个或多个消息组成一笔交易.</p></blockquote><h2><span id="oracle预言机">Oracle(预言机)</span></h2><h5><span id="定义">定义</span></h5><p>“An oracle, in the context of blockchains and smart contracts, is an agent that finds and verifies real-world occurrences and submits this information to a blockchain to be used by smart contracts.” <em><a href="https://blockchainhub.net/blockchain-oracles/" target="_blank" rel="external">Source</a></em></p><blockquote><p>在区块链和智能合约的背景下，预言机是一个能够发现和验证真实世界事件的代理，并将这些信息提交给智能合约使用的区块链。<a href="https://blockchainhub.net/blockchain-oracles/" target="_blank" rel="external">详情</a></p><blockquote><p>理解：预言机是智能合约获取外部信息的唯一途径。智能合约逻辑的触发需要信息源，没有提供外部信息的预言机，智能合约的实用性大打折扣</p></blockquote></blockquote><h2><span id="permission权限">Permission(权限)</span></h2><h5><span id="定义">定义</span></h5><p>A weighted security mechanism that determines whether or not a message is properly authorized by evaluating its signature(s) authority</p><blockquote><p>一个加权的安全机制，通过评估其签名权限来确定一个消息是否被正确授权</p></blockquote><h2><span id="private-key私钥">Private Key(私钥)</span></h2><h5><span id="定义">定义</span></h5><p>A secret key used to sign transactions</p><blockquote><p>用于签署交易的密钥</p></blockquote><h2><span id="public-key公钥">Public Key(公钥)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>pub key</p></blockquote><h5><span id="定义">定义</span></h5><p>A publicly available key that is transmitted alongside a transaction.</p><blockquote><p>与交易一起传送的可公开使用的密钥</p></blockquote><h2><span id="smart-contract智能合约">Smart Contract(智能合约)</span></h2><h5><span id="定义">定义</span></h5><p>A smart contract is a computer protocol intended to facilitate, verify, or enforce the negotiation or performance of a contract.</p><blockquote><p>智能合约是一种旨在促进、验证或执行判断或履行合同的计算机协议。</p></blockquote><h2><span id="transaction交易">Transaction(交易)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>Tx, Txn</p></blockquote><h5><span id="定义">定义</span></h5><p>A complete all-or-nothing change to the Blockchain. A combination of one or more Messages. Usually, the execution of a Smart Contract.</p><blockquote><p>区块链上彻底的要么有要么无的变化。是一个或多个消息的组合。通常，用于智能合约的执行。</p></blockquote><h2><span id="wallet钱包">Wallet(钱包)</span></h2><h5><span id="定义">定义</span></h5><p>An encrypted file generated and/or managed by a client (for example, <code>eosc</code>) that manages private keys and facilitates the signing of transactions in a secure manner. Wallets may be in a locked or unlocked state.</p><blockquote><p>由客户端（例如<code>eosc</code>）生成和/或管理的加密文件，用于管理私钥并便于以安全方式签署交易。 钱包可能处于锁定或解锁状态。</p></blockquote><h2><span id="witness见证人">Witness(见证人)</span></h2><h5><span id="同义词">同义词</span></h5><blockquote><p>block producer(区块生产者)</p></blockquote><h5><span id="定义">定义</span></h5><p>The node that is currently taking its turn producing the “right now” block for the blockchain. Or, a member of the group of nodes who have been elected to take such turns. Synonymous with ‘block producer’.</p><blockquote><p>当前正在轮流为区块链生产“立即”区块的节点。 或者，被选为轮流节点组的组成成员之一。 与“区块生产者”同义。</p></blockquote><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全球区块链顶级会议Token Summit 2017一手信息解读]]></title>
      <url>/posts/edbb6788.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>以下内容均来自xdite老师的直播分享</p></blockquote><h1><span id="token-summit-介绍">Token Summit 介绍</span></h1><h3><span id="token-summit">Token Summit</span></h3><ul><li>全球区块链的顶级会议，是区块链行业里最具公信力的会议</li></ul><a id="more"></a><h3><span id="会议主题">会议主题</span></h3><ul><li><p>Token Summit I：Explored in-depth the Token-Based Economy.</p><blockquote><p>第一次会议主要深度探讨以代币为基础的数字经济。</p></blockquote></li><li><p>Token Summit II：Discuss the economics, regulation and practices around blockchain-based tokens, protocols, and crypto-assets. Focus on Designing Token-Based Economies, a key theme for this conference.</p><blockquote><p>第二次会议讨论基于区块链的代币，协议和加密资产的经济，法规和实践。重点关注设计令牌经济。</p></blockquote></li></ul><h3><span id="主要的参与者">主要的参与者</span></h3><ul><li>企业家、投资者、金融专业人士、律师、基金经理、监管者或商业主管等</li></ul><h3><span id="价值">价值</span></h3><ul><li>发掘潜在的创新思想，新的商业模式以及尚未被实施的商业点子</li></ul><h3><span id="创始人">创始人</span></h3><ul><li>William Mougayar</li><li>Twitter：<a href="https://twitter.com/wmougayar" target="_blank" rel="external">https://twitter.com/wmougayar</a></li><li>著作：<a href="https://www.amazon.com/Business-Blockchain-Practice-Application-Technology/dp/1119300312/ref=sr_1_1?ie=UTF8&amp;qid=1513312767&amp;sr=8-1&amp;keywords=The+Business+Blockchain" target="_blank" rel="external">《The Business Blockchain》</a> / <a href="https://www.amazon.cn/dp/B01M1EKNFA/ref=sr_1_1?ie=UTF8&amp;qid=1513306546&amp;sr=8-1&amp;keywords=%E5%95%86%E4%B8%9A%E5%8C%BA%E5%9D%97%E9%93%BE%C2%B7%E5%BC%80%E5%90%AF%E5%8A%A0%E5%AF%86%E7%BB%8F%E6%B5%8E%E6%96%B0" target="_blank" rel="external">《商业区块链·开启加密经济新时代》</a></li></ul><h3><span id="网址">网址</span></h3><ul><li>官网地址：<a href="http://tokensummit.com/" target="_blank" rel="external">http://tokensummit.com/</a></li><li>Youtube：<a href="https://www.youtube.com/channel/UClKay1eOR8D825wY5PBYFUA" target="_blank" rel="external">Token Summit Official YouTube Channel</a></li></ul><h1><span id="分享内容">分享内容</span></h1><h2><span id="有趣的现象">有趣的现象</span></h2><ul><li><p>Token Summit 一般是每5~6月举办一次，会议每次举办的时候币价都是上次的5倍，中间间隔大约5个月，目前连续15个月，币价连续涨 5 x 5 倍。</p><blockquote><p>我们可以预测5个月后的币价大概是多少(注意：这并不能作为你的投资建议，不要颠倒因果关系 ~ ^_^ ~)</p></blockquote></li></ul><h2><span id="几个观点">几个观点</span></h2><ul><li><p><strong>去现场参加conference，发掘最新的行业动态</strong>。领先世界的技术都是conference演讲上提到过的，所以追一些最新的技术，最好是到现场去看，特别是像区块链这样快速发展的技术。<strong>币圈一月，人间一年</strong>。当我们投资的东西有信息差时，一定要到现场去看，去感受行业现在的热度。</p></li><li><p><strong>牛市的判断方法</strong>，当你看到乱七八糟的小币都在涨的时候，那差不多就是趋近于牛市了，但是如果只有BTC在涨，那还算不上牛市。</p><blockquote><p>今年牛市的几个节点：2017年5月、2017年7月、2017年12月</p></blockquote></li><li><p>现在进场不算晚，<strong>一切才刚刚开始</strong>。最近参加会议，明显感受到现场的人，非常非常多，之前的 Token Summit 都是技术水平cutting edge(前沿、尖端)的人参加的，现在乱七八糟的Developer(开发者)都疯狂的涌入到了这个世界。</p><blockquote><p>以今年国内交易所关闭为分界线，之前算作是石器时代，之后的现在大概处于农业时代，现在有越来越多的资本、互联网正规军和很会做项目的人冲了进来，一切才刚刚开始，想要这这个区块链世界存活，一定要了解区块链世界的一些本质。</p></blockquote></li></ul><p><img src="https://img.i7years.com/blog/just_begin.jpg" alt="Everything is just beginning"></p><h2><span id="什么是token">什么是Token</span></h2><p><strong>Token</strong>（代币）简而言之就是一个区块链项目里的价值符号。一般起到价值尺度、交易媒介，承担交易费用的作用。</p><h3><span id="token分类">Token分类</span></h3><ul><li><p>Coins：多半由机构或政府发行，主要价值在于转移资金和储存价值，例如BTC。</p></li><li><p>Utility Tokens（工具类的代币）：发行方发行的用于某一个服务使用的媒介，像消耗品、手续费、使用权利。</p></li><li><p>Tokenize Security（代币化的证券）：依据Howey test（豪伊测试）原则，判断金融产品是否属于证券法规定的投资契约：</p><blockquote><ol><li>必须有金钱的投资 （investment of money）</li><li>资金必须投资于一个共同事业（common enterprise）</li><li>投资人有获利之期望（expectation of profit）</li><li>利润之有无，全然来自于他人的努力（solely from the efforts of others）</li></ol></blockquote></li></ul><h3><span id="理解token的重要性">理解Token的重要性</span></h3><ul><li><p>很多人容易混淆<code>Utility Tokens</code>和<code>Tokenize Security</code></p></li><li><p>历史背景</p><blockquote><p>ICO 最早的形式是Token的无偿捐赠，后来衍生为有人期待这个捐赠有所回报，但是在设计回报的时候，这个回报就不小心设计成了<code>Tokenize Security</code>。所以，区分<code>Utility Tokens</code>和<code>Tokenize Security</code>非常重要，因为这会影响Token的实际价值和Token在各国的监管程度。</p></blockquote></li><li><p>最新的玩法（中国式的玩法）</p><ul><li><strong>用Token兑换Token</strong><ul><li>直接捐赠Token或者直接用法币购买Token都会法律风险；</li><li>Token是属于商品，用商品兑换商品并不太触犯法律。</li></ul></li><li><strong>Token回购</strong><ul><li>承诺Token会回报利润，就有可能变成Security，Security在各国都会被银监会、证监会或SCE监管。管不是问题，但是这反而会限制商业模型的发展。</li><li>拿利润去回购市面上的Token，然后把这些Token拿去销毁，销毁会导致价格的自然上涨，这样就可以避免Utility Tokens变成Tokenize Security。这也是目前Utility Tokens的主要发行方式。</li></ul></li></ul></li></ul><h3><span id="token的币价从何而来">Token的币价从何而来</span></h3><ul><li><p>Token本身具有真正的价值</p><ul><li>Utility类的Token消耗过快，降低了Supply(供给)，导致价格上升；</li><li>本身具有承载价值，比如BTC和ETH，被拿来当转账的网络；</li><li>拿来当众筹的筹码，比如ETH、EOS</li><li>交易媒介，交易所发行的代币，例如BNB、QASH、Tether(USDT)。交易所为什么会发行Token呢？1）我们的资产存在交易所，需要一个避险的缓冲空间；2）各国的法币入口都有一定的危险；3）通过交易所发行的Token去兑换其他的Token，可以规避法律风险</li></ul></li><li><p>群众期待Token产生价值</p><ul><li>公司币。公司发行的Token。公司跟谁合作，群众会期待这个合作者会拉盘，会有一些利好。</li><li>社群币。比如像EOS、ETH，发布一些新的消息，比如改善性能、上主网、分叉，由于社群的消息利好，可能会造成短期价格拉升。</li></ul></li></ul><p><strong>投资币种的建议</strong></p><p>1）<strong>选择具有长期价值的币种</strong>。不管是消耗型的，还是承载价值，还是众筹，这些都可能让他的价值飞速增加。</p><p>2）<strong>选择社群币</strong>。公司币拉盘的效果有限，社群币有广大的开发者和合作商，人多力量大，消息面的传播会产生很大的拉盘效果。</p><p>3）<strong>一定要弄懂自己投资的品种，找到价值投资的根源所在</strong>。想要做长期的价值投资，一定要弄清楚我们投资的链、投资的代币的真正价值来自于哪里，是因为什么才产生价值，为什么币价会上涨。</p><h1><span id="token的合规化进展">Token的合规化进展</span></h1><h2><span id="ico和token市场的两种状况">ICO和Token市场的两种状况</span></h2><ul><li><p>国外比较老实，倾向通过跟大的币所、合规的币所合作，将Token合规化。</p></li><li><p>国内比较倾向发明不同的玩法，绕过政府监管。</p><blockquote><p>绕过监管并不是不好的，规则并不是由法律规定的，而是在不影响大家共同利益的情况下所达成的一种集体共识。</p><p>如果过于遵守政府现有的法规，会导致效率降低，会阻碍行业发展步伐，世界得不到演化。</p><p>如果太绕规定，会导致区块链投资者面临巨大的风险。</p></blockquote></li></ul><h2><span id="ico为什么要合规化">ICO为什么要合规化</span></h2><ul><li><p>政府需要保护本国的国民。用Token募集资金其实非常方便，但是这会让很多不合格的投资者直接面临巨大的投资风险。</p><blockquote><p>什么是合格投资人。具备相当程度的风险识别能力以及风险承担能力。简而言之，<strong>智商要高看得懂，有钱赔得起</strong>。</p></blockquote></li><li><p>另一方面，Token的发行商也不希望不明白价值投资的小散户随意冲进来，这会伤害经营生意的稳定性。比如，Telegram上每天都会看到有人催问啥时候上交易所啊，币价什么时候炒啊，什么时候升值啊。</p></li></ul><h2><span id="国外ico发行平台">国外ICO发行平台</span></h2><h3><span id="主要的平台">主要的平台</span></h3><ul><li><a href="https://coinlist.co/" target="_blank" rel="external">CoinList</a></li><li><em>直布罗陀</em>区块链<em>交易所</em>（GBX）</li><li><a href="https://www.kickico.com/zh/" target="_blank" rel="external">KICKICO</a>。并未合规，只是让token上架，也不会提供以下的服务。</li></ul><h3><span id="提供的服务">提供的服务</span></h3><ul><li>帮助Token做出合规的法律架构；</li><li>如果Token不可避免地要设计成Security(证券)， 他们会帮助Token设计成合规的Security；</li><li>提供合格的投资人，提供做平台、做KYC(充分了解你的客户)的服务。</li></ul><h2><span id="ics首次平台发售">ICS(首次平台发售)</span></h2><ul><li>币圈现在还处于混沌时代，合规不一定赚钱，赚钱不一定合规，还有巨大的风险。发行所不仅要合规，最重要的还需要有影响力，如上下游打通，一级二级市场打通去赚钱。</li><li>ICO通常的做法：设计一个智能合约，拿ETH兑换特定的Token。合约本身会锁定起、最大上限、转换消耗的效率，防止上下齐手人为的风险。</li><li>ICS（首次平台发售），国内币所转型的国外币所的常规做法，币很容易被销售出去，但是有一定的风险。因为你无法知道合约是否锁定，团队和机构是否会拿出来砸盘。虽然很先进，但是存在一定的风险。</li></ul><h1><span id="去中心化交易所">去中心化交易所</span></h1><h3><span id="三大交易所对比">三大交易所对比</span></h3><table><thead><tr><th>交易所</th><th>交易类型</th><th>下半年规划</th></tr></thead><tbody><tr><td>Kyber(KNC)</td><td>做的是ETH <em>on-chain</em>的交易</td><td>积极与多个国内外几十万用户的钱包、与法币厂商达成合作共识，达到去中心化交易所的运行效率。</td></tr><tr><td>OmiseGo(omg)</td><td>做的是部分的ETH <em>on-chain</em>的交易，只有在结算那部分才会<em>on-chain</em></td><td>与<em>prisma</em>合作，提升交易、支付的效率。</td></tr><tr><td>0x(ZRX)</td><td>做的是ETH <em>on-chain</em>的交易</td><td>倾向于将自身作为infrastructure(基础设施)销售出去，让更多交易所或者是想开交易所的人可以用0x拓展自己的币所。</td></tr></tbody></table><h3><span id="对于交易所的思考">对于交易所的思考</span></h3><p>交易所的本质在于交易速度和交易深度，交易所的发展方向应该侧重于提升这两个本质指标。所谓的交易所，其实就是要让资产快速流动起来，去不去中心化并不重要，去中心化会带来效率降低的影响，中心化虽说有效率上的提升，但也会有上下齐手的风险。</p><p>任何技术都有其pros-cons(优缺点)，我们要回归本质去思考，他们的团队有没有朝着本质的方向去前行。</p><h1><span id="对于区块链的思考">对于区块链的思考</span></h1><h3><span id="区块链产品的本质">区块链产品的本质</span></h3><p>区块链的本质就是一款能通信的数据库产品，它所能做到的，数据库加上网路通信也可以做到。</p><h3><span id="什么样的区块链产品值得投资">什么样的区块链产品值得投资</span></h3><h4><span id="思考出发点">思考出发点</span></h4><ul><li>这款区块链产品到底<strong>解决了现实世界中什么样的刚需性问题</strong>？</li><li>这款区块链产品在效率提升方面处于什么样的时间等级？是以day(天)计算的，还是以hour(小时)计算的，还是以min(分钟)计算的，还是以sec(秒)计算的。</li><li>它到底是在革谁的命？它提升的效率是不是现有产品方案的10倍甚至是100倍？</li></ul><h4><span id="成功的案例">成功的案例</span></h4><ul><li>为什么说BTC或ETH对跨境支付来说是一场革命？现在的跨境支付通常使用SWIFT模式，但是SWIFT模式的交易速度是以Day(天)为单位进行计算的，而BTC或ETH能够在几分钟或者一两个小时内完成交易。</li></ul><h4><span id="警惕的误区">警惕的误区</span></h4><ul><li>很多区块链产品号称有很多很多的功能，但是这些功能并没有解决实际的问题，解决刚需问题才会有价值，不要被这些功能迷惑，要思考本质到底是什么。</li></ul><h4><span id="理论基石">理论基石</span></h4><ul><li><a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/" target="_blank" rel="external">Jobs to be done</a>。推荐书籍：克雷顿·克里斯汀生《<a href="https://www.amazon.cn/dp/0062435612/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1513392848&amp;sr=8-1-fkmr0&amp;keywords=Competing+Against+Luck+%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external">Competing Against Luck</a>》/ 《<a href="http://www.books.com.tw/products/0010760251" target="_blank" rel="external">創新的用途理論：掌握消費者選擇，創新不必碰運氣</a>》</li><li>了解客户的purpose（意图）。创新不只是需要了解客户的需求，更要了解：顾客选择这个产品做什么？也就是要了解使用产品的真正用途，在什么情况下用，远胜过拼命改善产品的功能、特色。</li><li>好10倍的理论。消费者一般会对现有的solution（解决方案）会高估3倍以上，同样，创业者会高估自己做出来的产品比实际作出来的产品要好3倍以上。所以，新的产品一定要比现有的产品好 3 x 3 倍，也就是10倍以上，好一点没用，要好很多倍，才能够脱引而出。（这个和笑来老师说的要做远超第二的第一名道理一样，积累头部效应）</li><li>运用<a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/" target="_blank" rel="external">Jobs to be done</a>和<code>好10倍理论</code>，可以去判断哪一些产品其实是言过其实。</li></ul><h4><span id="对eos的几点疑虑">对EOS的几点疑虑</span></h4><p>ETH采用的是工作量证明（Proof of work）算法，需要运用矿工的算力，效率很低，最近被一只猫搞垮了。只能承载分级以上的效应，但是没法承载秒级以上的效应。EOS采用的是委托股权证明（Delegated Proof of Stake）算法，比ETH快很多，号称可以达到商业级的。</p><p>EOS的局限：</p><ul><li>本质上还只是一个公司币，EOS没有参加本次的Summit，国外的币圈不太关注EOS这个Token</li><li>EOS想要建立一个生态圈，要克服以下几个问题：<ul><li>有多少developer愿意用你，有多少developer愿意从ETH转到EOS，EOS是否符合10倍理论</li><li>很多人现在是靠着ETH赚钱的，比如ICO、开发智能合约、做相关的Service等等，整个Industry（产业）都是基于ETH的，EOS多大程度上能超越ETH，目前来看还是个疑问。</li></ul></li></ul><h1><span id="长线投资">长线投资</span></h1><p>本次分享的目的，是让大家通过国外经营的现状、还有Token的本质、还有技术圈分享的现况，让大家了解区块链投资是怎么样一回事。</p><p>很多人喜欢把专注力是放在短线上，这其实是很可惜的。</p><p>正确的做法应该是做长线，有些人认为自己的逃顶的功夫很厉害，但其实它并没有跑赢大盘，所谓的跑赢大盘，其实是能不能跑赢BTC，你的投资效应有没有超越BTC的涨幅呢？所以，你不应专注你投资的Coin涨了多少钱，而是应该专注Coin你有没有超越BTC的涨幅。</p><p>所以，想要做长线投资，一定要寻找到那些能跑赢BTC大盘的Coin。</p><h1><span id="qampa">Q&amp;A</span></h1><ol><li><p>Q：请问eos这种链内扩展方案还是雷电网络这种侧链扩展方案有前途？</p><p>A：这个不确定，这个要看区块链实际发展速度和实际的Case，ETH这边的发展速度有点慢，ETH如果要转成PoS，那会触及矿工的利益，矿工叛变不是闹着好玩的。</p></li><li><p>Q：区块链公司的淘汰周期一般是多久一轮呢？</p><p>A：这个不确定，其实行业里面也有一些空气币，一直造不出币，但是它的价格一直居高不下，主要因为这些币的众筹价格是和ETH绑定的，只要不落地就还会有希望，要说淘汰的话，可能就是跑路了~~~</p></li><li><p>Q：现在去中心化交易所的使用体验普遍对用户很不友好，真的是技术上很难改善吗？</p><p>A：1）去中心化交易所本身用的是on-chain上面的技术，也就是完成一个交易，你必须要先打钱到智能合约上面，还需要用矿工费发行广播，别人要买取之后，然后跟你进行交易，你才能把你的ETH拿出来， 广播一次要好几分钟，再变成去中心化的交易所，交易的速度远不如OTC。去中心化的交易所本质上没有什么革命，只是交易更加透明化了</p><p>2）区块链的代码不好写，一旦depoly就会永久执行，更新合约本身就是impossible或者是非常困难的3）绝大多数程序员都缺乏是产品能力，做出来的东西一般很难用。</p></li><li><p>Q：以太坊被一只猫就能搞瘫痪，未来以太坊会不会像市面上说的，用闪电、大都会等升级之后，解决它本身设计的缺陷，然后有非常大的前景？从而抗衡eos</p><p>A：是有可能的，但是我们现在不知道V神现在是在KTV唱歌呢还是在改Code，他的小伙伴们现在的进展如何，这些都很难说。但是我希望大家聚焦在区块链本质与技术上去看一个区块链的长期价值。</p></li><li><p>Q：是否可能创建一种机制限制项目方动用ICO募集到的资产?</p><p>A：这个主要看项目方本身的良知了。原本ICO的合约就会锁定团队的资金要绑定多久或者逐年解冻，比如 IPFS迟迟不发币，就是他们本身ICO的合约锁定的。但是如果走ICS，他拿出来的私募Token，有没有锁定起，甚至项目方本身有没有区块链工程师，这都是值得疑问的。</p></li><li><p>Q：基于区块链的游戏会大爆发吗？有这样的技术基础吗？</p><p>A：其实是有的，以太坊的猫如果只是一个单机游戏的话，大家可能玩一玩就算了，这只猫本身没什么价值，但是这个猫是建立在ETH上的，动用的ETH的价值，价格又那么贵，所以大家就会在上面玩。我不确实是否会爆发，我只能说这是一个很特殊的现象。</p></li><li><p>Q：老师能讲解一下，ETH、EOS和以后得dfinity三者的共同点和区别吗？</p><p>A：dfinity没有研究过，这里没法评论</p></li><li><p>Q：最近会发现跑不过BTC的币种越来越多，未来估计也是，接下来怎么选择大概率能跑赢比特币的众筹品种，有没有什么对于普通小白有效的策略？</p><p>A：看哪个品种的K线能跑赢BTC的，跑得过的就押，然后就放着不要管了，不要跟着别人追涨杀跌，你会死的很惨的</p></li><li><p>Q：区块链会对互联网进行一个怎样的革新？</p><p>A：区块链本质就是解决信任和交易效率的问题，你要看看区块链产品所解决的问题是不是用户的刚需</p></li><li><p>Q：后续的链圈是否会出现百链争鸣的情况？</p><p>A：现在就是这种情况了</p></li><li><p>Q：老师能否谈谈做为小散应对BTC分叉的策略？</p><p>A：不要贪图那些糖果~造成自己的资产损失，长期不断地买进，长期握着就行</p></li><li><p>Q：公司币什么都可以代币化，只要做好映射，如家里的房子，他们是如何做到映射的？</p><p>A：我一般都不会投资这种代币，我不知道他们是如何在技术上和法律上做映射的，所说，不懂不投。</p></li><li><p>Q：BTC一直在分叉，EHT也在分叉，分叉以后会不会成为一种主流模式？</p><p>A：这个已经是常态了，就看交易所支不支持分叉了，没有价值的链分叉还是没有价值。</p></li><li><p>Q：如何看待分叉币，这次分叉币真的能救BTC吗？</p><p>A：我目前没有看到能救BTC的分叉币，救BTC要从这三个方面去看：1）提高BTC的交易效率；2）降低BTC的耗能；3）不要破坏BTC的价值</p></li><li><p>Q：目前中国区块链（技术）行业与国外区块链（技术）行业相比落后多少？</p><p>A：国内的区块链技术和交易形态已经远远超过国外了</p></li><li><p>Q：怎么评估一个币种的长期价值？</p><p>A：1）看它的真正价值；2）看群众的期待价值；3）能否跑得过BTC</p></li><li><p>Q：除了交易所，还有那些真正落地的项目，能让我们相信2018年会是应用的落地年?</p><p>A：悲观地看2018年不会是应用的落地年，ETH巨慢，用它开发应用不可能，EOS号称很牛逼，但是它还没有被做出来，可能还是一个发币年</p></li><li><p>Q：区块链项目一定要发行代币吗？</p><p>A：不一定，只是发行代币比价容易筹集到资金</p></li><li><p>Q：郑老师，能预测一下，各种分叉币未来的结局吗？</p><p>A：没办法预测，这个才刚开始</p></li><li><p>Q：现在刚刚进去农业时代的逻辑仅仅就是大量的机构涌入吗？</p><p>A：逻辑就是，现在的链上面还没有真正的应用，ETH上的最大应用也只是ICO，没有人真正用ETH来开发一个可以用的东西</p></li><li><p>Q：小白怎么判断代码质量？</p><p>A：没办法判断代码质量，建议还是看谁可以跑赢BTC</p></li><li><p>Q：区块链的好多项目都是开源的，开源这种软件的开发模式，是否是未来大型可用软件欢迎的开发模式</p><p>A：现在就已经是这种模式了</p></li><li><p>Q：如何判断熊市来了？</p><p>A：当你在场外交易所买到币跟场内交易所买到币相差没多少的时候，就是熊市来了，如果价差很大，就表示是牛市</p></li><li><p>Q：以前两年一轮牛市，现在的熊市与牛市的周期老师如何看待？</p><p>A：差不2~3月的周期，因为现在有很多成熟部队进来打了，周期变化会越来越快，大涨大跌，曲线变化的频率会越来越高，后面会越来越难判断牛熊市</p></li><li><p>Q：区块链让人人都可以成为投资人，这种投资代币的模式会持续存在吗？未来会成为主流吗？</p><p>A：会持续存在。以前投资是要占股份的，占股份有一个问题是多数公司不希望控制权被流失，他们希望用股权换未来的利润，创始人只希望利润出让而不是股份出让。Token的方式是，创始人可以预先拿到未来的利润，率先进行扩张，再者就是区块链项目的中奖的倍数是跟天使轮挂钩的，Token结算比较快，通常5个月内就会拿到1000倍，但是天使投资通常要等到IPO之后，所以他是一个比较没有效率的方式。是否能成为主流投资方式，就要看法规了，比如Security这一块就是全世界正在解决的</p></li><li><p>Q：老师，DPOS和闪电网络能解决BTC的交易速度问题吗？</p><p>A：BTC如果用DPOS的话，这个主要开始看矿工，BTC从POW换成DPOS，会触及矿工的利益</p></li><li><p>Q：老师，1月在旧金山举办的中美区块链大会值不值得参加？</p><p>A：唯有认知升级，你的投资能力，你的赚钱能力才能得到升级，与其拿这些钱去压小币，倒不如去升级自己的大脑和认识</p></li></ol><p>名词解析：</p><ul><li>SEC：美国证券交易委员会（U.S. Securities and Exchange Commission）</li><li>on-chain交易：<a href="https://steemit.com/cn-cryptocurrency/@cifer/on-chain-off-chain" target="_blank" rel="external">链上交易</a></li><li>SWIFT：Society for Worldwide Interbank Financial Telecommunication（环球同业银行金融电讯协会）</li></ul><p>参考资料：</p><ul><li><a href="http://attach.i7years.com/attach/treatise.doc" target="_blank" rel="external">美國證券法規上「證券」之重要判斷原則</a></li><li><a href="https://www.linkedin.com/pulse/20141125143442-132518611-what-is-a-security-the-howey-test-and-reves-test/" target="_blank" rel="external">What Is A Security? The Howey Test And Reves Test</a></li><li><a href="http://www.ftchinese.com/story/001073960?full=y" target="_blank" rel="external">ICO：如何监管法外之地？</a></li></ul><h1><span id="最后">最后</span></h1><h5><span id="otcbtc">OTCBTC</span></h5><p>推荐xdite创办的最好用户的场外交易平台，没有之一</p><blockquote><p>OTCBTC 是目前最流畅、最靠谱、最好用的场外交易平台，支持支付宝、微信、银行卡支付购买BTC、ETH、EOS、USDT、QTUM、ZEC、GXS、BCH 等数字币。现在注册，即可领取比特币红包！ <a href="https://otcbtc.com/referrals/W7YEARS" target="_blank" rel="external">https://otcbtc.com/referrals/W7YEARS</a></p></blockquote><h5><span id="直播地址">直播地址</span></h5><p><img src="https://img.i7years.com/blog/Token%20%20submmit.jpg" alt="Token Summit QRcode"></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Token </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++学习教程]]></title>
      <url>/posts/258a2097.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今年对<a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE" target="_blank" rel="external">区块链</a>技术产生了浓厚的兴趣，学习c++编程主要的目的在于想去研究下<a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="external">bitcoin</a>、<a href="https://github.com/eosio/eos" target="_blank" rel="external">eos</a>等区块链的源代码，弄懂他们的运行机制及原理</p><a id="more"></a><h1><span id="学习教程">学习教程</span></h1><blockquote><p>GitHub: <a href="https://github.com/wangweiX/c-learning" target="_blank" rel="external">https://github.com/wangweiX/c-learning</a></p></blockquote><h3><span id="基础">基础</span></h3><ul><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step01" target="_blank" rel="external">Step01 - Initialization project</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step02" target="_blank" rel="external">Step02 - Variables, initialization, and assignment</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step03" target="_blank" rel="external">Step03 - Creating a Basic Calculator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step04" target="_blank" rel="external">Step04 - If / else Statement</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step05" target="_blank" rel="external">Step05 - Function</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step06" target="_blank" rel="external">Step06 - Object-oriented programming(OOP)</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step07" target="_blank" rel="external">Step07 - Placing Classes in Separate Files</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step08" target="_blank" rel="external">Step08 - While、for、do while Loops</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step09" target="_blank" rel="external">Step09 - Assignment and Increment Operators</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step10" target="_blank" rel="external">Step10 - Making a Stock Market Simulator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step12" target="_blank" rel="external">Step11 - Switch</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step12" target="_blank" rel="external">Step12 - Logical Operators</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step13" target="_blank" rel="external">Step13 - Random Number Generator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step14" target="_blank" rel="external">Step14 - Default parameters</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step15" target="_blank" rel="external">Step15 - Unary Scope Resolution Operator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step16" target="_blank" rel="external">Step16 - Function Overloading</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step17" target="_blank" rel="external">Step17 - Recursion</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step18" target="_blank" rel="external">Step18 - Array</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step19" target="_blank" rel="external">Step19 - Multidimensional Arrays</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step20" target="_blank" rel="external">Step20 - Pointer</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step21" target="_blank" rel="external">Step21 - Passing arguments by value / reference / address</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step22" target="_blank" rel="external">Step22 - Sizeof</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step23" target="_blank" rel="external">Step23 - Pointers and Math</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step24" target="_blank" rel="external">Step24 - Arrow Member Selection Operator(-&gt;)</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step25" target="_blank" rel="external">Step25 - Destructors</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step26" target="_blank" rel="external">Step26 - Const class objects and member functions</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step27" target="_blank" rel="external">Step27 - Constructor member initializer lists</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step28" target="_blank" rel="external">Step28 - Object relationships - Composition</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step29" target="_blank" rel="external">Step29 - Friend functions and classes</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(1) | 安装部署]]></title>
      <url>/posts/181733fc.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><p>本篇文章教你如何本地安装EOS。</p><a id="more"></a><h3><span id="eosio版本">EOSIO版本</span></h3><ul><li>Beginning build version: 1.2</li><li>2018年 4月 9日 星期一 06时13分18秒 UTC</li><li>git head id: 124c62d0e1b3974bcd551b885518ff05301b39c9</li><li>Current branch: * master</li><li>ARCHITECTURE: Darwin</li></ul><h3><span id="系统环境">系统环境</span></h3><ul><li>OS name: Darwin</li><li>OS Version: 10.13.4</li></ul><h3><span id="执行构建脚本">执行构建脚本</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/eosio/eos --recursive</span><br><span class="line">$ cd eos</span><br><span class="line">$ ./eosio_build.sh</span><br></pre></td></tr></table></figure>
<p>出现如下信息，表示构建成功：</p>
<p><img src="https://img.i7years.com/blog/eos_build_01.png" alt=""></p>
<h3><span id="验证">验证</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/bin/mongod -f /usr/local/etc/mongod.conf &amp; cd /Users/wangwei/eos/build; make test</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Test project /Users/wangwei/eos/build</span><br><span class="line">      Start  <span class="number">1</span>: validate_simple.token_abi</span><br><span class="line"> <span class="number">1</span>/<span class="number">26</span> Test  <span class="comment">#1: validate_simple.token_abi ...........   Passed    1.05 sec</span></span><br><span class="line">      Start  <span class="number">2</span>: validate_eosio.token_abi</span><br><span class="line"> <span class="number">2</span>/<span class="number">26</span> Test  <span class="comment">#2: validate_eosio.token_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">3</span>: validate_eosio.msig_abi</span><br><span class="line"> <span class="number">3</span>/<span class="number">26</span> Test  <span class="comment">#3: validate_eosio.msig_abi .............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">4</span>: validate_multi_index_test_abi</span><br><span class="line"> <span class="number">4</span>/<span class="number">26</span> Test  <span class="comment">#4: validate_multi_index_test_abi .......   Passed    0.09 sec</span></span><br><span class="line">      Start  <span class="number">5</span>: validate_eosio.system_abi</span><br><span class="line"> <span class="number">5</span>/<span class="number">26</span> Test  <span class="comment">#5: validate_eosio.system_abi ...........   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">6</span>: validate_identity_abi</span><br><span class="line"> <span class="number">6</span>/<span class="number">26</span> Test  <span class="comment">#6: validate_identity_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">7</span>: validate_identity_test_abi</span><br><span class="line"> <span class="number">7</span>/<span class="number">26</span> Test  <span class="comment">#7: validate_identity_test_abi ..........   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">8</span>: validate_currency_abi</span><br><span class="line"> <span class="number">8</span>/<span class="number">26</span> Test  <span class="comment">#8: validate_currency_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">9</span>: validate_stltest_abi</span><br><span class="line"> <span class="number">9</span>/<span class="number">26</span> Test  <span class="comment">#9: validate_stltest_abi ................   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">10</span>: validate_exchange_abi</span><br><span class="line"><span class="number">10</span>/<span class="number">26</span> Test <span class="comment">#10: validate_exchange_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">11</span>: validate_test.inline_abi</span><br><span class="line"><span class="number">11</span>/<span class="number">26</span> Test <span class="comment">#11: validate_test.inline_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">12</span>: validate_asserter_abi</span><br><span class="line"><span class="number">12</span>/<span class="number">26</span> Test <span class="comment">#12: validate_asserter_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">13</span>: validate_infinite_abi</span><br><span class="line"><span class="number">13</span>/<span class="number">26</span> Test <span class="comment">#13: validate_infinite_abi ...............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">14</span>: validate_proxy_abi</span><br><span class="line"><span class="number">14</span>/<span class="number">26</span> Test <span class="comment">#14: validate_proxy_abi ..................   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">15</span>: validate_test_api_abi</span><br><span class="line"><span class="number">15</span>/<span class="number">26</span> Test <span class="comment">#15: validate_test_api_abi ...............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">16</span>: validate_test_api_mem_abi</span><br><span class="line"><span class="number">16</span>/<span class="number">26</span> Test <span class="comment">#16: validate_test_api_mem_abi ...........   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">17</span>: validate_test_api_db_abi</span><br><span class="line"><span class="number">17</span>/<span class="number">26</span> Test <span class="comment">#17: validate_test_api_db_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">18</span>: validate_test_api_multi_index_abi</span><br><span class="line"><span class="number">18</span>/<span class="number">26</span> Test <span class="comment">#18: validate_test_api_multi_index_abi ...   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">19</span>: validate_eosio.bios_abi</span><br><span class="line"><span class="number">19</span>/<span class="number">26</span> Test <span class="comment">#19: validate_eosio.bios_abi .............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">20</span>: validate_noop_abi</span><br><span class="line"><span class="number">20</span>/<span class="number">26</span> Test <span class="comment">#20: validate_noop_abi ...................   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">21</span>: validate_dice_abi</span><br><span class="line"><span class="number">21</span>/<span class="number">26</span> Test <span class="comment">#21: validate_dice_abi ...................   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">22</span>: chain_test_binaryen</span><br><span class="line"><span class="number">22</span>/<span class="number">26</span> Test <span class="comment">#22: chain_test_binaryen .................   Passed  286.59 sec</span></span><br><span class="line">      Start <span class="number">23</span>: chain_test_wavm</span><br><span class="line"><span class="number">23</span>/<span class="number">26</span> Test <span class="comment">#23: chain_test_wavm .....................   Passed  344.66 sec</span></span><br><span class="line">      Start <span class="number">24</span>: nodeos_run_test</span><br><span class="line"><span class="number">24</span>/<span class="number">26</span> Test <span class="comment">#24: nodeos_run_test .....................   Passed   48.39 sec</span></span><br><span class="line">      Start <span class="number">25</span>: p2p_dawn515_test</span><br><span class="line"><span class="number">25</span>/<span class="number">26</span> Test <span class="comment">#25: p2p_dawn515_test ....................   Passed    1.13 sec</span></span><br><span class="line">      Start <span class="number">26</span>: nodeos_run_test-mongodb</span><br><span class="line"><span class="number">26</span>/<span class="number">26</span> Test <span class="comment">#26: nodeos_run_test-mongodb .............   Passed  125.22 sec</span></span><br><span class="line"></span><br><span class="line"><span class="number">100</span>% tests passed, <span class="number">0</span> tests failed out of <span class="number">26</span></span><br><span class="line"></span><br><span class="line">Total Test time (real) = <span class="number">809.08</span> sec</span><br></pre></td></tr></table></figure>
<h3><span id="安装">安装</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd build</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<p>安装完成之后，在 <code>/usr/local/bin</code> 下会有 <code>nodeos</code>、<code>cleos</code>、<code>keosd</code> 三个工具。</p>
<h2><span id="配置">配置</span></h2><ul>
<li><code>nodeos</code>配置文件：<code>~/Library/Application Support/eosio/nodeos/config/config.ini</code></li>
<li><code>keosd</code>配置文件：<code>~/eosio-wallet/config.ini</code></li>
</ul>
<h3><span id="介绍">介绍</span></h3><ul>
<li><code>nodeos</code> (node + eos = nodeos) - 用于通过配置插件来运行节点的核心EOSIO节点守护程序。例如用于区块的生产，专用API端点和本地开发。</li>
<li><code>cleos</code> (cli + eos = cleos) - 与主链交互以及管理钱包的命令行工具界面。</li>
<li><code>keosd</code> (key + eos = keosd) - 将EOSIO密钥安全存储在钱包中的组件。</li>
</ul>
<p>这些组件之间的基本关系如下图所示。 在接下来的部分中，您将构建EOSIO组件，并将它们部署在单个主机，单节点测试网络（testnet）配置中。</p>
<p><img src="https://img.i7years.com/blog/8f31cfd-Basic-EOSIO-System-Architecture.png" alt="Basic-EOSIO-System-Architecture"></p>
<h3><span id="参考资料">参考资料</span></h3><ul>
<li><a href="https://developers.eos.io/eosio-nodeos/docs/install-nodeos" target="_blank" rel="external">https://developers.eos.io/eosio-nodeos/docs/install-nodeos</a></li>
<li><a href="https://developers.eos.io/eosio-nodeos/docs/" target="_blank" rel="external">https://developers.eos.io/eosio-nodeos/docs/</a></li>
</ul>
<p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建系列指南]]></title>
      <url>/posts/b7749504.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="说明">说明</span></h1><p>本系列文章主要用来记录自己搭建博客的过程，分享出来给需要的朋友。有几点说明需要注意：</p><ul><li>如果你是开发者或者说是对编程熟悉的朋友，可以直接忽略此声明；</li><li>如果是非开发者或是对<strong>命令行</strong>毫无概念，但是又想搭建自己博客的朋友，在依照此系列文章搭建博客时，务必保证一点：<strong>不要一上来就问这些命令行是干什么的，请先直接按照文章的引导一步一步去执行，直到把目标达成，建立起成就感。之后，再回过头去Google一下这些命令行是干什么的，先模仿再深究，才是正确的学习方式，否则很容易从入门到放弃</strong>。</li><li>此文章只适用于<strong>Mac环境</strong>。</li><li>虽说网上的有了很多关于如何通过Hexo搭建博客的指南，但我还是想用更加清晰明了的方式再做一遍梳理，希望我的文章能够给你简单、清晰的感觉。</li></ul><a id="more"></a><h1><span id="准备">准备</span></h1><ul><li><p>命令行工具<strong>terminal</strong>熟悉</p><p><img src="https://img.i7years.com/terminal_1.png" alt="WX20170604-145706@2x"></p></li><li><p>前往<a href="https://github.com/" target="_blank" rel="external">GitHub</a>注册一个账号，后面有用</p></li><li><p>打开Terminal，下面的命令，安装后续要用到各种工具及环境。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash &lt;(curl -s https://raw.githubusercontent.com/monfresh/laptop/master/laptop)</span><br></pre></td></tr></table></figure>
<p>演示视频：<a href="https://monfresh.wistia.com/medias/k8zxt0vj7w" target="_blank" rel="external">https://monfresh.wistia.com/medias/k8zxt0vj7w</a></p>
<p>参考文档：<a href="https://github.com/monfresh/laptop" target="_blank" rel="external">https://github.com/monfresh/laptop</a></p>
</li>
</ul>
<h1><span id="指南">指南</span></h1><ol>
<li>如何在自己电脑上搭建好博客，建立起初步的成就感。<a href="https://wangwei.one/posts/c5e43a28.html">https://wangwei.one/posts/c5e43a28.html</a></li>
<li>如何将自己的博客放到网上，让别人也能看到。<a href="https://wangwei.one/posts/f5f2d6f0.html">https://wangwei.one/posts/f5f2d6f0.html</a></li>
<li>修改博客的名称、logo、ico、slogan、主题等配置。<a href="https://wangwei.one/posts/b8ec75a2.html">https://wangwei.one/posts/b8ec75a2.html</a></li></ol>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（三）]]></title>
      <url>/posts/b8ec75a2.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本篇文章介绍Hexo博客的一些主题更换、基本配置以及一些好用的插件安装</p></blockquote><a id="more"></a><h1><span id="主题更换">主题更换</span></h1><blockquote><ul><li>这里以目前我比较喜欢的主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>为例。更多主题：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></li><li>NexT官方文档：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></li><li>NexT图标库：<a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></li></ul></blockquote><h2><span id="下载">下载</span></h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入博客根目录</span></span><br><span class="line">$ cd myBlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新主题文件夹</span></span><br><span class="line">$ mkdir themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h2><span id="安装">安装</span></h2><ul>
<li>修改主配置文件<code>_config.yml</code>中的<code>theme</code>，设置为<code>next</code>；</li>
<li>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>查看效果；</li>
</ul>
<h2><span id="配置">配置</span></h2><blockquote>
<p>官方文档：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a></p>
</blockquote>
<h3><span id="网站ico设置">网站ico设置</span></h3><ul>
<li>下载icon资源：<a href="https://www.flaticon.com" target="_blank" rel="external">https://www.flaticon.com</a></li>
<li>将下载到的png转化为 <code>16 x 16</code>、<code>32 x 32</code>、<code>180 x 180</code>三个版本</li>
<li>将转化后的png以及下载的svg文件放到<code>myBlog/source/</code>目录下</li>
<li>修改<code>next/_config.yml</code>中<code>favicon</code>项的图片路劲配置<ul>
<li>删除<code>/images</code>前缀</li>
<li>更新图片名称</li>
</ul>
</li>
<li>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>查看效果</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To get or check favicons visit: https://realfavicongenerator.net</span></span><br><span class="line"><span class="comment"># Put your favicons into `hexo-site/source/` (recommend) or `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default NexT favicons placed in `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"><span class="comment"># And if you want to place your icons in `hexo-site/source/` root directory, you must remove `/images` prefix from pathes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example, you put your favicons into `hexo-site/source/images` directory.</span></span><br><span class="line"><span class="comment"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/favicon-16x16-code.png</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/favicon-32x32-code.png</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/favicon-180x180-code.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<h3><span id="菜单设置">菜单设置</span></h3><h4><span id="创建tags页面">创建Tags页面</span></h4><ul>
<li><p>新建名为<code>tags</code>的页面</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型为<code>tags</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>tags</code>到主题配置<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="创建categories页面">创建Categories页面</span></h4><ul>
<li><p>新建名为<code>categories</code>的页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型为<code>categories</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>categories</code>到主题配置<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="配置菜单">配置菜单</span></h4>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#  commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3><span id="侧边栏设置">侧边栏设置</span></h3><h4><span id="设置社交链接">设置社交链接</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/wangweiX</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  StackOverflow:</span> <span class="attr">https://stackoverflow.com/users/8892704/wangwei</span> <span class="string">||</span> <span class="string">stack-overflow</span></span><br><span class="line"><span class="attr">  Weibo:</span> <span class="attr">http://weibo.com/wangweijava</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://twitter.com/wangwei_hz</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line"><span class="attr">  Douban:</span> <span class="attr">https://www.douban.com/people/wwxzwj</span> <span class="string">||</span> <span class="string">film</span></span><br><span class="line"><span class="attr">  Linkedin:</span> <span class="attr">http://www.linkedin.com/in/wangweix/</span> <span class="string">||</span> <span class="string">linkedin</span></span><br><span class="line"><span class="attr">  Podcast:</span> <span class="attr">http://www.ximalaya.com/53432374/profile</span> <span class="string">||</span> <span class="string">podcast</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:w7years@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment"># 知乎: https://www.zhihu.com/people/Ww-1991</span></span><br><span class="line">  <span class="comment"># 简书: http://www.jianshu.com/users/a04d5c200045/timeline</span></span><br><span class="line">  <span class="comment"># Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment"># VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment"># Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment"># Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment"># YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment"># FB Page: https://www.facebook.com/wangwei1991 || facebook</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4><span id="设置友情链接">设置友情链接</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  howtodoinjava:</span> <span class="attr">https://howtodoinjava.com/</span></span><br><span class="line">  <span class="string">美团点评:</span> <span class="attr">https://tech.meituan.com/</span></span><br><span class="line">  <span class="string">阮一峰:</span> <span class="attr">http://www.ruanyifeng.com/blog/</span></span><br></pre></td></tr></table></figure>
<h4><span id="设置侧边栏头像">设置侧边栏头像</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="attr">https://img.i7years.com/my7year-8.jpg</span></span><br></pre></td></tr></table></figure>
<h4><span id="设置微信订阅amp打赏">设置微信订阅&amp;打赏</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="attr">https://img.i7years.com/my7year-8.jpg</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">互相学习</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">请我喝杯咖啡吧~</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="attr">https://img.i7years.com/pay2Wechat.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="attr">https://img.i7years.com/pay2Alipay.png</span></span><br><span class="line"><span class="attr">bitcoin:</span> <span class="attr">https://img.i7years.com/wallet/rec_bitcoin.png</span></span><br></pre></td></tr></table></figure>
<h3><span id="第三方插件配置">第三方插件配置</span></h3><h4><span id="站内搜索">站内搜索</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4><span id="站点pvuv统计">站点PV/UV统计</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">本站访客数</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span> <span class="string">人次</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">本站总访问量</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">本文总阅读量</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span> <span class="string">次</span></span><br></pre></td></tr></table></figure>
<h4><span id="分享插件">分享插件</span></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment">#duoshuo_share: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NeedMoreShare2</span></span><br><span class="line"><span class="comment"># This plugin is a pure javascript sharing lib which is useful in China.</span></span><br><span class="line"><span class="comment"># See: https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="comment"># Also see: https://github.com/DzmVasileusky/needShareButton</span></span><br><span class="line"><span class="comment"># iconStyle: default | box</span></span><br><span class="line"><span class="comment"># boxForm: horizontal | vertical</span></span><br><span class="line"><span class="comment"># position: top / middle / bottom + Left / Center / Right</span></span><br><span class="line"><span class="comment"># networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,</span></span><br><span class="line"><span class="comment">#           Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,</span></span><br><span class="line"><span class="comment">#           Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,</span></span><br><span class="line"><span class="comment">#           Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailru</span></span><br><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">bottomCenter</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Mailto,Wechat,Weibo,QQZone,Twitter,Facebook,Linkedin,Evernote,Douban,GooglePlus,Reddit</span></span><br><span class="line"><span class="attr">  float:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">middleRight</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Mailto,Wechat,Weibo,QQZone,Twitter,Facebook,Linkedin,Evernote,Douban,GooglePlus,Reddit</span></span><br></pre></td></tr></table></figure>
<h4><span id="评论插件">评论插件</span></h4><h5><span id="disqus">disqus</span></h5><ol>
<li><p>注册账号：<a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a></p>
</li>
<li><p>添加站点——&gt; 获取<code>shortname</code>，请参考：<a href="http://www.jianshu.com/p/c4f65ebe23ad" target="_blank" rel="external">http://www.jianshu.com/p/c4f65ebe23ad</a></p>
</li>
<li><p>修改主题配置文件<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：disqus需要翻墙才能使用，解决方案：<a href="https://github.com/ciqulover/disqus-proxy" target="_blank" rel="external">https://github.com/ciqulover/disqus-proxy</a></p>
</li>
</ol>
<h5><span id="gitment">gitment</span></h5><ol>
<li><p>安装插件<a href="https://github.com/imsun/gitment" target="_blank" rel="external">gitment</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save gitment</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册OAuth Application</p>
<p><a href="https://github.com/settings/applications/new" target="_blank" rel="external">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <code>https://imsun.net</code>）。</p>
<p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p>
</li>
<li><p>修改主题配置文件<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="comment"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class="line"><span class="comment"># You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化评论</p>
<p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第三步所填 repo 的 owner），点击初始化按钮。</p>
<p>之后其他用户即可在该页面发表评论。</p>
<p>​</p>
</li>
</ol>
<h4><span id="统计分析">统计分析</span></h4><h5><span id="google统计">Google统计</span></h5><ol>
<li><p>注册账号：<a href="https://analytics.google.com" target="_blank" rel="external">https://analytics.google.com</a></p>
</li>
<li><p>新增账号信息及网站信息，获取 Google Analytics ID，形如：UA-xxxxxxxxx-1</p>
</li>
<li><p>修改主题配置文件，设置Google Analytics ID</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-xxxxxxxxx-1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5><span id="tencent统计">tencent统计</span></h5><ol>
<li><p>注册账号：<a href="http://mta.qq.com/" target="_blank" rel="external">http://mta.qq.com/</a></p>
</li>
<li><p>创建H5应用，获得AppId</p>
</li>
<li><p>修改主题配置文件，设置Tencent MTA ID</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tencent MTA ID</span></span><br><span class="line"><span class="attr">tencent_mta:</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5><span id="cnzz-统计">cnzz 统计</span></h5><ol>
<li><p>注册账号：<a href="http://www.umeng.com/" target="_blank" rel="external">http://www.umeng.com/</a></p>
</li>
<li><p>添加站点：<a href="http://web.umeng.com/main.php?c=site&amp;a=show" target="_blank" rel="external">http://web.umeng.com/main.php?c=site&amp;a=show</a></p>
</li>
<li><p>获取统计代码中的站点ID</p>
</li>
<li><p>修改主题配置文件，设置cnzz_siteid</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CNZZ count</span></span><br><span class="line"><span class="comment">#cnzz_siteid:</span></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h5><span id="baidu-统计">baidu 统计</span></h5><ol>
<li><p>注册账号：<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">https://tongji.baidu.com/web/welcome/login</a></p>
</li>
<li><p>添加站点</p>
</li>
<li><p>获取统计代码中的站点ID</p>
</li>
<li><p>修改主题配置文件，设置Baidu Analytics ID</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h4><span id="seo优化">SEO优化</span></h4><h5><span id="安装站点地图">安装站点地图</span></h5><ol>
<li><p>站点地图</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># google</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># baidu</span></span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改站点配置</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h5><span id="google">Google</span></h5><ol>
<li><p>使用Google账号登录：<a href="https://www.google.com/webmasters" target="_blank" rel="external">https://www.google.com/webmasters</a></p>
</li>
<li><p>添加属性 ——&gt; 输入网站地址</p>
</li>
<li><p>google验证网页所有权，选择HTML Tag验证方式，获取<code>content</code>的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置，设置<code>google_site_verification</code>，构建站点并发布</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>验证通过，进入控制台——&gt; 抓取 ——&gt; 站点地图 ——提交站点网址 sitemap.xml</p>
</li>
</ol>
<h5><span id="百度">百度</span></h5><ol>
<li><p>注册百度资源平台账号：<a href="http://ziyuan.baidu.com/" target="_blank" rel="external">http://ziyuan.baidu.com/</a></p>
</li>
<li><p>网站支持 —&gt; 数据引入 —&gt;  MIP引入 —&gt; 数据提交，获取<code>token</code></p>
<p><img src="https://img.i7years.com/blog/hexo_setting_1.png" alt="hexo_setting_1"></p>
</li>
<li><p>到Hexo根目录下，安装插件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件<code>_config.yml</code>，开启百度自动推送：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo主配置文件<code>_config.yml</code>，在文末添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span> <span class="comment">## 提交最新的一个链接</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">www.hui-wang.info</span> <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">your_token</span> <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo主配置文件<code>_config.yml</code>，修改<code>deploy</code>项配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:wangweiX/tech.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4><span id="其他插件配置">其他插件配置</span></h4><h5><span id="文件压缩">文件压缩</span></h5><ol>
<li><p>安装插件<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="external">hexo-all-minifier</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo配置文件<code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5><span id="文章路径优化">文章路径优化</span></h5><ol>
<li><p>安装插件<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="external">hexo-abbrlink</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo配置文件<code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo配置文件<code>_config.yml</code>，更新<code>permalink</code>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5><span id="字数统计">字数统计</span></h5><ol>
<li><p>安装插件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # Node 版本7.6.0之后</span></span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node 版本7.6.0之前,请安装 2.x 版本 (Node.js v7.6.0 and previous)</span></span><br><span class="line">npm install hexo-wordcount@<span class="number">2</span> --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改NexT配置文件<code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5><span id="流程图">流程图</span></h5><ul>
<li>UML：<a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="external">https://github.com/bubkoo/hexo-filter-sequence</a></li>
<li>Flowchat：<a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="external">https://github.com/bubkoo/hexo-filter-flowchart</a></li>
</ul>
<h5><span id="其他插件">其他插件</span></h5><blockquote>
<p>官方：<a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Plugins</a></p>
</blockquote>
<ul>
<li>豆瓣：<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="external">https://github.com/mythsman/hexo-douban</a></li>
<li>音乐：<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="external">https://github.com/MoePlayer/hexo-tag-aplayer</a></li>
<li>disqus代理：<a href="https://github.com/ciqulover/disqus-proxy" target="_blank" rel="external">https://github.com/ciqulover/disqus-proxy</a></li>
<li>路径跳转：<a href="https://github.com/hexojs/hexo-generator-alias" target="_blank" rel="external">https://github.com/hexojs/hexo-generator-alias</a></li>
<li>导航目录生成：<a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="external">https://github.com/bubkoo/hexo-toc</a></li>
</ul>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://segmentfault.com/a/1190000009009697" target="_blank" rel="external">https://segmentfault.com/a/1190000009009697</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（二）]]></title>
      <url>/posts/f5f2d6f0.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 <a href="http://t.cn/RSSaqp7" target="_blank" rel="external">上篇</a> 文章中我们学会了</p><ul><li>如何在自己的电脑搭建博客</li><li>如何使用Markdown语法写博文</li></ul><p>接下来，我们学习如何让别人也能访问你的博客，这就需要我们将博客放到一个全世界人民都能访问的地方去——<a href="https://github.com/" target="_blank" rel="external">GitHub</a>。</p><a id="more"></a><p><img src="https://img.i7years.com/bolg/hexo_public.png" alt="Untitled"></p><blockquote><p>注意：在进行下面的步骤前，请确保你已经按照 <a href="http://t.cn/RSSaUQt" target="_blank" rel="external">http://t.cn/RSSaUQt</a> 安装好了环境。否则，你将无法完成后续的步骤。</p></blockquote><h2><span id="了解github-pages">了解GitHub Pages</span></h2><blockquote><p>GitHub Pages is a static site hosting service.（静态站点托管服务）</p><p>GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository.</p><p>详见：</p><ul><li><a href="http://t.cn/RI9hsVm" target="_blank" rel="external">http://t.cn/RI9hsVm</a></li><li><a href="http://t.cn/zjkgDLe" target="_blank" rel="external">http://t.cn/zjkgDLe</a></li></ul></blockquote><h2><span id="创建github仓库">创建GitHub仓库</span></h2><blockquote><p>创建GitHug仓库，用于存放自己电脑上的博客站点文件，供他人访问。</p></blockquote><h5><span id="登录github">登录GitHub</span></h5><ul><li>账号准备，见 <a href="http://t.cn/RSSaUQt" target="_blank" rel="external">http://t.cn/RSSaUQt</a></li><li>登录地址：<a href="https://github.com" target="_blank" rel="external">https://github.com</a></li></ul><h5><span id="创建github-pages仓库">创建GitHub Pages仓库</span></h5><ul><li><p>访问 <a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a></p><p><img src="https://img.i7years.com/blog/newGitHug.png" alt="newGitHug"></p></li></ul><ul><li><p>创建仓库(Repository name)</p><p><strong>注意</strong>：Repository name 的命名格式：<code>username.github.io</code>，其中username为你的github登录的用户名。例如：我的github的登录名为BorderTravelerX，那么我的GitHub Pages仓库名称为<code>BorderTravelerX.github.io</code>，如图（*为必填）：</p><p><img src="https://img.i7years.com/bolg/createRep.png" alt=""></p></li><li><p>获取GitHub Pages仓库地址，后面有用。</p><blockquote><p>地址形式：<code>git@github.com:usernam/username.github.io.git</code></p></blockquote><p><img src="https://img.i7years.com/bolg/copyadress.png" alt="copyadress"></p></li></ul><p>​</p><h5><span id="添加ssh公钥">添加SSH公钥</span></h5><ul><li><p>查询本地ssh公钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat  ~/.ssh/id_rsa.pub    <span class="comment"># 查询用户主目录下的</span></span><br><span class="line">$ ssh-rsa AAAAB3NzaC1yc2EA4RKxvgPztikVj/YaBXR+AiZPDCpJGh752kw3NMH+lrNhAR5ld919lC4RKxvgPztikip3tbKdFuBgL0CT15JqNB7VIN+kGEN7ggczSAF12PncUVj/YaBXR+AiZPDCpJGhuBK6B3MDIwRpZZWtKcaStJ2Y4CwbsTGFy0WRdyeCWXfXZbyvLw3gMJy9XvB01uPpLcrrm79nDKFkqz5h2DTj7f7h294FtR9XQJH5HoO9bDZdMiEckkBBHaPz4cV8kvjqFxy== wangwei@gmail.com  		    <span class="comment"># 这是一个示例公钥</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>登录Github ——&gt; 点击头像 ——&gt; Setting ——&gt; SSH and GPG keys ——&gt; New SSH Key ——&gt;  将上一步查询到的公钥复制到Key文本框中，并填好Title(标题，按照自己喜好)——&gt; Add SSH Key</p>
<p><img src="https://img.i7years.com/blog/sshkey.png" alt="sshkey"></p>
</li>
</ul>
<h2><span id="上传博客文件">上传博客文件</span></h2><ol>
<li>修改<code>hexo</code>配置<code>_config.yml</code>文件</li>
</ol>
<ul>
<li><p>打开 <code>myBlog</code>文件夹下的<code>_config.yml</code>文件。</p>
<blockquote>
<p>myBlog 为你的hexo目录地址</p>
</blockquote>
</li>
<li><p>配置<code>deploy</code>项，替换 <code>repo</code>为你的实际仓库地址。</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:usernam/username.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>安装git插件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传博客文件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog							<span class="comment"># 进入博客目录</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d	  <span class="comment"># 重新生成博客文件并上传至GitHub</span></span><br><span class="line"></span><br><span class="line">等待出现如下信息，说明上传成功</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">[master <span class="number">8</span>af93cc] Site updated: <span class="number">2017</span>-<span class="number">06</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">14</span>:<span class="number">59</span></span><br><span class="line"> <span class="number">11</span> files changed, <span class="number">95</span> insertions(+), <span class="number">87</span> deletions(-)</span><br><span class="line"> rewrite content.json (<span class="number">88</span>%)</span><br><span class="line"> rewrite index.html (<span class="number">61</span>%)</span><br><span class="line"> rewrite <span class="string">"\344\270\252\344\272\272\345\215\232\345\256\242\346\220\255\345\273\272\346\214\207\345\215\227\357\274\210\344\272\214\357\274\211.html"</span> (<span class="number">95</span>%)</span><br><span class="line">To https://github.com/BorderTravelerX/bordertravelerx.github.io.git</span><br><span class="line"> + c9d2efe...<span class="number">8</span>af93cc HEAD -&gt; master (forced update)</span><br><span class="line">Branch master set up to track remote branch master from https://github.com/BorderTravelerX/bordertravelerx.github.io.git.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器访问新的博客地址：username.github.io，如果能看到和你本地一样的页面，恭喜你，上传成功。</p>
<blockquote>
<p>注意：username.github.io 为你的实际仓库地址</p>
</blockquote>
</li>
</ol>
<h2><span id="同步github仓库">同步Github仓库</span></h2><p>如果你的博客最终是部署到服务器上的，并且希望 <code>username.github.io</code> 仓库有代码更新时，服务器上会自动执行<code>git pull</code> 命令来同步代码。请参考：</p>
<ul>
<li><a href="https://github.com/olipo186/Git-Auto-Deploy" target="_blank" rel="external">https://github.com/olipo186/Git-Auto-Deploy</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（一）]]></title>
      <url>/posts/c5e43a28.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文主要介绍如何在自己的电脑上搭建博客系统，先建立小小的成就感</p><p>系列文章：<a href="http://t.cn/RSSaUQt" target="_blank" rel="external">http://t.cn/RSSaUQt</a></p></blockquote><a id="more"></a><h2><span id="环境准备">环境准备</span></h2><h3><span id="安装nodejs">安装node.js</span></h3><blockquote><p>官网地址：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p></blockquote><h4><span id="安装">安装</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>
<h4><span id="检测">检测</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v6.<span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">3.10</span>.<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4><span id="切换镜像源">切换镜像源</span></h4><blockquote>
<p>由于某些原因，直接从官网安装模块比较慢，经常性地安装失败，最好切换到国内的<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝镜像源</a>来，</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3><span id="安装hexo">安装hexo</span></h3><blockquote>
<p>搭建博客的核心框架，通过它就可以让我们在不需要编码的情况下搭建好自己的博客，官网地址：<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p>
</blockquote>
<h4><span id="安装">安装</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h4><span id="检测">检测</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">os: Darwin <span class="number">16.6</span>.<span class="number">0</span> darwin x64</span><br><span class="line">http_parser: <span class="number">2.7</span>.<span class="number">0</span></span><br><span class="line">node: <span class="number">6.10</span>.<span class="number">0</span></span><br><span class="line">v8: <span class="number">5.1</span>.<span class="number">281.93</span></span><br><span class="line">uv: <span class="number">1.9</span>.<span class="number">1</span></span><br><span class="line">zlib: <span class="number">1.2</span>.<span class="number">8</span></span><br><span class="line">ares: <span class="number">1.10</span>.<span class="number">1</span>-DEV</span><br><span class="line">icu: <span class="number">58.2</span></span><br><span class="line">modules: <span class="number">48</span></span><br><span class="line">openssl: <span class="number">1.0</span>.<span class="number">2</span>k</span><br></pre></td></tr></table></figure>
<h2><span id="搭建博客">搭建博客</span></h2><h3><span id="创建博客目录">创建博客目录</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myBlog  <span class="comment"># myBlog 为博客目录名称，名称可依据自己喜好自行定义</span></span><br><span class="line">$ cd myBlog         <span class="comment"># 进入到 myBlog 目录</span></span><br><span class="line">$ npm install       <span class="comment"># 安装模块</span></span><br></pre></td></tr></table></figure>
<h3><span id="生成默认网页">生成默认网页</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>
<h3><span id="浏览器访问">浏览器访问</span></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line">INFO  Hexo is running at http://localhost:<span class="number">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
</blockquote>
<p>如若看到如下效果，恭喜搭建成功！</p>
<p><img src="https://img.i7years.com/hexo-default.PNG" alt=""></p>
<h3><span id="发表你的第一篇文章">发表你的第一篇文章</span></h3><h4><span id="创建博文">创建博文</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog 				 <span class="comment"># 进入的之前创建的博客目录下</span></span><br><span class="line">$ hexo new <span class="string">"我的第一篇博文"</span>	<span class="comment"># 创建博文</span></span><br></pre></td></tr></table></figure>
<h4><span id="编辑博文内容">编辑博文内容</span></h4><ul>
<li><p>学习前置技能——<strong>Markdown语法</strong></p>
<blockquote>
<ul>
<li>Markdown 是一种<em>书写</em>的格式，用Markdown编辑文档，不仅简单，而且排版清晰明了</li>
<li>Markdown 语法学习地址，推荐：<a href="https://maxiang.io/" target="_blank" rel="external">https://maxiang.io/</a></li>
<li>Markdown 文档编辑器，推荐：<a href="http://typora.io" target="_blank" rel="external">http://typora.io</a></li>
</ul>
</blockquote>
</li>
<li><p>使用 typora 打开上一步创建文档 <code>我的第一篇博文.md</code>，目录地址： <code>myBlog/source/_posts</code></p>
</li>
<li><p>按照你掌握的Markdown语法，开始写文档吧</p>
</li>
</ul>
<h4><span id="发布">发布</span></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog</span><br><span class="line">$ hexo clean &amp;&amp; hexo g  <span class="comment"># 重新构建，生成静态文件</span></span><br><span class="line">$ hexo s                <span class="comment"># 启动博客服务</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>再次访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
</blockquote>
<h2><span id="hexo-常用命令学习">hexo 常用命令学习</span></h2><blockquote>
<p>详见：<a href="http://t.cn/R5x40qE" target="_blank" rel="external">http://t.cn/R5x40qE</a></p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]    <span class="comment"># 新建一个网站</span></span><br><span class="line">$ hexo clean            <span class="comment"># 删除本地静态文件</span></span><br><span class="line">$ hexo g            	<span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo s            	<span class="comment"># 本机运行博客系统</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8 | 新特性纵览]]></title>
      <url>/posts/4522b97f.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2><span id="java-8介绍">Java 8介绍</span></h2><p>Java 8 于 2014年3月份发布，新版本增添很多不错的特性，本篇文章我们一起纵览一下这些新特性，后面的章节我们会一一详细讨论。促使Java做出重大改变的动力主要来源于：</p><ul><li>代码可读性</li><li>多核运行</li></ul><a id="more"></a><h3><span id="代码可读性">代码可读性</span></h3><p>Java代码非常的啰嗦冗长，导致了代码可读性的下降，换句话说，需要很多额外的代码来解释一段很小的内容。例如，现在有个需求，要按照发票金额的数量倒序排序发票列表。在Java 8之前，你可能需要这么处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(invoices, <span class="keyword">new</span> Comparator&lt;Invoice&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Invoice inv1, Invoice inv2)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> Double.compare(inv2.getAmount(), inv1.getAmount());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>而在Java8中，你只需要这样即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoices.sort(comparingDouble(Invoice::getAmount).reversed());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面的章节会做详细介绍</p>
</blockquote>
<p>此外，Java 8引入了一种名为Streams API的新API，可以让你编写可读性良好的代码来处理数据。Streams API支持多种内置操作，以更简单的方式来处理数据。在业务运营环境中，你可能希望生成一个结束日期报表，以过滤和汇总来自各个部门的发票。 好消息是，使用Streams API，您无需担心如何实现查询本身。<br>这种方法与您习惯使用SQL的方法类似。 事实上，在SQL中，您可以指定查询而不用担心其内部实现。 例如，假设您想要查找金额大于1,000的发票的所有ID：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> invoices <span class="keyword">WHERE</span> amount &gt; <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>这种编写查询所做的风格通常被称为<strong>声明式编程</strong>。 以下是如何使用Streams API并行地解决这个问题的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ids = invoices.stream()</span><br><span class="line">                .filter(inv -&gt; inv.getAmount() &gt; <span class="number">1000</span>)</span><br><span class="line">                .map(Invoice::getId)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面的章节会做详细介绍</p>
</blockquote>
<h3><span id="多核">多核</span></h3><p> Java 8的第二个重大变化是多核处理器时代所必须的。在过去，你的电脑只有一个处理单元。想要更快地运行应用程序通常意味着提高处理单元的性能。 不幸的是，处理单元的时钟速度不会再更快了。 今天，绝大多数计算机和移动设备都有多个处理单元（称为核）来以并行的方式进行工作。</p>
<p>应用程序应该利用不同的处理单元来提高性能。 Java应用程序通常通过线程来实现这一点。 不幸的是，与线程一起工作往往是困难且容易出错的，并且通常专供专家使用。</p>
<p>Java 8中的Streams API 能够让你非常方便地以并行方式来处理数据。例如，将前面的代码改为并行运行，只需要使用 <em>parallelStream()</em> 接口即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ids = invoices.parallelStream()</span><br><span class="line">                .filter(inv -&gt; inv.getAmount() &gt; <span class="number">1000</span>)</span><br><span class="line">                .map(Invoice::getId)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面的章节会做详细介绍</p>
</blockquote>
<h2><span id="新特性纵览">新特性纵览</span></h2><h3><span id="lambda表达式lambda-expressions">Lambda表达式(Lambda Expressions)</span></h3><p>Lambda表达式可以让您以简洁的方式传递一段代码。 例如，假设你需要获得一个线程来执行任务。 你可以通过创建一个Runnable对象来实现，然后将其作为参数传递给Thread：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(runnable).start();</span><br></pre></td></tr></table></figure>
<p>使用lambda表达式，你可以用可读性更强的方式重构前面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"Hello world"</span>)).start();</span><br></pre></td></tr></table></figure>
<h3><span id="方法引用method-references">方法引用(Method references)</span></h3><p>方法引用构成了一个与Lambda表达式密切相关的新特性。他们可以让你选择一个在类中定义的方法并且传递它。 例如，假设您需要通过忽略大小写来比较字符串列表。 目前，您会编写如下所示的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strs = Arrays.asList(<span class="string">"C"</span>, <span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>);</span><br><span class="line">Collections.sort(strs, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.compareToIgnoreCase(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用方法引用，代码简洁如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(strs, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure>
<p><code>String::compareToIgnoreCase</code> 就是方法引用，它使用一种特殊的语法 <code>::</code> .</p>
<h3><span id="流streams">流(Streams)</span></h3><p>几乎每一个Java应用程序都会去创建和处理数据集合。它们是诸多应用程序的基础，因为它们可以让你对数据进行分组，并且处理数据。然而，使用Java集合去编写程序，代码可能会非常冗长，并且难以并行化运行。下面的例子，充分说明了使用集合，导致冗余的可能性。</p>
<p>找出与培训相关的发票的ID，并且按照发票的金额进行排序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Invoice&gt; trainingInvoices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Invoice inv: invoices) &#123;</span><br><span class="line">  <span class="keyword">if</span>(inv.getTitle().contains(<span class="string">"Training"</span>)) &#123;</span><br><span class="line">    trainingInvoices.add(inv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collections.sort(trainingInvoices, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Invoice inv1, Invoice inv2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inv2.getAmount().compareTo(inv1.getAmount());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; invoiceIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Invoice inv: trainingInvoices) &#123;</span><br><span class="line">  invoiceIds.add(inv.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Java 8中的Stream API就可将上述代码简化为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; invoiceIds = invoices.stream()</span><br><span class="line">                       .filter(inv -&gt; inv.getTitle().contains(<span class="string">"Training"</span>))</span><br><span class="line">                       .sorted(comparingDouble(Invoice::getAmount).reversed())</span><br><span class="line">                       .map(Invoice::getId)</span><br><span class="line">                       .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3><span id="接口增强enhanced-interfaces">接口增强(Enhanced Interfaces)</span></h3><p>Java 8中的接口现在可以通过两个改进来声明带有实现代码的方法。</p>
<h3><span id="默认方法">默认方法</span></h3><p>首先，Java 8引入了默认方法，它允许您在接口中声明具有实现代码的方法。它们是作为一种以向后兼容的方式发展Java API的机制而引入的。例如，您将看到在Java 8中，List接口现在支持一种排序方法，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">     Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">     Arrays.sort(a, (Comparator) c);</span><br><span class="line">     ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">     <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">          i.next();</span><br><span class="line">          i.set((E) e);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认方法也可以作为行为的多重继承机制。 事实上，在Java 8之前，一个类可能已经实现了多个接口。 现在，您可以从多个不同的接口继承默认方法。 请注意，Java 8具有明确的规则来防止C ++中常见的继承问题（例如diamond problem）。</p>
<h4><span id="静态方法">静态方法</span></h4><p>其次，接口现在也可以有静态方法。 定义用于处理接口实例的静态方法的接口和伴随类是一种常见模式。 例如，Java具有Collection接口和Collections类，它定义了实用程序的静态方法。 这种实用静态方法现在可以存在于接口中。 例如，Java 8中的Stream接口声明了一个像这样的静态方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Arrays.stream(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="completablefuture">CompletableFuture</span></h3><p>Java 8 通过一个新的Class类 <em>CompletableFuture</em> 来考虑一种新的异步编程方式。 这是对旧有的Future类的改进，其操作灵感来源于新Streams API中的类似设计选择（即声明式风格和流畅链接方法的能力）。 换句话说，您可以声明式地处理和编写多个异步任务。<br>以下是一个同时查询两个阻塞任务的示例：价格查找服务以及汇率计算器。 一旦两项服务的结果可用，您可以将其结果合并计算并以英镑打印价格：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">findBestPrice(<span class="string">"iPhone6"</span>)</span><br><span class="line">    .thenCombine(lookupExchangeRate(Currency.GBP), <span class="keyword">this</span>::exchange)</span><br><span class="line">    .thenAccept(localAmount -&gt; System.out.printf(<span class="string">"It will cost you %f GBP\n"</span>, localAmount));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CompletableFuture&lt;Price&gt; <span class="title">findBestPrice</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; priceFinder.findBestPrice(productName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CompletableFuture&lt;Double&gt; <span class="title">lookupExchangeRate</span><span class="params">(Currency localCurrency)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; exchangeService.lookupExchangeRate(Currency.USD, localCurrency));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="optional">Optional</span></h3><p>Java 8引入了一个名为Optional的新类。 受到函数式编程语言的启发，当值可能存在或缺失时，允许在代码库中更好地建模。 把它看作一个单值容器，因为它包含一个值或是空的。 Optional已经在替代集合框架（如Guava）中可用，但现在可作为Java API的一部分。 Optional的另一个好处是它可以保护你免受NullPointerExceptions的侵害。 事实上，Optional定义了一些方法来强制你明确地检查一个值是否存在。 以下面的代码为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getEventWithId(<span class="number">10</span>).getLocation().getCity();</span><br></pre></td></tr></table></figure>
<p>getEventWithId(10)返回null，或者getLocation()返回null，都会导致程序抛出异常：NullPointerException。为了避免异常发生，需要做以下判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCityForEvent</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Event event = getEventWithId(id);</span><br><span class="line">    <span class="keyword">if</span>(event != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Location location = event.getLocation();</span><br><span class="line">        <span class="keyword">if</span>(location != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> location.getCity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"TBC"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码中，一个 <code>Event</code> 可能有一个关联的 <code>Location</code>。 然而，一个 <code>Location</code> 总是有一个相关的 <code>City</code>。 不幸的是，我们常常忘记检查null。 另外，代码也会变得更加冗长。 使用Optional，您可以重构代码，使其变得更加简单明了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCityForEvent</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Optional.ofNullable(getEventWithId(id))</span><br><span class="line">            .flatMap(<span class="keyword">this</span>::getLocation)</span><br><span class="line">            .map(<span class="keyword">this</span>::getCity)</span><br><span class="line">            .orElse(<span class="string">"TBC"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="新date和time-api">新Date和Time API</span></h3><p>java 8引入了一个全新的<code>Date</code>和<code>Time</code>的API，修复了旧<code>Date</code>和<code>Calendar</code> 中存在的许多问题。新的Date和Time API主要根据以下两个原则进行设计：</p>
<p><strong>领域驱动设计</strong></p>
<p>新的Date和Time API通过引入新的class对象来精确模式各种日期和时间的概念。例如，您可以使用Period类来表示类似“2个月和3天”的值，并使用ZonedDateTime来表示具有时区的日期时间。每个类都提供了基于流畅式编码风格的特定领域的方法。 因此，您可以使用方法链来编写更多可读性强的代码。 例如，以下代码显示如何创建一个新的LocalDateTime对象并添加2小时30分钟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocatedDateTime coffeeBreak = LocalDateTime.now()</span><br><span class="line">                                           .plusHours(<span class="number">2</span>)</span><br><span class="line">                                           .plusMinutes(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<p><strong>不可变性</strong></p>
<p>Date和Calender类的另一个问题就是它们是线程不安全的。另外，使用日期作为其API的开发人员可能会意外地更新时间值。为了预防这种潜在Bug的产生，在新的Date和Time API中，所有的类都是不可变的。换句话说，在新的Date和Time API中，你无法修改对象的状态，相反，你需要调用新的方法来更新值，并且会返回一个新的对象。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZoneId london = ZoneId.of(<span class="string">"Europe/London"</span>);</span><br><span class="line">LocalDate july4 = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);</span><br><span class="line">LocalTime early = LocalTime.parse(<span class="string">"08:45"</span>);</span><br><span class="line">ZonedDateTime flightDeparture = ZonedDateTime.of(july4, early, london);</span><br><span class="line">System.out.println(flightDeparture);</span><br><span class="line"></span><br><span class="line">LocalTime from = LocalTime.from(flightDeparture);</span><br><span class="line">System.out.println(from);</span><br><span class="line"></span><br><span class="line">ZonedDateTime touchDown = ZonedDateTime.of(july4,</span><br><span class="line">           LocalTime.of(<span class="number">11</span>, <span class="number">35</span>),</span><br><span class="line">           ZoneId.of(<span class="string">"Europe/Stockholm"</span>));</span><br><span class="line">Duration flightLength = Duration.between(flightDeparture, touchDown);</span><br><span class="line">System.out.println(flightLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// How long have I been in continental Europe?</span></span><br><span class="line">ZonedDateTime now = ZonedDateTime.now();</span><br><span class="line">Duration timeHere = Duration.between(touchDown, now);</span><br><span class="line">System.out.println(timeHere);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2014-07-04T08:45+01:00[Europe/London]</span><br><span class="line">08:45</span><br><span class="line">PT1H50M</span><br><span class="line">PT33879H12M25.546S</span><br></pre></td></tr></table></figure>
<h5><span id="参考资料">参考资料</span></h5><ul>
<li><a href="https://www.oreilly.com/programming/free/introducing-java-8.csp" target="_blank" rel="external">https://www.oreilly.com/programming/free/introducing-java-8.csp</a></li>
<li><a href="https://javabrains.thinkific.com/courses/take/java-8-lambda-basics/multimedia/2817266-introduction" target="_blank" rel="external">https://javabrains.thinkific.com/courses/take/java-8-lambda-basics/multimedia/2817266-introduction</a></li>
<li><a href="http://ifeve.com/java-8-features-tutorial" target="_blank" rel="external">http://ifeve.com/java-8-features-tutorial</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NodeJs学习(1) | Build First Web Server]]></title>
      <url>/posts/b1fcd8d6.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇文章交易如何使用NodeJs搭建一个简单版的http server.</p><a id="more"></a><h2><span id="设备">设备</span></h2><ul><li>MacOS High Sierra</li></ul><h2><span id="环境部署">环境部署</span></h2><h4><span id="安装-nvm">安装 nvm</span></h4><blockquote><p>使用 nvm 方便管理node版本</p></blockquote><h5><span id="安装nvm">安装nvm</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install nvm</span><br><span class="line">$ mkdir ~/.nvm</span><br><span class="line">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<h5><span id="配置变量nvm_dir">配置变量NVM_DIR</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export NVM_DIR=~/.nvm</span><br><span class="line">$ source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure>
<h5><span id="检查">检查</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br><span class="line">$ echo <span class="variable">$NVM_DIR</span></span><br><span class="line">$ nvm --version</span><br><span class="line"><span class="number">0.33</span>.<span class="number">11</span></span><br></pre></td></tr></table></figure>
<h5><span id="删除-nvm">删除 nvm</span></h5><ul>
<li><p>删除文件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf <span class="string">"<span class="variable">$NVM_DIR</span>"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除 <code>~/.bash_profile</code> 中以下配置</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line">[[ -r <span class="variable">$NVM_DIR</span>/bash_completion ]] &amp;&amp; \. <span class="variable">$NVM_DIR</span>/bash_completion</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4><span id="安装node">安装Node</span></h4><p>安装最新版的Node.js</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install node</span><br></pre></td></tr></table></figure>
<p>使用最新版的Node.js</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm use node</span><br></pre></td></tr></table></figure>
<h2><span id="创建http-server">创建Http Server</span></h2><ol>
<li><p>创建一个 web.js，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process_request</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> body = <span class="string">'Thanks for calling!\n'</span>;</span><br><span class="line">     <span class="keyword">var</span> content_length =  body.length ;</span><br><span class="line">     res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">         <span class="string">'Content-Length'</span>: content_length,</span><br><span class="line">         <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">     &#125;);</span><br><span class="line">     res.end(body);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = http.createServer(process_request);</span><br><span class="line">s.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>运行web.js，监听 8080 端口。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node web.js</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> </p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i http://localhost:<span class="number">8080</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Length: <span class="number">20</span></span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Date: Mon, <span class="number">09</span> Jul <span class="number">2018</span> <span class="number">03</span>:<span class="number">03</span>:<span class="number">25</span> GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> calling!</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="express-应用">Express 应用</span></h2><ol>
<li><p>安装 express</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 express 应用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">"Hello world ! "</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"app is listening at port 8080 ! "</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> </p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i http://localhost:<span class="number">8080</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">14</span></span><br><span class="line">ETag: W/<span class="string">"e-SGStovtlAfbXbrr3HXIpSArL2nY"</span></span><br><span class="line">Date: Sat, <span class="number">14</span> Jul <span class="number">2018</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">23</span> GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">Hello world !</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li><a href="http://www.java2s.com/Tutorials/Javascript/Node.js_Tutorial/index.htm" target="_blank" rel="external">http://www.java2s.com/Tutorials/Javascript/Node.js_Tutorial/index.htm</a></li>
<li><a href="https://github.com/alsotang/node-lessons/tree/master/lesson1" target="_blank" rel="external">https://github.com/alsotang/node-lessons/tree/master/lesson1</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于写作]]></title>
      <url>/posts/8e0f869c.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="关于写作">关于写作</span></h1><p>知乎上有这样一个问答：</p><blockquote><p>哪个瞬间让你突然觉得读书真有用？</p><blockquote><p>开始真实地感受到输出的每一句话都在暴露输入的时候</p></blockquote></blockquote><a id="more"></a><p>对这句回答，我感同身受，可以说这是我的真实写照，每当想要去给别人讲述一个观点的时候，要么说出去的话不能准确表达自己的意思，要么就是说着说着就卡壳了，最后不得不以”反正就是那样”来草草收场，这种尴尬的场面不知遇到了多少回。</p><p>除了<strong>输入</strong>之外，还有一个不可或缺的部分——<strong>处理</strong>，也就是思考。</p><p><strong>写作，是输入处理后的输出</strong>，是锻炼输入质量及处理质量最直接最有效的方式，没有之一。</p><p>公众号『我的七年』，这里将用来记录自己成长过程中的所思所想，内容主要涉及以下几个方面：</p><ul><li>有关一本好书或者一篇好文的阅读思考笔记；</li><li>自己学到新知识、新观念、新方法论及亲身践行的一些感悟；</li><li>对日常生活中所观察到的表象及背后逻辑与原因的思考；</li></ul><p>同时，希望通过写作来达到以下几个目的：</p><ul><li><p><strong>倒逼自己的输入质量以及思考质量</strong>。而我自己在独立思考、深入思考方面是非常非常非常欠缺的一个人，过去常常表现为，看完一篇好文章，心想：”哇！写的不错！有道理！” 然后点击”分享到朋友圈”或者”保存到印象笔记”，又如，在看一本书的过程中，我会去摘录书中觉得有道理的句子和段落，表示自己已经”认真”地看过这本书了。但是极少会主动去思考以下几个问题：</p><blockquote><p>作者主要讲了些什么？作者的观点是否有道理？哪些观点不同意，你的原因或论据是什么？</p><p>作者是如何论证自己的观点的？论证的思路又是如何？</p><p>论证的过程中用到了哪些素材？这些素材还可以用到其它什么地方去？</p><p>从中我能学到些什么？如何能跟我已有的知识结合起来？</p><p>如何将文中的观点和道理内化到自己的行动中来，进而去改变自己的生活？</p></blockquote><p>​</p><p>在接下来的几年里，我将会系统性地学习概率论与数理统计、历史方法论、逻辑学、心理学(尤其是认知心理 学)、经济学等知识，给自己的操作系统做几次重大的升级，为自己建立一个完整的知识体系框架，去帮助自己突破思考质量上的局限。一个人的思考质量几乎决定着他的生活质量，思考决定选择，选择决定命运。只有思考上的进步，才是根本上的进步。</p><p>​</p></li></ul><ul><li><strong>更加清醒地认识自己</strong>。写作是一个不断探索自己，不断与自己对话的过程，通过写作去发掘内心最真实的想法，去了解自己真正的刚需是什么，知道什么是好的，什么是更好的，什么是是最好的，知道什么事情绝对不能做，什么事情一定要做到底，让自己在面临生活中各种各样的选择时，能够自然而然地做出符合自己<strong>价值观</strong>的选择，而不至于走上违心的岔路。</li></ul><ul><li><strong>提升自己的表达能力与沟通能力</strong>。写作并不只是作者的单向输出， 更多的是作者与读者之间双向沟通的过程，作者需要站在读者的角度去审视自己的文章，反思自己有没有将自己的观点清晰地表达给对方，而对方是不是能够清楚且正确地理解自己所表达的意思。在表达能力和沟通能力方面我也是非常欠缺的一个人，希望通过持续不断的写作来提升自己的语言组织能力，让自己的想法和观点能够清晰且正确地表达出来。同时，通过我的文章可以让身边的朋友、同事以及家人更好地了解我。</li></ul><ul><li><strong>更好地消化所学的东西</strong>。通过写作可以梳理自己的知识体系，将各个知识点串联起来，有助于大脑内部形成更加稳固的记忆组块，便于我更好地理解所学的东西。另外，我也很乐意将自己所学到知识、观点和技能整理分享出来，一方面因为<strong>教是最好的学习方法</strong>，另一方面通过大家的反馈可以发现自身思维上的局限和认知的不足，这一点尤为重要，最怕的就是，不知道自己不知道。</li></ul><p>千里之行始于足下。在今后的岁月里，我愿倾注我大部分闲暇时间在自己的一亩三分地上辛勤地耕作，以<strong>持续学习、不断积累</strong>为宗旨，以输出带动输入，以行动驱动梦想，种出自己想要的硕果。</p><p>杭州 2016/12/18</p>]]></content>
      
        <categories>
            
            <category> writing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(14) | Prototypal inheritance]]></title>
      <url>/posts/5368b95d.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>JavaScript中没有”子类”和”父类”的概念，也没有”类”（class）和”实例”（instance）的区分，全靠一种很奇特的”原型链”（prototype chain）模式，来实现继承。</p><a id="more"></a><h2><span id="prototype">[[Prototype]]</span></h2><p>在 JavaScript 中，对象有一个隐藏的属性 <code>[[Prototype]]</code> ，该属性的值要么为<code>null</code> ，要么指向一个对象，这个所指向的对象就被称为<code>原型</code>。</p><p><img src="https://img.i7years.com/blog/object-prototype-empty@2x.png" alt="object-prototype-empty"></p><p>通过 <code>[[Prototype]]</code> 我们继承一个对象的属性与方法，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">    eats: <span class="literal">true</span>,</span><br><span class="line">    walk() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Animal walk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">    jumps: <span class="literal">true</span>,</span><br><span class="line">    __proto__: animal</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> longEar = &#123;</span><br><span class="line">    earLength: <span class="number">10</span>,</span><br><span class="line">    __proto__: rabbit</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we can find both properties in rabbit now:</span></span><br><span class="line"><span class="built_in">console</span>.log(longEar.eats); <span class="comment">// true (**)</span></span><br><span class="line"><span class="built_in">console</span>.log(longEar.jumps); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(longEar.earLength); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">longEar.walk(); <span class="comment">// Animal walk</span></span><br></pre></td></tr></table></figure>
<p>在上面的例子中，这三个对象的关系如下：<code>longEar</code> –&gt; <code>rabbit</code> –&gt; <code>animal</code>。我们可以这样表述：<code>animal</code> 是 <code>rabbit</code> 的原型，或者 <code>rabbit</code> 原型继承自 <code>animal</code> 。</p>
<p><strong>注意</strong></p>
<ol>
<li>对象的之间的继承关系，不能形成一个环型，类似于： A –&gt; B –&gt; –&gt; A。</li>
<li>对象的 <code>__proto__</code> 属性，只能null或者对象，不能为其他数据类型。</li>
</ol>
<h2><span id="读写规则">读写规则</span></h2><p>原型只适用于属性的读取，但是对于数据属性的删除与修改操作，只能对子类产生影响，对原型没有影响。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">    eats: <span class="literal">true</span>,</span><br><span class="line">    walk() &#123;</span><br><span class="line">        <span class="comment">/* this method won't be used by rabbit */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">    __proto__: animal</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rabbit.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Rabbit! Bounce-bounce!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rabbit.walk(); <span class="comment">// Rabbit! Bounce-bounce!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rabbit.eats); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> rabbit.eats;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rabbit.eats); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.eats); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>对于 <code>getters/setters</code> 方法，在调用时会向上调用到原型里面的方法上去。例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    surname: <span class="string">"Smith"</span>,</span><br><span class="line"></span><br><span class="line">    set fullName(value) &#123;</span><br><span class="line">        [<span class="keyword">this</span>.name, <span class="keyword">this</span>.surname] = value.split(<span class="string">" "</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    get fullName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.surname&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = &#123;</span><br><span class="line">    __proto__: user,</span><br><span class="line">    isAdmin: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(admin.fullName); <span class="comment">// John Smith (*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setter triggers!</span></span><br><span class="line">admin.fullName = <span class="string">"Alice Cooper"</span>; <span class="comment">// (**)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// John</span></span><br><span class="line"><span class="built_in">console</span>.log(admin.name); <span class="comment">// Alice</span></span><br></pre></td></tr></table></figure>
<h2><span id="this">this</span></h2><p>函数中的 <code>this</code>值通常是由函数的调用方来定义。因此，每次执行函数，函数内的 <code>this</code>值可能都不一样。</p>
<p>在上面的这个例子中，this 指向的是哪个对象？答案是： <code>admin</code> 。</p>
<p><code>this</code> 不受原型的影响。无论在哪里调用，不管是对象中还是在原型中，一个方法里面的 <code>this</code> 总是表示 <code>.</code> 号前面的对象。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal has methods</span></span><br><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">    walk() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isSleeping) &#123;</span><br><span class="line">            alert(<span class="string">`I walk`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep() &#123;</span><br><span class="line">        <span class="keyword">this</span>.isSleeping = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">    name: <span class="string">"White Rabbit"</span>,</span><br><span class="line">    __proto__: animal</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modifies rabbit.isSleeping</span></span><br><span class="line">rabbit.sleep();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rabbit.isSleeping); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.isSleeping); <span class="comment">// undefined (no such property in the prototype)</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="http://javascript.info/prototype-inheritance" target="_blank" rel="external">http://javascript.info/prototype-inheritance</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></li>
<li><a href="https://juejin.im/post/5b6676e6f265da0fa00a3a12" target="_blank" rel="external">https://juejin.im/post/5b6676e6f265da0fa00a3a12</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(13) | Property getters and setters]]></title>
      <url>/posts/57ede93d.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>JavaScript中有两种属性，一种是我们前面一直在介绍的数据属性（<em>data properties</em>），另外一种就是访问者属性（<em>accessor properties</em>）。</p><a id="more"></a><h2><span id="getters-and-setters">Getters and setters</span></h2><p>在对象中，访问者属性使用 <code>get</code> 和 <code>set</code> 方法标示，形如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  get propName() &#123;</span><br><span class="line">    <span class="comment">// getter, the code executed on getting obj.propName</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set propName(value) &#123;</span><br><span class="line">    <span class="comment">// setter, the code executed on setting obj.propName = value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例如，我们有个如下的 user 对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  surname: <span class="string">"Smith"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>现在想要增加一个 <code>fullName</code> 属性，我们不想复制原有的name信息，这里我们可以使用访问者属性的方式来实现，使用 getter 方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  surname: <span class="string">"Smith"</span>,</span><br><span class="line"></span><br><span class="line">  get fullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.surname&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.fullName); <span class="comment">// John Smith</span></span><br></pre></td></tr></table></figure>
<p>如果我们想要给 <code>fullName</code> 属性赋值，那么就需要 setter 方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    surname: <span class="string">"Smith"</span>,</span><br><span class="line"></span><br><span class="line">    get fullName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.surname&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set fullName(value) &#123;</span><br><span class="line">        [<span class="keyword">this</span>.name, <span class="keyword">this</span>.surname] = value.split(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set fullName is executed with the given value.</span></span><br><span class="line">user.fullName = <span class="string">"Alice Cooper"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// Alice</span></span><br><span class="line"><span class="built_in">console</span>.log(user.surname); <span class="comment">// Cooper</span></span><br></pre></td></tr></table></figure>
<p><code>fullName</code> 其实是一个虚拟的属性，它实际上并不存在于对象之中。</p>
<blockquote>
<p>访问者属性只能通过 get/set 方法来进行访问。一个属性不能即是访问者属性，又是数据属性，二者只能选其一。</p>
</blockquote>
<h2><span id="accessor-descriptors">Accessor descriptors</span></h2><p>访问者属性的描述与数据属性的描述有所不同。它没有 <code>value</code> 和 <code>writable</code> 值，取而代之的是 <code>get</code> 与 <code>set</code> 函数，因此访问者属性的描述包含如下几个值：</p>
<ul>
<li><strong>get</strong>：查询属性时会被调用的方法；</li>
<li><strong>set</strong>：设置属性时会被调用的方法；</li>
<li><strong>enumerable</strong>：同数据属性一样；</li>
<li><strong>configurable</strong>：同数据属性一样；</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Circle.prototype, <span class="string">'circumference'</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Circle.prototype, <span class="string">'area'</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Circle(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.area); <span class="comment">// 314.1592653589793</span></span><br><span class="line"><span class="built_in">console</span>.log(c.circumference); <span class="comment">// 62.83185307179586</span></span><br></pre></td></tr></table></figure>
<h2><span id="smarter-getterssetters">Smarter Getters/Setters</span></h2><p>对于 getter/setter 的属性，我们可以使用下划线“_” 来进行修饰，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    age: <span class="string">'25'</span>,</span><br><span class="line"></span><br><span class="line">    get name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set name(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Name is too short, need at least 4 characters'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._name = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.name = <span class="string">'John'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// John</span></span><br></pre></td></tr></table></figure>
<p>从技术上讲，外部代码仍然可以使用 <code>user._name</code> 直接访问该名称。 但是有一个众所周知的协议，即以下划线“_”开头的属性是内部的，不应该从对象外部触及。</p>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><p><a href="http://javascript.info/property-accessors" target="_blank" rel="external">http://javascript.info/property-accessors</a></p>
</li>
<li><p><a href="https://javascriptplayground.com/es5-getters-setters/" target="_blank" rel="external">https://javascriptplayground.com/es5-getters-setters/</a></p></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(12) | Property flags and descriptors]]></title>
      <url>/posts/c0e346ec.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 <a href="https://wangwei.one/posts/b5949fa3.html">前面</a> 我们学习了JavaScript中如何创建对象以及对象属性的操作，本篇将深入学习 Object 属性的一些特性：<strong>Enumerable</strong>、<strong>Writable</strong>、<strong>Configurable</strong>.</p><a id="more"></a><h2><span id="property-flags">Property flags</span></h2><p>我们先来看下下面这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// My beloved object ob</span></span><br><span class="line"><span class="keyword">let</span> ob = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing to a property</span></span><br><span class="line"><span class="built_in">console</span>.log(ob.a); <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Modifying the value of a property</span></span><br><span class="line">ob.a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ob.a); <span class="comment">// =&gt; 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating a new property</span></span><br><span class="line">ob.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ob.b); <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deleting a property</span></span><br><span class="line"><span class="keyword">delete</span> ob.b;</span><br><span class="line"><span class="built_in">console</span>.log(ob.b); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>
<h3><span id="objectgetownpropertydescriptor">Object.getOwnPropertyDescriptor</span></h3><p>获取对象属性的描述，语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, propertyName);</span><br></pre></td></tr></table></figure>
<p>查看上面的例子中对象 <code>ob</code> 属性 <code>a</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(ob, <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor);</span><br><span class="line"><span class="comment">// &#123; value: 0, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure>
<p>对象 <code>ob</code> 的属性是 enumerable、writable、configurable，什么意思呢？</p>
<ul>
<li>enumerable（可枚举）：可以使用 <code>for...in</code> 方法遍历对象的所有属性。也能通过 <code>Object.keys</code> 返回一个对象的所有的属性。</li>
<li>writable（可修改）：可以修改对象的属性值。</li>
<li>configurable（可配置）：可以修改属性的行为，可以将属性改为non-enumerable、non-writable 甚至是 non-configurable。可配置的属性是唯一能够通过 <code>delete</code> 操作删除的属性。</li>
</ul>
<h3><span id="objectgetownpropertydescriptors">Object.getOwnPropertyDescriptors</span></h3><p>获取对象所有属性的描述，语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptors = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">'John'</span>,</span><br><span class="line">    surname: <span class="string">'Smith'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(user));</span><br><span class="line">&#123; <span class="attr">name</span>:</span><br><span class="line"><span class="comment">// &#123; value: 'John',</span></span><br><span class="line"><span class="comment">//     writable: true,</span></span><br><span class="line"><span class="comment">//     enumerable: true,</span></span><br><span class="line"><span class="comment">//     configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//     surname:</span></span><br><span class="line"><span class="comment">//     &#123; value: 'Smith',</span></span><br><span class="line"><span class="comment">//         writable: true,</span></span><br><span class="line"><span class="comment">//         enumerable: true,</span></span><br><span class="line"><span class="comment">//         configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<h3><span id="objectdefineproperty">Object.defineProperty</span></h3><p>一次性定义对象的所有属性，语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, propertyName, descriptor)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(user, &#123;</span><br><span class="line">    name: &#123;<span class="attr">value</span>: <span class="string">"John"</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    surname: &#123;<span class="attr">value</span>: <span class="string">"Smith"</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>与 <code>Object.getOwnPropertyDescriptors</code> 配合使用可以克隆对象所有的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let clone = Object.defineProperties(&#123;&#125;, Object.getOwnPropertyDescriptors(obj));</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">'John'</span>,</span><br><span class="line">    surname: <span class="string">'Smith'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(user1, <span class="built_in">Object</span>.getOwnPropertyDescriptors(user));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(user1));</span><br><span class="line"><span class="comment">// &#123; name:</span></span><br><span class="line"><span class="comment">// &#123; value: 'John',</span></span><br><span class="line"><span class="comment">//     writable: true,</span></span><br><span class="line"><span class="comment">//     enumerable: true,</span></span><br><span class="line"><span class="comment">//     configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//     surname:</span></span><br><span class="line"><span class="comment">//     &#123; value: 'Smith',</span></span><br><span class="line"><span class="comment">//         writable: true,</span></span><br><span class="line"><span class="comment">//         enumerable: true,</span></span><br><span class="line"><span class="comment">//         configurable: true &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="http://javascript.info/property-descriptors" target="_blank" rel="external">http://javascript.info/property-descriptors</a></li>
<li><a href="http://arqex.com/967/javascript-properties-enumerable-writable-configurable" target="_blank" rel="external">http://arqex.com/967/javascript-properties-enumerable-writable-configurable</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(11) | Date and time]]></title>
      <url>/posts/b4757a13.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇文章来介绍一下JavaScript中的另一个内建对象—— <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">Date</a>，其用法与java中的 <code>Date</code> 颇为相似。</p><a id="more"></a><h2><span id="创建">创建</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Date()</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Date(milliseconds)</span></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">24</span> * <span class="number">3600</span> * <span class="number">3600</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Date(datestring)</span></span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-03-07'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new Date(year, month, date, hours, minutes, seconds, ms)</span></span><br><span class="line"><span class="keyword">let</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date3);</span><br></pre></td></tr></table></figure>
<h2><span id="查询日期组件">查询日期组件</span></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear" target="_blank" rel="external">getFullYear()</a>：根据当地时间，返回一个对应于给定日期的年份数字。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth" target="_blank" rel="external">getMonth()</a>：根据本地时间，返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate" target="_blank" rel="external">getDate()</a>：根据本地时间，返回一个指定的日期对象为一个月中的第几天。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours" target="_blank" rel="external">getHours()</a>：根据本地时间，返回一个指定的日期对象的小时。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes" target="_blank" rel="external">getMinutes()</a>：根据本地时间，返回一个指定的日期对象的分钟。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds" target="_blank" rel="external">getSeconds()</a>：根据本地时间，返回一个指定的日期对象的秒数。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds" target="_blank" rel="external">getMilliseconds()</a>：根据本地时间，返回一个指定的日期对象的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear());</span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth());</span><br><span class="line"><span class="built_in">console</span>.log(now.getDay());</span><br><span class="line"><span class="built_in">console</span>.log(now.getHours());</span><br><span class="line"><span class="built_in">console</span>.log(now.getMinutes());</span><br><span class="line"><span class="built_in">console</span>.log(now.getSeconds());</span><br><span class="line"><span class="built_in">console</span>.log(now.getMilliseconds());</span><br></pre></td></tr></table></figure>
<h2><span id="设置日期组件">设置日期组件</span></h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear" target="_blank" rel="external">setFullYear(year [, month, date])</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth" target="_blank" rel="external">setMonth(month [, date])</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate" target="_blank" rel="external">setDate(date)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours" target="_blank" rel="external">setHours(hour [, min, sec, ms])</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes" target="_blank" rel="external">setMinutes(min [, sec, ms])</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds" target="_blank" rel="external">setSeconds(sec [, ms])</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds" target="_blank" rel="external">setMilliseconds(ms)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime" target="_blank" rel="external">setTime(milliseconds)</a></li>
</ul>
<h2><span id="datenow">Date.now()</span></h2><p>获取当前时间戳，<code>Date.now()</code>  比  <code>new Date().getTime()</code>  更快，因为不需要创建对象，所以不需要进行垃圾回收。</p>
<h2><span id="dateparse">Date.parse</span></h2><p>解析日期字符串，并返回对应的时间戳</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(<span class="string">'2017/03/09'</span>));</span><br><span class="line"><span class="comment">// 1488988800000</span></span><br></pre></td></tr></table></figure>
<h2><span id="日期库">日期库</span></h2><ul>
<li>推荐非常不错的日期库：<a href="http://momentjs.com/" target="_blank" rel="external">http://momentjs.com/</a></li>
</ul>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/date" target="_blank" rel="external">https://javascript.info/date</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(10) | JSON]]></title>
      <url>/posts/d45f2631.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇介绍一下JavaScript中有关JSON的用法。</p><a id="more"></a><h2><span id="jsonstringify">JSON.stringify</span></h2><h4><span id="基本用法">基本用法</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="built_in">JSON</span>.stringify(value[, replacer [, space]]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>value</code>：将要序列化成 一个JSON 字符串的值。</p>
<p><code>replacer</code> 可选：如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter" target="_blank" rel="external">使用原生的 JSON 对象</a>一文。</p>
<p><code>space</code> 可选：指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。 </p>
</blockquote>
<p>例1：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">    name: <span class="string">'John'</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    isAdmin: <span class="literal">false</span>,</span><br><span class="line">    courses: [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>],</span><br><span class="line">    wife: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(student);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> json); <span class="comment">// string!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(json); <span class="comment">// &#123;"name":"John","age":30,"isAdmin":false,"courses":["html","css","js"],"wife":null&#125;</span></span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">foundation</span>: <span class="string">"Mozilla"</span>, <span class="attr">model</span>: <span class="string">"box"</span>, <span class="attr">week</span>: <span class="number">45</span>, <span class="attr">transport</span>: <span class="string">"car"</span>, <span class="attr">month</span>: <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> replacer = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(foo, replacer)); </span><br><span class="line"><span class="comment">// &#123;"week":45,"month":7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(foo, [<span class="string">'foundation'</span>, <span class="string">'transport'</span>])); </span><br><span class="line"><span class="comment">// &#123;"foundation":"Mozilla","transport":"car"&#125;</span></span><br></pre></td></tr></table></figure>
<h4><span id="自定义tojson">自定义toJSON</span></h4><p>在对象中自定义一个<code>toJSON</code>函数，类似于java中的重写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> room = &#123;</span><br><span class="line">    number: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">    title: <span class="string">"Conference"</span>,</span><br><span class="line">    date: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2017</span>, <span class="number">0</span>, <span class="number">1</span>)),</span><br><span class="line">    room</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(meetup));</span><br><span class="line"><span class="comment">// &#123;"title":"Conference","date":"2017-01-01T00:00:00.000Z","room":&#123;"number":23&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>改写 <code>room</code> 序列话之后的结果，自定义一个 <code>toJSON</code> 函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> room = &#123;</span><br><span class="line">    number: <span class="number">23</span>,</span><br><span class="line">    toJSON() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">    title: <span class="string">"Conference"</span>,</span><br><span class="line">    date: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2017</span>, <span class="number">0</span>, <span class="number">1</span>)),</span><br><span class="line">    room</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(meetup));</span><br><span class="line"><span class="comment">// &#123;"title":"Conference","date":"2017-01-01T00:00:00.000Z","room":23&#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="jsonparse">JSON.parse</span></h2><h4><span id="基本用法">基本用法</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="built_in">JSON</span>.parse(str[, reviver]);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>str</code>：要转化的字符串</li>
<li><code>revier</code>：转化函数</li>
</ul>
</blockquote>
<p>例1：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'&#123; "name": "John", "age": 35, "isAdmin": false, "friends": [0,1,2,3] &#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(user));</span><br><span class="line"><span class="comment">// &#123; name: 'John', age: 35, isAdmin: false, friends: [ 0, 1, 2, 3 ] &#125;</span></span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'&#123;"title":"Conference","date":"2017-11-30T12:00:00.000Z"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( meetup.date.getDate() ); </span><br><span class="line"><span class="comment">// Error! meetup.date.getDate is not a function</span></span><br></pre></td></tr></table></figure>
<p><code>meetup.date</code> 是字符串，不是object，需要我们手动转化一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'&#123;"title":"Conference","date":"2017-11-30T12:00:00.000Z"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetup = <span class="built_in">JSON</span>.parse(str, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'date'</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(meetup.date.getDate()); <span class="comment">// works</span></span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure>
<p>对内嵌对象也适用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> schedule = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">  "meetups": [</span></span><br><span class="line"><span class="string">    &#123;"title":"Conference","date":"2017-11-30T12:00:00.000Z"&#125;,</span></span><br><span class="line"><span class="string">    &#123;"title":"Birthday","date":"2017-04-18T12:00:00.000Z"&#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br><span class="line"></span><br><span class="line">schedule = <span class="built_in">JSON</span>.parse(schedule, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'date'</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(schedule.meetups[<span class="number">1</span>].date.getDate()); <span class="comment">// works!</span></span><br><span class="line"><span class="comment">// 18</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/json" target="_blank" rel="external">https://javascript.info/json</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(9) | Iterables]]></title>
      <url>/posts/39da151b.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即<code>for...of</code>循环）。当使用<code>for...of</code>循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。</p><p>ES6 规定，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”（iterable）。</p><a id="more"></a><h2><span id="symboliterator">Symbol.iterator</span></h2><p>为了便于理解 <code>Symbol.iterator</code> ，我们先来造个轮子。</p><p>先创建一个对象 <code>rang</code>，我们希望能够遍历出 <code>from</code> 到 <code>to</code> 之间的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rang = &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="number">1</span>,</span><br><span class="line">    to: <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>为了能够实现这个效果，我们需要为 rang 创建一个名为 <code>Symbol.iterator</code> 的方法。</p>
<ul>
<li>当 rang 执行 for … of 循环时，其中的 <code>Symbol.iterator</code> 方法将会被调用，如果没有则会报错。</li>
<li>这个方法必须返回一个替代器 —— 含有 <code>next()</code> 方法的对象。</li>
<li>当 <code>for ... of</code> 想要获取下一个值时，<code>next()</code> 方法将会被调用。</li>
<li><code>next()</code> 方法必须返回形如 <code>{done: Boolean, value: any}</code> 的对象，当 <code>done = true</code> 时表示迭代完成，否则 <code>value</code> 必须为新的值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rang = &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="number">1</span>,</span><br><span class="line">    to: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            current: <span class="keyword">this</span>.from,</span><br><span class="line">            last: <span class="keyword">this</span>.to,</span><br><span class="line"></span><br><span class="line">            next() &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.current &lt;= <span class="keyword">this</span>.last) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="keyword">this</span>.current++&#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> rang) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>ES6 的有些数据结构原生具备 Iterator 接口（比如数组），即不用任何处理，就可以被<code>for...of</code>循环遍历。原因在于，这些数据结构原生部署了<code>Symbol.iterator</code>属性，另外一些数据结构没有（比如对象）。凡是部署了<code>Symbol.iterator</code>属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。</p>
<p>原生具备 Iterator 接口的数据结构如下：</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<h2><span id="字符串迭代器">字符串迭代器</span></h2><p><code>string</code> 是可迭代，可以循环遍历出每个字节，对于包含特殊的表情符号的字符串也适用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// t</span></span><br><span class="line"><span class="comment">// e</span></span><br><span class="line"><span class="comment">// s</span></span><br><span class="line"><span class="comment">// t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'𝒳😂'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( char ); <span class="comment">// 𝒳, and then 😂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/iterator</a></li>
<li><a href="https://javascript.info/iterable" target="_blank" rel="external">https://javascript.info/iterable</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(8) | Data type —— Map,WeakMap,Set,WeakSet]]></title>
      <url>/posts/f4ac3ebf.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇文章我们来学习一下 JavaScript 中的集合对象 <code>Map</code> 和 <code>Set</code> 。</p><a id="more"></a><h2><span id="map">Map</span></h2><p><code>map</code> 键值对，和 java 中的 map集合特性一致，只是语法上稍微有些差别。</p><h3><span id="基本用法">基本用法</span></h3><p>主要方法如下：</p><ul><li><code>new Map()</code> – 创建Map.</li><li><code>map.set(key, value)</code> – 存储key-value键值对</li><li><code>map.get(key)</code> – 查询<code>key</code>对应的value值,如果不存在，则返回 <code>undefined</code>.</li><li><code>map.has(key)</code> – 判断 <code>key</code> 否则存在，有则返回 <code>true</code>，反之返回 <code>false</code>.</li><li><code>map.delete(key)</code> – 删除 key 对应的键值对。</li><li><code>map.clear()</code> – 清空map。</li><li><code>map.size</code> – 返回map对应的元素数量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123;<span class="attr">name</span>: <span class="string">"John"</span>&#125;;</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">'1'</span>, <span class="string">'str1'</span>) <span class="comment">// a string key</span></span><br><span class="line">    .set(<span class="number">1</span>, <span class="string">'num1'</span>) <span class="comment">// a numeric key</span></span><br><span class="line">    .set(<span class="literal">true</span>, <span class="string">'bool1'</span>) <span class="comment">// a boolean key</span></span><br><span class="line">    .set(john, <span class="number">123</span>) <span class="comment">// a object key</span></span><br><span class="line">    .set(<span class="literal">NaN</span>, <span class="string">'hello'</span>)</span><br><span class="line">    .set(<span class="literal">NaN</span>, <span class="string">'World'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.has(john)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(john)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">1</span>)); <span class="comment">// 'num1'</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'1'</span>)); <span class="comment">// 'str1'</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="literal">NaN</span>)); <span class="comment">// world</span></span><br><span class="line"></span><br><span class="line">map.clear();</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>map.set 会返回 map自身，所以我们可以链式调用set接口</p>
</blockquote>
<h3><span id="key-唯一性">key 唯一性</span></h3><p>键的比较是基于 <a href="https://tc39.github.io/ecma262/#sec-samevaluezero" target="_blank" rel="external">SameValueZero</a> 算法：<code>NaN</code> 是与 <code>NaN</code> 相同的（虽然 <code>NaN !== NaN</code>），剩下所有其它的值是根据 === 运算符的结果判断是否相等。在目前的ECMAScript规范中，<code>-0</code>和<code>+0</code>被认为是相等的，尽管这在早期的草案中并不是这样。有关详细信息，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7" target="_blank" rel="external">浏览器兼容性</a> 表中的“value equality for -0 and 0”。</p>
<h3><span id="遍历">遍历</span></h3><ul>
<li><code>keys()</code>：返回键名的遍历器。</li>
<li><code>values()</code>：返回键值的遍历器。</li>
<li><code>entries()</code>：返回所有成员的遍历器。</li>
<li><code>forEach()</code>：遍历 Map 的所有成员。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">    .set(<span class="string">'b'</span>, <span class="number">2</span>)</span><br><span class="line">    .set(<span class="string">'c'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry[<span class="number">0</span>], entry[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多有关Map的使用介绍请查看：<a href="http://es6.ruanyifeng.com/#docs/set-map#Map" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/set-map#Map</a></p>
</blockquote>
<h3><span id="与其他数据类型之间的转换">与其他数据类型之间的转换</span></h3><h4><span id="map-gt-array">Map ===&gt; Array</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">    .set(<span class="string">'b'</span>, <span class="number">2</span>)</span><br><span class="line">    .set(<span class="string">'c'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(map)); </span><br><span class="line"><span class="comment">// [ [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...map]); </span><br><span class="line"><span class="comment">// [ [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] ]</span></span><br></pre></td></tr></table></figure>
<p>####Array ===&gt; Map</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [ [ <span class="string">'a'</span>, <span class="number">1</span> ], [ <span class="string">'b'</span>, <span class="number">2</span> ], [ <span class="string">'c'</span>, <span class="number">3</span> ] ];</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(array);</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">// Map &#123; 'a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3 &#125;</span></span><br></pre></td></tr></table></figure>
<h4><span id="map-gt-object">Map ===&gt; Object</span></h4><blockquote>
<p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">map.set(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="string">'keyString'</span>, <span class="string">"value associated with 'a string'"</span>);</span><br><span class="line">map.set(<span class="string">'keyObj'</span>, <span class="string">'value associated with keyObj'</span>);</span><br><span class="line">map.set(<span class="string">'keyFunc'</span>, <span class="string">'value associated with keyFunc'</span>);</span><br><span class="line">map.set(<span class="number">0</span>, <span class="string">'zero'</span>);</span><br><span class="line">map.set(<span class="number">1</span>, <span class="string">'one'</span>);</span><br><span class="line">map.set(<span class="string">'contra'</span>, &#123;<span class="attr">description</span>: <span class="string">'Asynchronous flow control'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'dragula'</span>, &#123;<span class="attr">description</span>: <span class="string">'Drag and drop'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'woofmark'</span>, &#123;<span class="attr">description</span>: <span class="string">'Markdown and WYSIWYG editor'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此种方法更快 635 ms</span></span><br><span class="line"><span class="keyword">const</span> strMapToObj = <span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">of</span> map)&#123;</span><br><span class="line">        obj[prop[<span class="number">0</span>]] = prop[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(strMapToObj(map));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此种方法慢 4704 ms</span></span><br><span class="line"><span class="keyword">const</span> strMapToObj2 = <span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Array</span>.from(map).reduce(<span class="function">(<span class="params">obj, [key, value]</span>) =&gt;</span> (</span><br><span class="line">        <span class="built_in">Object</span>.assign(obj, &#123; [key]: value &#125;) <span class="comment">// Be careful! Maps can have non-String keys; object literals can't.</span></span><br><span class="line">    ), &#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strMapToObj2(map)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; '0': 'zero',</span></span><br><span class="line"><span class="comment">//     '1': 'one',</span></span><br><span class="line"><span class="comment">//     a: 1,</span></span><br><span class="line"><span class="comment">//     b: 2,</span></span><br><span class="line"><span class="comment">//     c: 3,</span></span><br><span class="line"><span class="comment">//     keyString: 'value associated with \'a string\'',</span></span><br><span class="line"><span class="comment">//     keyObj: 'value associated with keyObj',</span></span><br><span class="line"><span class="comment">//     keyFunc: 'value associated with keyFunc',</span></span><br><span class="line"><span class="comment">//     contra: &#123; description: 'Asynchronous flow control' &#125;,</span></span><br><span class="line"><span class="comment">//     dragula: &#123; description: 'Drag and drop' &#125;,</span></span><br><span class="line"><span class="comment">//     woofmark: &#123; description: 'Markdown and WYSIWYG editor' &#125; &#125;</span></span><br></pre></td></tr></table></figure>
<h4><span id="object-gt-map">Object ===&gt; Map</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">'wangwei'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(user));</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">// Map &#123; 'name' =&gt; 'wangwei', 'age' =&gt; 25 &#125;</span></span><br></pre></td></tr></table></figure>
<h4><span id="map-gt-json">Map ===&gt; JSON</span></h4><p>如果map里面的key名都是字符串，可以选择直接转为 json 对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">map.set(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="string">'contra'</span>, &#123;<span class="attr">description</span>: <span class="string">'Asynchronous flow control'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'dragula'</span>, &#123;<span class="attr">description</span>: <span class="string">'Drag and drop'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'woofmark'</span>, &#123;<span class="attr">description</span>: <span class="string">'Markdown and WYSIWYG editor'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strMapToObj = <span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">of</span> map)&#123;</span><br><span class="line">        obj[prop[<span class="number">0</span>]] = prop[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strMapToJson(map));</span><br></pre></td></tr></table></figure>
<p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">map.set(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="string">'contra'</span>, &#123;<span class="attr">description</span>: <span class="string">'Asynchronous flow control'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'dragula'</span>, &#123;<span class="attr">description</span>: <span class="string">'Drag and drop'</span>&#125;);</span><br><span class="line">map.set(<span class="string">'woofmark'</span>, &#123;<span class="attr">description</span>: <span class="string">'Markdown and WYSIWYG editor'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapToArrayJson(map)</span><br><span class="line"><span class="comment">// '[[true,7],[&#123;"foo":3&#125;,["abc"]]]'</span></span><br></pre></td></tr></table></figure>
<h4><span id="json-gt-map">JSON ===&gt; Map</span></h4><p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToStrMap(<span class="string">'&#123;"yes": true, "no": false&#125;'</span>)</span><br><span class="line"><span class="comment">// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125;</span></span><br></pre></td></tr></table></figure>
<p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToMap(<span class="string">'[[true,7],[&#123;"foo":3&#125;,["abc"]]]'</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; ['abc']&#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="weakmap">WeakMap</span></h2><p><code>WeakMap</code> 的用法与 <code>Map</code> 大致类似，主要的区别在于：</p>
<ol>
<li>Map可以使用任意类型的数据作为 Key，而 WeakMap 只能使用对象作为 Key。它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。总之，<code>WeakMap</code>的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。</li>
<li><code>WeakMap</code> 只有这四个方法：<code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code>。<ul>
<li>没有遍历操作（即没有<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法），也没有<code>size</code>属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。</li>
<li>无法清空，即不支持<code>clear</code>方法。</li>
</ul>
</li>
</ol>
<blockquote>
<p>更多有关WeakMap的使用介绍请查看：<a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/set-map#WeakMap</a></p>
</blockquote>
<h4><span id="内存示例">内存示例</span></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// 打开 Node 命令行</span><br><span class="line"><span class="meta">$</span> node --expose-gc</span><br><span class="line"></span><br><span class="line">// 手动执行一次垃圾回收，保证获取的内存使用状态准确</span><br><span class="line"><span class="meta">&gt;</span> global.gc();</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">// 查看内存占用的初始状态，heapUsed 为 5M 左右</span><br><span class="line"><span class="meta">&gt;</span> process.memoryUsage();</span><br><span class="line">&#123; rss: 18923520,</span><br><span class="line">  heapTotal: 7110656,</span><br><span class="line">  heapUsed: 5164056,</span><br><span class="line">  external: 8731 &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> let wm = new WeakMap();</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">// 新建一个变量 key，指向一个 5*1024*1024 的数组</span><br><span class="line"><span class="meta">&gt;</span> let key = new Array(5 * 1024 * 1024);</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">// 设置 WeakMap 实例的键名，也指向 key 数组</span><br><span class="line">// 这时，key 数组实际被引用了两次，</span><br><span class="line">// 变量 key 引用一次，WeakMap 的键名引用了第二次</span><br><span class="line">// 但是，WeakMap 是弱引用，对于引擎来说，引用计数还是1</span><br><span class="line"><span class="meta">&gt;</span> wm.set(key, 1);</span><br><span class="line">WeakMap &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> global.gc();</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">// 这时内存占用 heapUsed 增加到 44M 了</span><br><span class="line"><span class="meta">&gt;</span> process.memoryUsage();</span><br><span class="line">&#123; rss: 62652416,</span><br><span class="line">  heapTotal: 50638848,</span><br><span class="line">  heapUsed: 47035976,</span><br><span class="line">  external: 8707 &#125;</span><br><span class="line"></span><br><span class="line">// 清除变量 key 对数组的引用，</span><br><span class="line">// 但没有手动清除 WeakMap 实例的键名对数组的引用</span><br><span class="line"><span class="meta">&gt;</span> key = null;</span><br><span class="line">null</span><br><span class="line"></span><br><span class="line">// 再次执行垃圾回收</span><br><span class="line"><span class="meta">&gt;</span> global.gc();</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">// 内存占用 heapUsed 变回 5M 左右，</span><br><span class="line">// 可以看到 WeakMap 的键名引用没有阻止 gc 对内存的回收</span><br><span class="line"><span class="meta">&gt;</span> process.memoryUsage();</span><br><span class="line">&#123; rss: 20955136,</span><br><span class="line">  heapTotal: 8683520,</span><br><span class="line">  heapUsed: 5073920,</span><br><span class="line">  external: 8703 &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="set">Set</span></h2><p><code>Set</code> 集合与java中的 <code>Set</code> 类似，所有的元素都是唯一的，没有重复的值。</p>
<h3><span id="基本用法">基本用法</span></h3><ul>
<li><code>add(value)</code>：添加某个值，返回 Set 结构本身。</li>
<li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li>
<li><code>clear()</code>：清除所有成员，没有返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="comment">// Set &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line"></span><br><span class="line">set.add(<span class="number">1</span>).add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="comment">// Set &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="comment">// Set &#123; 2, 3, 4, 5 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set.size);</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h3><span id="元素唯一性">元素唯一性</span></h3><p>同 Map  中的 key 一样，也是采用的  <a href="https://tc39.github.io/ecma262/#sec-samevaluezero" target="_blank" rel="external">SameValueZero</a> 算法。</p>
<h3><span id="遍历">遍历</span></h3><ul>
<li><code>keys()</code>：返回键名的遍历器</li>
<li><code>values()</code>：返回键值的遍历器</li>
<li><code>entries()</code>：返回键值对的遍历器</li>
<li><code>forEach()</code>：使用回调函数遍历每个成员</li>
</ul>
<h3><span id="与其他数据类型之间的转换">与其他数据类型之间的转换</span></h3><h4><span id="set-gt-array">set ===&gt; array</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> array = <span class="built_in">Array</span>.from(items);</span><br></pre></td></tr></table></figure>
<h2><span id="weakset">WeakSet</span></h2><p><code>WeakSet</code> 的特性与前面 <code>WeakMap</code> 中存放 Key 的特性类似，这里不多做介绍。</p>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/set-map</a></li>
<li><a href="https://javascript.info/map-set-weakmap-weakset" target="_blank" rel="external">https://javascript.info/map-set-weakmap-weakset</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(7) | Data Type —— Array]]></title>
      <url>/posts/a1e7623d.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇文章重点介绍JavaScript中数组的特性。</p><a id="more"></a><h2><span id="声明">声明</span></h2><h3><span id="创建">创建</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr = []; <span class="comment">// 这种方式更为常见</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g: </span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Plum"</span>];</span><br></pre></td></tr></table></figure>
<p>与java这种强类型不同的是，javascript中的数组可以存储任意类型的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="string">'Apple'</span>, &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125;, <span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'hello'</span>); &#125; ];</span><br></pre></td></tr></table></figure>
<h3><span id="数组判断">数组判断</span></h3><blockquote>
<p>Array.isArray()</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([])); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2><span id="添加移除元素">添加/移除元素</span></h2><blockquote>
<p>javascript中的数组，头部和尾部均支持元素的添加和移除，可以用来实现stack（栈）、quene（队列）、deque（双端队列）特性。</p>
</blockquote>
<h4><span id="unshift-and-shift">unshift and shift</span></h4><ul>
<li><code>unshift</code>：数组头部插入一个元素</li>
<li><code>shift</code>：数组头部移除一个元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> ];</span><br><span class="line">nums2.unshift(<span class="number">1</span>); <span class="comment">// insert 1 to the first of an array</span></span><br><span class="line"><span class="built_in">console</span>.log(nums2); <span class="comment">// [ 1, 1, 2, 3, 5, 8 ];</span></span><br><span class="line"></span><br><span class="line">nums2.shift(); <span class="comment">// delete 1 to the first of an array</span></span><br><span class="line"><span class="built_in">console</span>.log(nums2); <span class="comment">// [ 1, 2, 3, 5, 8 ];</span></span><br></pre></td></tr></table></figure>
<h4><span id="push-amp-pop">push &amp; pop</span></h4><blockquote>
<p>栈：LIFO（后进先出）</p>
</blockquote>
<ul>
<li>push：数组尾部添加一个元素</li>
<li>pop：数组尾部移除一个元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">nums.push(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 8 ]</span></span><br><span class="line"></span><br><span class="line">nums.pop();</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>性能比较：尾部 <code>push/pop</code> 的操作速度比头部的 <code>shift/unshift</code> 操作要快，因为头部插入/删除元素，都会影响到数组中所有元素下标的变化，元素越多，速度越慢。</p>
</blockquote>
<h4><span id="splice">splice</span></h4><blockquote>
<p><code>splice(pos, deleteCount, ...items)</code> ：删除索引为 <code>pos</code> ，数量为<code>deleteCount</code>的元素，并且插入元素  items</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">'cat'</span>, <span class="string">'rat'</span>, <span class="string">'bat'</span>, <span class="string">'dog'</span>, <span class="string">'pig'</span>, <span class="string">'horse'</span>];</span><br><span class="line">arr3.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'chicken'</span>); <span class="comment">// delete item</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [ 'cat', 'rat', 'chicken', 'pig', 'horse' ]</span></span><br></pre></td></tr></table></figure>
<h4><span id="concat">concat</span></h4><blockquote>
<p><code>concat(...items)</code>：拼接多个数组，并返回一个新的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'cat'</span>, <span class="string">'rat'</span>, <span class="string">'bat'</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">'dog'</span>, <span class="string">'pig'</span>, <span class="string">'horse'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure>
<h4><span id="slice">slice</span></h4><blockquote>
<p><code>slice(start,end)</code>：复制数组元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vegetables = [<span class="string">'Cabbage'</span>, <span class="string">'Turnip'</span>, <span class="string">'Radish'</span>, <span class="string">'Carrot'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(vegetables.slice());</span><br><span class="line"><span class="comment">// [ 'Cabbage', 'Turnip', 'Radish', 'Carrot' ]</span></span><br></pre></td></tr></table></figure>
<h2><span id="搜索">搜索</span></h2><h4><span id="filter">filter</span></h4><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// should return true if the item passes the filter</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"John"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Pete"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mary"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someUsers = users.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id &lt;= <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(someUsers);</span><br></pre></td></tr></table></figure>
<h4><span id="indexof-amp-lastindexof-amp-includes">indexOf &amp; lastIndexOf &amp; includes</span></h4><ul>
<li><code>arr.indexOf(item, from)</code>：从索引 <code>from</code> 位置开始搜索 <code>item</code>，存在则返回对应的索引，不存在则返回 <code>-1</code>。</li>
<li><code>arr.lastIndexOf(item, from)</code>：与<code>indexof</code>类似，只是方向为从右向左进行搜索。</li>
<li><code>arr.includes(item, from)</code> ：从索引 <code>from</code> 位置开始搜索 <code>item</code>，存在则返回 <code>true</code> ，反之返回 <code>false</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'Apple'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'Orange'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'Pear'</span>));</span><br></pre></td></tr></table></figure>
<h4><span id="find">find</span></h4><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// should return true if the item is what we are looking for</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"John"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Pete"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mary"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = users.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// John</span></span><br></pre></td></tr></table></figure>
<h4><span id="findindex">findIndex</span></h4><p>与 <code>find</code> 类似，只不过返回的是元素的下标。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"John"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Pete"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mary"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userIndex = users.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userIndex); <span class="comment">// John</span></span><br></pre></td></tr></table></figure>
<h2><span id="数组转换">数组转换</span></h2><h4><span id="arrmap">arr.map</span></h4><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// returns the new value instead of item</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"John"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Pete"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mary"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userIds = users.map(<span class="function"><span class="params">item</span> =&gt;</span> item.id);</span><br><span class="line"><span class="built_in">console</span>.log(userIds); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>
<h4><span id="reverse">reverse</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [ 'Pear', 'Orange', 'Apple' ]</span></span><br></pre></td></tr></table></figure>
<h4><span id="split-amp-join">split &amp; join</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// split</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'Apple Orange Pear'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">' '</span>)); <span class="comment">// [ 'Apple', 'Orange', 'Pear' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// join</span></span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="string">'Apple'</span>, <span class="string">'Orange'</span>, <span class="string">'Pear'</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">','</span>)); <span class="comment">// Apple,Orange,Pear</span></span><br></pre></td></tr></table></figure>
<h4><span id="sortfn">sort(fn)</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span> - <span class="number">1</span>, <span class="number">-6</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)); <span class="comment">// [ -6, -1, 0, 1, 2, 3, 5, 6, 7 ]</span></span><br></pre></td></tr></table></figure>
<h4><span id="reduce">reduce</span></h4><p><code>reduce(func, initial)</code>：对数组中的数值进行累计运算（例如：累加、累乘等等），前一个元素的运算结果将会带到下一个元素的运算中去。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> addReducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(addReducer));</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(addReducer, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multipReducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator * currentValue;</span><br><span class="line"><span class="comment">// 1 * 2 * 3 * 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(multipReducer));</span><br><span class="line"><span class="comment">// expected output: 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 * 1 * 2 * 3 * 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(multipReducer, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 120</span></span><br></pre></td></tr></table></figure>
<h2><span id="遍历">遍历</span></h2><h4><span id="方式一">方式一</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"><span class="comment">// Orange</span></span><br><span class="line"><span class="comment">// Pear</span></span><br></pre></td></tr></table></figure>
<h4><span id="方式二">方式二</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"><span class="comment">// Orange</span></span><br><span class="line"><span class="comment">// Pear</span></span><br></pre></td></tr></table></figure>
<h4><span id="方式三">方式三</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Pear"</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"><span class="comment">// Orange</span></span><br><span class="line"><span class="comment">// Pear</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/array" target="_blank" rel="external">https://javascript.info/array</a></li>
<li><a href="https://javascript.info/array-methods" target="_blank" rel="external">https://javascript.info/array-methods</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(6) | Symbol Type]]></title>
      <url>/posts/f8560033.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p><a id="more"></a><p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p>Symbol 值通过<code>Symbol</code>函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p><h2><span id="声明">声明</span></h2><p>声明方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id is a new symbol</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>();</span><br></pre></td></tr></table></figure>
<p>我们也可以为其添加名称：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id is a symbol with the description "id"</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure>
<p>由于 <code>Symbol</code> 对象代表着唯一标识，即使名称一样，其对象也不相同：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id1 == id2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>如果想要创建相同的<code>Symbol</code>，可以使用 <code>Symbol.for</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="built_in">Symbol</span>.for(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="built_in">Symbol</span>.for(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id1 == id2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2><span id="对象属性">对象属性</span></h2><p>使用 <code>Symbol</code> 作为一个对象的属性，方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    [id]: <span class="number">123</span> <span class="comment">// not just "id: 123"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user[id]);</span><br></pre></td></tr></table></figure>
<h3><span id="对-forin-隐藏">对 for…in 隐藏</span></h3><p>Symbol 的属性不会参与 for…in 循环。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) <span class="built_in">console</span>.log(key); <span class="comment">// name, age (no symbols)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the direct access by the symbol works</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"Direct: "</span> + user[id] );</span><br></pre></td></tr></table></figure>
<p>不过，<code>Object.assign</code> 可以对 Symbol 属性进行复制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = <span class="built_in">Object</span>.assign(&#123;&#125;, user);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( clone[id] ); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/symbol#system-symbols" target="_blank" rel="external">https://javascript.info/symbol#system-symbols</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(5) | Objects]]></title>
      <url>/posts/b5949fa3.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://wangwei.one/posts/f88dc8a9.html">前面</a> 我们介绍了JavaScript中的6种原生的数据类型，</p><a id="more"></a><h2><span id="创建">创建</span></h2><h3><span id="初始化">初始化</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;; <span class="comment">// 推荐这种方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; 		    <span class="comment">// an object</span></span><br><span class="line">   name: <span class="string">"John"</span>,	    <span class="comment">// by key "name" store value "John"</span></span><br><span class="line">   age: <span class="number">30</span>,			    <span class="comment">// by key "age" store value 30</span></span><br><span class="line">   <span class="string">"likes birds"</span>: <span class="literal">true</span>   <span class="comment">// multiword property name must be quoted</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3><span id="创建复杂对象">创建复杂对象</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = &#123;</span><br><span class="line">    myValue: <span class="number">123</span>,</span><br><span class="line">    bas: [&#123;</span><br><span class="line">        myItem: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            myItem: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            myItem: <span class="number">3</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myData.myValue); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log(myData.bas[<span class="number">0</span>].myItem); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(myData.bas[<span class="number">2</span>].myItem); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3><span id="构造器函数">构造器函数</span></h3><p>但我们需要创建大量类似的对象时，使用 <code>{...}</code> 语法不便于代码复用，这里需要使用 <code>constructor funcation（构造器函数）</code> 。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.isAdmin = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">"Jack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(user.isAdmin); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>可以简写为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span>;</span><br><span class="line">    <span class="keyword">this</span>.isAdmin = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.name); <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(user.isAdmin); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2><span id="属性操作">属性操作</span></h2><h4><span id="初始化属性">初始化属性</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; 		    <span class="comment">// an object</span></span><br><span class="line">   name: <span class="string">"John"</span>,	    <span class="comment">// by key "name" store value "John"</span></span><br><span class="line">   age: <span class="number">30</span>,			    <span class="comment">// by key "age" store value 30</span></span><br><span class="line">   <span class="string">"likes birds"</span>: <span class="literal">true</span>   <span class="comment">// multiword property name must be quoted</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4><span id="添加属性">添加属性</span></h4><p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add field</span></span><br><span class="line">user.isAdmin = <span class="literal">true</span>;</span><br><span class="line">user[<span class="string">"hobby"</span>] = <span class="string">'reading'</span>;</span><br></pre></td></tr></table></figure>
<h4><span id="删除属性">删除属性</span></h4><p><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delete field</span></span><br><span class="line"><span class="keyword">delete</span> user.age;</span><br><span class="line"><span class="keyword">delete</span> user[<span class="string">"likes birds"</span>];</span><br></pre></td></tr></table></figure>
<h4><span id="查询属性">查询属性</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get fields of the object:</span></span><br><span class="line"><span class="built_in">console</span>.log(user.name);</span><br><span class="line"><span class="built_in">console</span>.log(user[<span class="string">"likes birds"</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3><span id="查询所有属性">查询所有属性</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user));</span><br><span class="line">[ <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'likes birds'</span> ]</span><br></pre></td></tr></table></figure>
<h3><span id="in-运算符">in 运算符</span></h3><p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'p'</span> <span class="keyword">in</span> obj);</span><br><span class="line"> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString'</span> <span class="keyword">in</span> obj);</span><br><span class="line"> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3><span id="forin循环">for…in循环</span></h3><p><code>for...in</code>循环用来遍历一个对象的全部属性。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for...in</code>循环有两个使用注意点。</p>
<blockquote>
<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>
</blockquote>
<p>举例来说，对象都继承了<code>toString</code>属性，但是<code>for...in</code>循环不会遍历到这个属性。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// toString 属性是存在的</span></span><br><span class="line">obj.toString;<span class="comment">// toString() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125; <span class="comment">// 没有任何输出</span></span><br></pre></td></tr></table></figure>
<p>如果继承的属性是可遍历的，那么就会被<code>for...in</code>循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用<code>for...in</code>的时候，应该结合使用<code>hasOwnProperty</code>方法，在循环内部判断一下，某个属性是否为对象自身的属性。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">'老张'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="keyword">if</span> (person.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name</span></span><br></pre></td></tr></table></figure>
<h2><span id="object克隆与合并">Object克隆与合并</span></h2><p>如果我们想要深度复制一个对象，可以有以下两种方式：</p>
<p>1）属性遍历，这种方法不是很优雅</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    <span class="string">"likes birds"</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">    clone[key] = user[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(clone));</span><br><span class="line"><span class="comment">// [ 'name', 'age', 'likes birds' ]</span></span><br></pre></td></tr></table></figure>
<p>2）使用 <code>Object.assign</code> ，语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(dest, src1, src2, src3... srcN)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 src1 ~ srcN 中的属性copy 到 dest 中</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    <span class="string">"likes birds"</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">    hobby: <span class="string">"reading"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(clone, user, user1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(clone)); </span><br><span class="line"><span class="comment">// [ 'name', 'age', 'likes birds', 'hobby' ]</span></span><br></pre></td></tr></table></figure>
<h2><span id="方法">方法</span></h2><p>现实世界中，一个对象除了拥有属性特征外，还有一定的行为特征， 例如一个人除了身高、年龄外，还会唱歌、阅读、弹吉他等等。当我们用一个对象来代表某一个实体时，这就是一个面向对象的编程思想。OOP</p>
<p>例如，<code>user</code> 拥有一个 <code>sayHi</code> 的功能：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.sayHi(); <span class="comment">// Hello!</span></span><br></pre></td></tr></table></figure>
<p>可以更简单地声明为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// these objects do the same</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method shorthand looks better, right?</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    sayHi() &#123; <span class="comment">// same as "sayHi: function()"</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们可以把 <code>sayHi</code> 放到 user 的构造器中去：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">'Jack'</span>, <span class="number">25</span>);</span><br><span class="line">user.sayHi();</span><br></pre></td></tr></table></figure>
<h2><span id="this">this</span></h2><p>在 javascript 中，<code>this</code> 不像其他编程语言中的一样，首先，它能够被用在任何方法中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.name ); <span class="comment">// 没有语法错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure>
<p><code>this</code> 的值，需要在运行的时候才能被确定，它有可能代表任何事情。例如下面 <code>sayHi()</code> 中的 <code>this</code> 在运行时，分别代表着 <code>user</code>、<code>admin</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">"Admin"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the same functions in two objects</span></span><br><span class="line">user.f = sayHi;</span><br><span class="line">admin.f = sayHi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// these calls have different this</span></span><br><span class="line"><span class="comment">// "this" inside the function is the object "before the dot"</span></span><br><span class="line">user.f(); <span class="comment">// John  (this == user)</span></span><br><span class="line">admin.f(); <span class="comment">// Admin  (this == admin)</span></span><br><span class="line"></span><br><span class="line">admin[<span class="string">'f'</span>](); <span class="comment">// Admin (dot or square brackets access the method – doesn't matter)</span></span><br></pre></td></tr></table></figure>
<h2><span id="objectkeys-values-entries">Object.keys, values, entries</span></h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="external">Object.keys(obj)</a> – 返回对象的属性数组。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="external">Object.values(obj)</a> – 返回对象的属性值数组。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="external">Object.entries(obj)</a> – 返回对象属性及值的数组。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">'wangwei'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    hobby: <span class="string">'reading book'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user));</span><br><span class="line"><span class="comment">// [ 'name', 'age', 'hobby' ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(user));</span><br><span class="line"><span class="comment">// [ 'wangwei', 25, 'reading book' ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(user));</span><br><span class="line"><span class="comment">// [ [ 'name', 'wangwei' ],</span></span><br><span class="line"><span class="comment">//   [ 'age', 25 ],</span></span><br><span class="line"><span class="comment">//   [ 'hobby', 'reading book' ] ]</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/object#literals-and-properties" target="_blank" rel="external">https://javascript.info/object#literals-and-properties</a></li>
<li><a href="http://javascript.ruanyifeng.com/grammar/object.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/grammar/object.html</a></li>
<li><a href="https://javascript.info/object-methods#this-is-not-bound" target="_blank" rel="external">https://javascript.info/object-methods#this-is-not-bound</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(4) | Functions]]></title>
      <url>/posts/1c89568e.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Javascript 是一种函数式编程语言，函数是完全类型化的对象，可以作为数据进行操作、扩展和传递。</p><a id="more"></a><h2><span id="概述">概述</span></h2><h3><span id="函数声明">函数声明</span></h3><h4><span id="funcation命令">funcation命令</span></h4><p><code>function</code>命令声明的代码区块，就是一个函数。<code>function</code>命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'Hello everyone!'</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="函数表达式">函数表达式</span></h4><p>将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Hello"</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sayHi); <span class="comment">// [Function: sayHi]</span></span><br></pre></td></tr></table></figure>
<h3><span id="重复声明">重复声明</span></h3><p>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'Hello everyone!'</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showMessage();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'Hello wangwei!'</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showMessage();</span><br></pre></td></tr></table></figure>
<h3><span id="return-语句和递归">return 语句和递归</span></h3><p>函数体内部的<code>return</code>语句，表示返回。JavaScript 引擎遇到<code>return</code>语句，就直接返回<code>return</code>后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，<code>return</code>语句所带的那个表达式，就是函数的返回值。<code>return</code>语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(num - <span class="number">2</span>) + fib(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">6</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<h3><span id="第一等公民">第一等公民</span></h3><p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p>
<p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数赋值给一个变量</span></span><br><span class="line"><span class="keyword">let</span> operator = add;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数作为参数和返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">op</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a(add)(<span class="number">1</span>, <span class="number">1</span>));<span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3><span id="函数名提升">函数名提升</span></h3><p>JavaScript 引擎将函数名视同变量名，所以采用<code>function</code>命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">showMessage(); <span class="comment">// Hello, I'm JavaScript!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">"Hello, I'm JavaScript!"</span>; <span class="comment">// local variable</span></span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="不能在条件语句中声明函数">不能在条件语句中声明函数</span></h3><p>根据 ES5 的规范，不得在非函数的代码块中声明函数，最常见的情况就是<code>if</code>和<code>try</code>语句。 下面代码在<code>if</code>代码块中声明了两个函数 <code>welcome</code> ，按照语言规范，这是不合法的。但是，实际情况是各家浏览器往往并不报错，能够运行。</p>
<p>但是由于存在函数名的提升，所以在条件语句中声明函数，可能是无效的，这是非常容易出错的地方。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// conditionally declare a function</span></span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Greetings!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...use it later</span></span><br><span class="line">welcome(); <span class="comment">// Greetings</span></span><br></pre></td></tr></table></figure>
<h2><span id="函数的属性和方法">函数的属性和方法</span></h2><h3><span id="name属性">name属性</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1.name);<span class="comment">// "f1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">let</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f2.name);<span class="comment">// "f2"</span></span><br></pre></td></tr></table></figure>
<h3><span id="length-属性">length 属性</span></h3><p>函数的<code>length</code>属性返回函数预期传入的参数个数，即函数定义之中的参数个数。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3><span id="tostring">toString()</span></h3><p>函数的<code>toString</code>方法返回一个字符串，内容是函数的源码。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">    b();</span><br><span class="line">    c();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f.toString());</span><br><span class="line"><span class="comment">// function f() &#123;</span></span><br><span class="line"><span class="comment">//     a();</span></span><br><span class="line"><span class="comment">//     b();</span></span><br><span class="line"><span class="comment">//     c();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h2><span id="函数作用域">函数作用域</span></h2><h3><span id="定义">定义</span></h3><p>作用域（scope）指的是变量存在的范围。</p>
<p>在 ES5 的规范中，Javascript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。</p>
<p>在ES6 规范中，新增了块级作用域。详见 <a href="https://wangwei.one/posts/92c3001f.html">let vs var</a> 。</p>
<p>####全局变量</p>
<p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h4><span id="局部变量">局部变量</span></h4><p>在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v <span class="comment">// ReferenceError: v is not defined</span></span><br></pre></td></tr></table></figure>
<p>函数内部定义的变量，会在该作用域内覆盖同名全局变量。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(v);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h3><span id="函数内部的变量提升">函数内部的变量提升</span></h3><p>这种现象只会发生在 <code>var</code> 生命的变量上，<code>let</code> 则不会。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h3><span id="函数本身的作用域">函数本身的作用域</span></h3><p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    x();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>x</code>是在函数<code>f</code>的外部声明的，所以它的作用域绑定外层，内部变量<code>a</code>不会到函数<code>f</code>体内取值，所以输出<code>1</code>，而不是<code>2</code>。</p>
<p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">y(x)</span><br><span class="line"><span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
<p>上面代码将函数<code>x</code>作为参数，传入函数<code>y</code>。但是，函数<code>x</code>是在函数<code>y</code>体外声明的，作用域绑定外层，因此找不到函数<code>y</code>的内部变量<code>a</code>，导致报错。</p>
<p>同样的，函数体内部声明的函数，作用域绑定函数体内部。</p>
<h2><span id="闭包">闭包</span></h2><p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
<p>理解闭包，首先必须理解变量作用域。前面提到，JavaScript 有两种作用域：全局作用域和函数作用域。函数内部可以直接读取全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line">f1();<span class="comment">// 999</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>f1</code>可以读取全局变量<code>n</code>。</p>
<p>但是，函数外部无法读取函数内部声明的变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// ReferenceError: n is not defined</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>f1</code>内部声明的变量<code>n</code>，函数外是无法读取的。</p>
<p>如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">999</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(n); <span class="comment">// 999</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>f2</code>就在函数<code>f1</code>内部，这时<code>f1</code>内部的所有局部变量，对<code>f2</code>都是可见的。但是反过来就不行，<code>f2</code>内部的局部变量，对<code>f1</code>就是不可见的。这就是 JavaScript 语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然<code>f2</code>可以读取<code>f1</code>的局部变量，那么只要把<code>f2</code>作为返回值，我们不就可以在<code>f1</code>外部读取它的内部变量了吗！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = f1();</span><br><span class="line">result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>f1</code>的返回值就是函数<code>f2</code>，由于<code>f2</code>可以读取<code>f1</code>的内部变量，所以就可以在外部获得<code>f1</code>的内部变量了。</p>
<p>闭包就是函数<code>f2</code>，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如<code>f2</code>记住了它诞生的环境<code>f1</code>，所以从<code>f2</code>可以得到<code>f1</code>的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<p>闭包的最大用处有两个，一个是可以<strong>读取函数内部的变量</strong>，另一个就是<strong>让这些变量始终保持在内存中</strong>，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrementor</span>(<span class="params">start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start++;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inc = createIncrementor(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inc()); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(inc()); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(inc()); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>start</code>是函数<code>createIncrementor</code>的内部变量。通过闭包，<code>start</code>的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包<code>inc</code>使得函数<code>createIncrementor</code>的内部环境，一直存在。所以，闭包可以看作是函数内部作用域的一个接口。</p>
<p>为什么会这样呢？原因就在于<code>inc</code>始终在内存中，而<code>inc</code>的存在依赖于<code>createIncrementor</code>，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。</p>
<p>闭包的另一个用处，<strong>是封装对象的私有属性和私有方法</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _age;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setAge</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        _age = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        getAge: getAge,</span><br><span class="line">        setAge: setAge</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = Person(<span class="string">'张三'</span>);</span><br><span class="line">p1.setAge(<span class="number">25</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getAge()); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>Person</code>的内部变量<code>_age</code>，通过闭包<code>getAge</code>和<code>setAge</code>，变成了返回对象<code>p1</code>的私有变量。</p>
<p>注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因此不能滥用闭包，否则会造成网页的性能问题。</p>
<h2><span id="立即调用的函数表达式iife">立即调用的函数表达式（IIFE）</span></h2><blockquote>
<p>Immediately-Invoked Function Expression</p>
</blockquote>
<p>在 Javascript 中，圆括号<code>()</code>是一种运算符，跟在函数名之后，表示调用该函数。比如，<code>print()</code>就表示调用<code>print</code>函数。</p>
<p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：</p>
<ul>
<li>一是不必为函数命名，避免了污染全局变量；</li>
<li>二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">var</span> tmp = newData;</span><br><span class="line">processData(tmp);</span><br><span class="line">storeData(tmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = newData;</span><br><span class="line">    processData(tmp);</span><br><span class="line">    storeData(tmp);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。 </p>
<h2><span id="箭头函数arrow-functions">箭头函数（Arrow functions）</span></h2><p>还有一个非常简单和简洁的语法用于创建函数，这通常比函数表达式更好。 它被称为“箭头函数”，因为它看起来像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function">(<span class="params">arg1, arg2, ...argN</span>) =&gt;</span> expression</span><br></pre></td></tr></table></figure>
<p>等同于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2, ...argN</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看几个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The arrow function is a shorter form of:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let sum = function(a, b) &#123;</span></span><br><span class="line"><span class="comment">  return a + b;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( sum(<span class="number">1</span>, <span class="number">2</span>) ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// same as</span></span><br><span class="line"><span class="comment">// let double = function(n) &#123; return n * 2 &#125;</span></span><br><span class="line"><span class="keyword">let</span> double = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( double(<span class="number">3</span>) ); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Hello!"</span>);</span><br><span class="line"></span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> welcome = (age &lt; <span class="number">18</span>) ?</span><br><span class="line">    () =&gt; <span class="built_in">console</span>.log(<span class="string">'Hello'</span>) :</span><br><span class="line">    () =&gt; <span class="built_in">console</span>.log(<span class="string">"Greetings!"</span>);</span><br><span class="line"></span><br><span class="line">welcome(); <span class="comment">// ok now</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/function-expressions-arrows" target="_blank" rel="external">https://javascript.info/function-expressions-arrows</a></li>
<li><a href="http://javascript.ruanyifeng.com/grammar/function.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/grammar/function.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(3) | Primitive Data Type]]></title>
      <url>/posts/f88dc8a9.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>JavaScript中有7种基本的数据类型：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）、Symbol。本篇文章先来简要介绍一下他们的特性，后面的文章会分别对它们做详细的说明介绍。</p><a id="more"></a><p>javascript 中的变量可以包含任何类型的数据。 一个变量可以在某一时刻是字符串类型，过会就可能变成数值类型，所以说javascript是一门动态类型语言。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no error</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line">message = <span class="number">123456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure>
<h2><span id="number">number</span></h2><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">123</span>;</span><br><span class="line">n = <span class="number">12.345</span>;</span><br></pre></td></tr></table></figure>
<p>除常规数字外，还有所谓的“特殊数值”，它们也属于这种类型：<code>Infinity</code>，<code>-Infinity</code>和<code>NaN</code>。</p>
<h5><span id="infinity">Infinity</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>/<span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-1</span>/<span class="number">0</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure>
<h5><span id="nan">NaN</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">"not a number"</span> / <span class="number">2</span> ); <span class="comment">// NaN, such division is erroneous</span></span><br></pre></td></tr></table></figure>
<p>对<code>NaN</code>的任何算术操作都只会得到 <code>NaN</code> 结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">"not a number"</span> / <span class="number">2</span> + <span class="number">5</span> ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多有关 number 的用法与介绍，请查看：</p>
<p><a href="http://javascript.ruanyifeng.com/grammar/number.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/grammar/number.html</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/number" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/number</a></p>
</blockquote>
<h2><span id="string">string</span></h2><p>使用单引号、双引号或者反引号表示，其中反引号用于表达式替换。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">'Single quotes are ok too'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// Single quotes are ok too</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> phrase = <span class="string">`can embed <span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(phrase,<span class="string">'hello'</span>); <span class="comment">// can embed Hello hello</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>javascript中没有 <code>char</code> 的概念。</p>
<p>更多有关 string 的用法与介绍，请查看：</p>
<p><a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/string</a></p>
<p><a href="http://javascript.ruanyifeng.com/grammar/string.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/grammar/string.html</a></p>
</blockquote>
<h2><span id="boolean">boolean</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isGreater = <span class="number">4</span> &gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( isGreater ); <span class="comment">// true (the comparison result is "yes")</span></span><br></pre></td></tr></table></figure>
<h2><span id="null">null</span></h2><p>在JavaScript中，<code>null</code>不是“对不存在的对象的引用”或者像其他语言中的“null pointer”。它只是一个特殊的值，表示“nothing”，“empty”或“value unknown”的意思。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>
<h2><span id="undefined">undefined</span></h2><p><code>undefined</code> 表示变量未被赋值，如果声明了变量但未被赋值，则其值完全未定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure>
<p>通常，我们使用<code>null</code>将“empty”或“unkown”值赋予变量，<code>undefined</code>仅用于检查，以查看变量是否已分配。</p>
<h2><span id="objects-and-symbols">Objects and Symbols</span></h2><h5><span id="objects">Objects</span></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> usr = &#123;</span><br><span class="line">    name : <span class="string">"wangwei"</span>,</span><br><span class="line">    age : <span class="number">23</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> usr); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>详细介绍：<a href="https://wangwei.one/posts/b5949fa3.html">https://wangwei.one/posts/b5949fa3.html</a></p>
</blockquote>
<h5><span id="symbols">Symbols</span></h5><p><code>symbol</code> 类型用于创建对象的唯一标示，这个后面部分详细说明，这里暂且略过。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s <span class="comment">// "symbol"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>详细介绍：<a href="https://wangwei.one/posts/f8560033.html">https://wangwei.one/posts/f8560033.html</a></p>
</blockquote>
<h2><span id="typeof">typeof</span></h2><p><code>typeof</code> 可以返回变量的类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">0</span>); <span class="comment">// "number"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">"foo"</span>); <span class="comment">// "string"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">"id"</span>)); <span class="comment">// "symbol"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Math</span>);<span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;); <span class="comment">// "function"</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><p><a href="https://javascript.info/types" target="_blank" rel="external">https://javascript.info/types</a></p>
</li>
<li><p><a href="http://es6.ruanyifeng.com/?search=Symbols&amp;x=0&amp;y=0#docs/symbol" target="_blank" rel="external">http://es6.ruanyifeng.com/?search=Symbols&amp;x=0&amp;y=0#docs/symbol</a></p></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(2) | Operators]]></title>
      <url>/posts/622ddccb.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>JavaScript中的运算符与其他语言中的一样，学起来难度不大。</p><a id="more"></a><h2><span id="算术运算符">算术运算符</span></h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取模</td></tr><tr><td>++</td><td>加1</td></tr><tr><td>–</td><td>减1</td></tr></tbody></table><h2><span id="赋值运算符">赋值运算符</span></h2><table><thead><tr><th>运算符</th><th>例子</th><th>等同于</th></tr></thead><tbody><tr><td>=</td><td>x = y</td><td>x = y</td></tr><tr><td>+=</td><td>x += y</td><td>x = x + y</td></tr><tr><td>-=</td><td>x -= y</td><td>x = x - y</td></tr><tr><td>*=</td><td>x *= y</td><td>x = x * y</td></tr><tr><td>/=</td><td>x /= y</td><td>x = x / y</td></tr><tr><td>%=</td><td>x %= y</td><td>x = x % y</td></tr></tbody></table><h2><span id="比较操作符">比较操作符</span></h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>equal to</td></tr><tr><td>===</td><td>equal value and equal type</td></tr><tr><td>!=</td><td>not equal</td></tr><tr><td>!==</td><td>not equal value or not equal type</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&gt;=</td><td>greater than or equal to</td></tr><tr><td>&lt;=</td><td>less than or equal to</td></tr><tr><td>?</td><td>ternary operator</td></tr></tbody></table><h2><span id="条件运算符">条件运算符</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> variable = boolean_expression ? true_value : false_value;</span><br></pre></td></tr></table></figure>
<h2><span id="逻辑运算符">逻辑运算符</span></h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>逻辑或</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
<h2><span id="类型操作">类型操作</span></h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>typeof</td>
<td>返回变量类型</td>
</tr>
<tr>
<td>instanceof</td>
<td>判断object是否为某一个类型</td>
</tr>
</tbody>
</table>
<h2><span id="位运算符">位运算符</span></h2><table>
<thead>
<tr>
<th>运算符</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND" target="_blank" rel="external">按位与（ AND）</a></td>
<td><code>a &amp; b</code></td>
<td>对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR" target="_blank" rel="external">按位或（OR）</a></td>
<td>`a</td>
<td>b`</td>
<td>对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR" target="_blank" rel="external">按位异或（XOR）</a></td>
<td><code>a ^ b</code></td>
<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT" target="_blank" rel="external">按位非（NOT）</a></td>
<td><code>~ a</code></td>
<td>反转操作数的比特位，即0变成1，1变成0。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift" target="_blank" rel="external">左移（L</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift" target="_blank" rel="external">eft shift）</a></td>
<td><code>a &lt;&lt; b</code></td>
<td>将 <code>a</code> 的二进制形式向左移 <code>b</code> (&lt; 32) 比特位，右边用0填充。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift" target="_blank" rel="external">有符号右移</a></td>
<td><code>a &gt;&gt; b</code></td>
<td>将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位。</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift" target="_blank" rel="external">无符号右移</a></td>
<td><code>a &gt;&gt;&gt; b</code></td>
<td>将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>
</tr>
</tbody>
</table>
<h2><span id="与-区别">== 与 === 区别</span></h2><blockquote>
<p>在javascript中比较时，建议使用 <code>===</code> 与 <code>!==</code> 。</p>
</blockquote>
<h3><span id="比较">=== 比较</span></h3><p>强相等比较，意味着我们所比较的数值和类型必须相同。我们来看几个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> === <span class="number">5</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">'hello world'</span> === <span class="string">'hello world'</span></span><br><span class="line"><span class="comment">// true (Both Strings, equal values)</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> === <span class="literal">true</span></span><br><span class="line"><span class="comment">// true (Both Booleans, equal values)</span></span><br><span class="line"></span><br><span class="line"><span class="number">77</span> === <span class="string">'77'</span></span><br><span class="line"><span class="comment">// false (Number v. String)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'cat'</span> === <span class="string">'dog'</span></span><br><span class="line"><span class="comment">// false (Both are Strings, but have different values)</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span></span><br><span class="line"><span class="comment">// false (Different type and different value)</span></span><br></pre></td></tr></table></figure>
<h3><span id="比较">== 比较</span></h3><p>弱相等比较，同时它也会执行类型强制比较。类型强制意味着只有在尝试将它们转换为公共类型后才会比较两个值。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">77</span> == <span class="string">'77'</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="number">0</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3><span id="falsy-values">Falsy Values</span></h3><p>在javascript中你应该注意6个虚假值：</p>
<ul>
<li><code>false</code> — boolean false</li>
<li><code>0</code> — number zero</li>
<li><code>&quot;&quot;</code> — empty string</li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>NaN</code> — Not A Number</li>
</ul>
<h3><span id="falsy-value-comparison">Falsy Value Comparison</span></h3><ol>
<li><p><code>false</code>, <code>&quot;&quot;</code> and <code>0</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="string">""</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span> == <span class="literal">false</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p><code>null</code> and <code>undefined</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">null</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p><code>NaN</code></p>
<p><code>NaN</code> 不等于任何值，甚至不等于它自己。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> == <span class="literal">null</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://www.w3schools.com/jS/js_operators.asp" target="_blank" rel="external">https://www.w3schools.com/jS/js_operators.asp</a></li>
<li><a href="https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a" target="_blank" rel="external">https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习(1) | Variables]]></title>
      <url>/posts/92c3001f.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天我们学习一下在JavaScript中如何声明变量和常量，以及<code>var</code>、<code>let</code>、<code>const</code>的区别。</p><a id="more"></a><h2><span id="变量">变量</span></h2><p>在ES6语法中，我们使用<code>let</code>关键字来声明变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'John'</span>, age = <span class="number">25</span>, message = <span class="string">'Hello'</span>;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'John'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">'Hello'</span>;</span><br></pre></td></tr></table></figure>
<h4><span id="命名规范">命名规范</span></h4><ol>
<li>名称必须仅包含字母，数字，符号$和_。</li>
<li>第一个字符不能是数字。</li>
<li>变量名称采用驼峰标记法。</li>
</ol>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">'wangwei'</span>;</span><br><span class="line"><span class="keyword">let</span> test123 = <span class="string">'hello world'</span>;</span><br></pre></td></tr></table></figure>
<h2><span id="常量">常量</span></h2><p>使用<code>const</code>声明常量。声明为常量的变量不能再次被修改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myBirthday = <span class="string">'18.04.1982'</span>;</span><br><span class="line"></span><br><span class="line">myBirthday = <span class="string">'01.01.2001'</span>; <span class="comment">// error, can't reassign the constant!</span></span><br></pre></td></tr></table></figure>
<h4><span id="大写常量">大写常量</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> COLOR_RED = <span class="string">"#F00"</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_GREEN = <span class="string">"#0F0"</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_BLUE = <span class="string">"#00F"</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_ORANGE = <span class="string">"#FF7F00"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color = COLOR_ORANGE;</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// #FF7F00</span></span><br></pre></td></tr></table></figure>
<h2><span id="var-vs-let">Var vs Let</span></h2><p>ES6中新增的 <code>let</code> 弥补了<code>var</code>中的一些不足。</p>
<h4><span id="变量作用域">变量作用域</span></h4><ol>
<li><p>let 声明的变量，只在代码块中有效，var则声明了一个全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在for循环中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>改为let声明变量i，这样i只在循环体内有效。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4><span id="不存在变量提升">不存在变量提升</span></h4><p>let不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h4><span id="暂时性死区temporal-dead-zone-tdz">暂时性死区(temporal dead zone, TDZ)</span></h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>
<p>ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。只要在声明之前就使用这些变量，就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    temp = <span class="number">123</span>; <span class="comment">// ReferenceError: temp is not defined</span></span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="不允许重复声明">不允许重复声明</span></h4><p>let不允许在相同作用域内重复声明同一个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">// SyntaxError: Identifier 'a' has already been declared</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2><span id="变量的解构赋值">变量的解构赋值</span></h2><p>本质上属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>对于初学者，这部分内容可以先大致了解一下，详情请查看：<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/destructuring</a></p>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li><a href="https://javascript.info/" target="_blank" rel="external">https://javascript.info/</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">《ES6标准入门》</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 模板方法(Template Method)]]></title>
      <url>/posts/bfb1958c.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="what">What</span></h1><ul><li>父类定义处理流程的框架，子类实现流程中各个功能的具体细节。</li><li>设计原则：Do not call me, I will call you.</li></ul><a id="more"></a><h1><span id="how">How</span></h1><h4><span id="uml图">UML图</span></h4><p><img src="https://img.i7years.com/blog/Template_Method-2x.png" alt="Template_Method"></p><h4><span id="代码">代码</span></h4><blockquote><p>以我们日常工作的日程安排为例</p></blockquote><ol><li><p>定义父类 <strong>Worker</strong>，里面定义了框架流程方法 <strong><em>dailyRountine</em></strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每日日程安排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dailyRountine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = getName();</span><br><span class="line">        getUp(name);</span><br><span class="line">        eatBreakfast(name);</span><br><span class="line">        goToWork(name);</span><br><span class="line">        work(name);</span><br><span class="line">        goBackHome(name);</span><br><span class="line">        relax(name);</span><br><span class="line">        sleep(name);</span><br><span class="line">        System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起床</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUp</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 起床了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃早餐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatBreakfast</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 吃早餐"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去上班</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWork</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 要去上班了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下班回家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goBackHome</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 忙完工作，下班回家了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 看美剧，放松一下"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入睡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 开始睡觉了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>定义子类 <strong>ProductManager</strong>，实现抽象方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品经理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductManager</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小伟"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是位产品经理，主要的工作就是画产品原型"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>定义子类 <strong>Programmer</strong>，实现抽象方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序员</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小明"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是名程序猿，主要的工作是编写程序"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 喜欢跑步来放松心情"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>定义子类 <strong>UIDesigner</strong>，实现抽象方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UI 设计师</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIDesigner</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小美"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是位UI设计师，每天的工作主要是设计UI界面"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 喜欢看韩剧来放松心情"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>定义调用类 WorkerHelper</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Worker worker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkerHelper</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeWorker</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dailyRountine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker.dailyRountine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>运行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WorkerHelper workerHelper = <span class="keyword">new</span> WorkerHelper(<span class="keyword">new</span> ProductManager());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line"></span><br><span class="line">        workerHelper.changeWorker(<span class="keyword">new</span> Programmer());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line"></span><br><span class="line">        workerHelper.changeWorker(<span class="keyword">new</span> UIDesigner());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下信息：</span></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.835</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.ProductManager - 小伟 是位产品经理，主要的工作就是画产品原型</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 看美剧，放松一下</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 开始睡觉了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Programmer - 小明 是名程序猿，主要的工作是编写程序</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Programmer - 小明 喜欢跑步来放松心情</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 开始睡觉了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.UIDesigner - 小美 是位UI设计师，每天的工作主要是设计UI界面</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.UIDesigner - 小美 喜欢看韩剧来放松心情</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 开始睡觉了</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1><span id="jdk中的运用">JDK中的运用</span></h1><ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html" target="_blank" rel="external">java.io.InputStream</a>  , <a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html" target="_blank" rel="external">java.io.OutputStream</a> , <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html" target="_blank" rel="external">java.io.Reader</a> 以及 <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Writer.html" target="_blank" rel="external">java.io.Writer</a> 中所有非抽象方法；</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html" target="_blank" rel="external">java.util.AbstractList</a> , <a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html" target="_blank" rel="external">java.util.AbstractSet</a> 以及 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html" target="_blank" rel="external">java.util.AbstractMap</a> 中所有非抽象方法；</li>
<li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html" target="_blank" rel="external">javax.servlet.http.HttpServlet</a> 中 默认发送 Http 405 “Method Not Allowed” 错误响应信息的 doXXX() 的方法；</li>
</ul>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="https://github.com/wangweiX/backend-learning/tree/master/backend-design-patterns/src/main/java/one/wangwei/designpatterns/templatemethod" target="_blank" rel="external">源码</a></li>
<li><a href="https://sourcemaking.com/design_patterns/template_method" target="_blank" rel="external">https://sourcemaking.com/design_patterns/template_method</a></li>
<li><a href="https://refactoring.guru/design-patterns/template-method/java/example" target="_blank" rel="external">https://refactoring.guru/design-patterns/template-method/java/example</a></li>
<li><p><a href="http://ifeve.com/template-method-design-pattern" target="_blank" rel="external">http://ifeve.com/template-method-design-pattern</a></p>
</li>
<li><p>《图解设计模式》</p></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Patterns </tag>
            
            <tag> Template Method </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 抽象工厂(Abstract Factory)]]></title>
      <url>/posts/33981b7f.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/abstract-factory-mini-2x.png" alt=""></p><h1><span id="定义">定义</span></h1><p><strong>抽象工厂</strong>是一种创造性设计模式，可让您生成相关对象的家族，而无需指定具体的类。</p><a id="more"></a><h1><span id="问题">问题</span></h1><p>想象一下，你正在创建一个家具店的模拟器。 你的代码包括：</p><ol><li>家庭相关的产品：<code>Chair</code> + <code>Sofa</code> + <code>CoffeeTable</code>.</li><li>这些家具在风格上会存在一些变化，比如：IKEA(宜家)，VictorianStyle(维多利亚风格)，ArtDeco(艺术装饰)等等。</li></ol><p>您需要一种方法来创建各个家具对象，以便它们与同一系列的其他家具对象在风格上相匹配。否则， 客户在收到不匹配的家具时会感到非常沮丧。</p><p>此外，在向程序添加新产品或产品系列时，您不希望更改现有的代码。 家具供应商经常更新他们的产品目录，我们并不想每次都去更改核心代码。</p><h2><span id="方案">方案</span></h2><p><em>抽象工厂</em> 模式建议要做的第一件事情就是浏览一下所有的不同种类的产品，并且强制统一它们的变种，以便让它们实现相同的接口。例如，所有不同种类的的 Chair 都要实现 <code>Chair</code> 接口；所有的 coffee table 必须实现 <code>CoffeeTable</code> 接口，等等。</p><p>第二步就是创建 <code>AbstractFactory</code>，这是一个基础接口，它声明创建构成产品系列的所有产品的方法。（例如：<code>createChair</code>, <code>createSofa</code> and <code>createCoffeeTable</code>）。这里重要的是保证这些方法返回先前提取的接口所表示的抽象产品类型：<code>Chair</code> 、 <code>Sofa</code> 、 <code>CoffeeTable</code>。</p><p>第三步要做的事情就是去实现具体的工厂。这些工厂类要返回具体的产品类型。例如，<code>IKEAFactory</code>只能返回<code>IKEAChair</code>，<code>IKEASofa</code>以及<code>IKEACoffeeTable</code>对象。所有的工厂必须遵循 <code>AbstractFactory</code> 接口，同时创建相同的各种产品。</p><p>客户端代码只能通过抽象接口与工厂和产品协同工作。 通过这种方式，您可以通过传递不同的工厂对象来更改客户端代码中使用的产品类型。</p><p>因此，当客户端的代码要求工厂生产椅子时，它们一定不能知道具体的工厂实现类。也不能够知道椅子的具体实现类。无论它们将是 IKEA 还是 Victorian 风格的椅子，必须保证用抽象类<code>Chair</code> ，并且以相同的方式来与所有的椅子一起正常运行。客户端代码将会知道这个结果，椅子实现了在接口中声明的 <code>sit</code> 方法。它也知道无论返回哪种类型的椅子，它将与同一工厂生产的沙发和咖啡桌的类型相匹配。</p><p>好了，那谁来创建具体的工厂对象呢？通常来讲，程序在初始化阶段创建一个具体的工厂对象，并根据配置或环境选择工厂类型。</p><h2><span id="构造">构造</span></h2><p><img src="https://img.i7years.com/blog/abstract-factory-structure-indexed-2x.png" alt=""></p><h2><span id="伪代码">伪代码</span></h2><p>我们用 MacOS 与 Windows 上的 <code>Button</code> 和 <code>Checkbox</code> 为示例：</p><p>产品 <code>Button</code> 抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Button.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类 <code>WindowsButton</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a window button. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类 <code>MacOSButton</code> ： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a mac os button. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>产品 <code>Checkbox</code> 抽象类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Checkbox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现 <code>WindowsCheckbox</code> 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCheckbox</span> <span class="keyword">extends</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You had created windows checkbox. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>产品子类 <code>MacOSCheckbox</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSCheckbox</span> <span class="keyword">extends</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You had created mac os checkbox"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义抽象工厂 <code>GUIFactory</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The interface Gui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create button button.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the button</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Button <span class="title">createButton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create checkbox checkbox.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the checkbox</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例工厂 <code>MacOSGUIFactory</code> 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Mac osgui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacOSButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacOSCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例工厂 <code>WindowsGUIFactory</code> 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Windows gui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> Checkbox checkbox;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory the factory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(GUIFactory factory)</span> </span>&#123;</span><br><span class="line">        button = factory.createButton();</span><br><span class="line">        checkbox = factory.createCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button.paint();</span><br><span class="line">        checkbox.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Client application;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        configure();</span><br><span class="line">        application.paint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!osName.equalsIgnoreCase(<span class="string">"Mac OS X"</span>)) &#123;</span><br><span class="line">            application = <span class="keyword">new</span> Client(<span class="keyword">new</span> MacOSGUIFactory());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            application = <span class="keyword">new</span> Client(<span class="keyword">new</span> WindowsGUIFactory());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="应用">应用</span></h2><ul>
<li><p><strong>问题</strong>：当业务逻辑必须与来自某个产品系列的不同产品变体一起运行时，但你不希望它依赖某个具体的产品类别（或者说如果它们事先未知）。</p>
<p><strong>方案</strong>：抽象工厂能够对客户端代码隐藏它创建具体产品细节。客户端代码可以与任何工厂所生产的任何产品一起正常运行，只要保证它们使用的抽象接口。</p>
</li>
<li><p><strong>问题</strong>：当一个类有多个Factory Method 时，导致它自身的主要职责模糊不清</p>
<p><strong>方案</strong>：在设计良好的代码里面，每一个对象必须保证单一职责原则。当一个类处理多个不同同类的产品类型时，可能需要用独立的抽象工厂替换多个工厂方法。</p>
</li>
</ul>
<h2><span id="实现">实现</span></h2><ul>
<li>绘制不同产品的矩阵与同一产品的变体。</li>
<li>为所有不同类型的产品创建抽象接口，并使所有具体产品都遵循这些接口。</li>
<li>声明抽象工厂接口。 该接口应列出所有不同类型产品的创建方法。</li>
<li>针对产品系列的每个变体实施单独的工厂类别。</li>
<li>在客户端代码中创建一个工厂初始化代码。 应根据配置或当前环境选择类型并创建一个具体的工厂。</li>
<li>在客户端代码中，将所有产品构造函数调用替换为对工厂对象中的创建方法的调用。</li>
</ul>
<h2><span id="优缺点">优缺点</span></h2><h4><span id="pros">Pros</span></h4><ul>
<li>遵循开闭原则</li>
<li>允许构建产品对象系列并保证其兼容性</li>
<li>避免了具体产品的代码与使用它们的代码相互混淆</li>
<li>将多个类对象间的职责划分开来</li>
</ul>
<h4><span id="cons">Cons</span></h4><ul>
<li>通过创建多个附加类来增加整体代码的复杂性。</li>
</ul>
<h2><span id="jdk-中的运用">JDK 中的运用</span></h2><ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance--" target="_blank" rel="external"><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--" target="_blank" rel="external"><code>javax.xml.transform.TransformerFactory#newInstance()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--" target="_blank" rel="external"><code>javax.xml.xpath.XPathFactory#newInstance()</code></a></li>
</ul>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="https://github.com/wangweiX/backend-learning/tree/master/backend-design-patterns/src/main/java/one/wangwei/designpatterns/factorymethod" target="_blank" rel="external">源码</a></li>
<li><a href="https://refactoring.guru/design-patterns/abstract-factory" target="_blank" rel="external">https://refactoring.guru/design-patterns/abstract-factory</a></li>
<li><a href="https://sourcemaking.com/design_patterns/abstract_factory" target="_blank" rel="external">https://sourcemaking.com/design_patterns/abstract_factory</a></li>
<li>《图解设计模式》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Patterns </tag>
            
            <tag> Abstract Factory </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 工厂方法(Factory Method)]]></title>
      <url>/posts/ae604d3e.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/factory-method-mini-2x.png" alt=""></p><h2><span id="定义">定义</span></h2><p><strong>工厂方法</strong>是一种创建式设计模式，它提供了用于在超类中创建对象的接口，但允许子类改变将要创建的对象的类型。</p><a id="more"></a><h2><span id="问题">问题</span></h2><p>想象一下，你正在创建一个物流管理应用程序。 您的应用程序的第一个版本只能处理卡车运输，因此大部分代码都在Truck类中。</p><p>过了一段时间，您的应用程序变得非常流行，以至于您会收到大量包含海运的请求。</p><p><img src="https://img.i7years.com/blog/factory-method-problem1-2x.png" alt=""></p><p>好消息，对吧？！ 但是代码如何？ 它看起来大部分代码都与Truck类相关联。 添加船只需要更改整个代码库。 此外，如果您决定为应用程序添加其他类型的交通工具，则可能需要再次进行所有这些更改。</p><p>你最终会遇到一些令人讨厌的代码，它们会根据传输对象的类别选择行为。</p><h2><span id="方案">方案</span></h2><p>工厂方法设计模式建议使用一个叫”工厂”的方法来替代直接通过 new 来创建对象。构造函数调用应该在该方法内移动。 工厂方法返回的对象通常被称为“产品”。</p><p>咋一看上去，这一举动貌似毫无意义。但是你可以在子类中重写工厂方法，并且改变将要创建的类对象。让我们看看它是如何工作的：</p><p><img src="https://img.i7years.com/blog/factory-method-solution1-2x.png" alt=""></p><p>当然，有一些小小的限制：所有的产品都必须有一个通用的接口（比如Transport）。 基类中的Factory方法应该返回这个通用接口。</p><p><img src="https://img.i7years.com/blog/fatory-methond-solution2-en-2x.png" alt=""></p><p>只要这些产品具有共同的基类或接口（例如卡车和船舶实现传输接口），子类就可以返回不同的具体产品。</p><p><img src="https://img.i7years.com/blog/fatory-method-solution3-2x.png" alt=""></p><p>工厂方法的客户端并不关心它们接收到的具体产品类型，它们通过一个共同的产品接口来与所有的具体产品协同工作。</p><h2><span id="构造">构造</span></h2><p><img src="https://img.i7years.com/blog/fatory-method-structure-2x.png" alt=""></p><h2><span id="伪代码">伪代码</span></h2><h4><span id="创建产品接口及其实现类">创建产品接口及其实现类</span></h4><p>运输接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送快递</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>卡车运输子类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卡车运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Deliver by land in a box. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>水路运输子类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水路运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Deliver by sea in a container. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="创建工厂及其子类">创建工厂及其子类</span></h4><p>物流抽象类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 物流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">planDelivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Transport transport = createTransport();</span><br><span class="line">        transport.deliver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Transport <span class="title">createTransport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>道路运输，采用卡车</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 道路物流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoadLogistics</span> <span class="keyword">extends</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Transport <span class="title">createTransport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Truck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>海运，采用船</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 海运</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeaLogistics</span> <span class="keyword">extends</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Transport <span class="title">createTransport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Ship();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BaseLogistics logistics = <span class="keyword">new</span> RoadLogistics();</span><br><span class="line">        logistics.planDelivery();</span><br><span class="line"></span><br><span class="line">        BaseLogistics logistics1 = <span class="keyword">new</span> SeaLogistics();</span><br><span class="line">        logistics1.planDelivery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="使用场景">使用场景</span></h2><ol>
<li><p><strong>问题</strong>：当你不知道对象的确切类型和依赖关系时，你的代码需要保证可以正常工作。</p>
<p>例如，从多个数据源去读和写入数据——文件系统、数据库和网络。这些资源都有不同的类型，依赖关系和初始化代码。</p>
<p><strong>方案</strong></p>
<p>工厂方法可以一个产品的具体实现细节。 为了支持新的产品类型，您只需要创建一个新的子类并覆盖其中的工厂方法即可。</p>
</li>
</ol>
<ol>
<li><p><strong>问题</strong>：当你想要为你的类库或框架的用户提供一种方式，好让他们能够扩展这些库或框架的内部组件。</p>
<p><strong>方案</strong></p>
<p>用户可以轻松地对某些特定组件进行子类化。 但是，框架将如何识别该子类并使用它而不是标准组件呢？ 用户必须重写每个创建标准组件实例的方法，并将其更改为创建自定义子类的对象。 这很尴尬，不是吗？</p>
<p>更好的解决方案不仅是给用户提供扩展特定类的手段，而且还将生产组件的代码减少到单个创建方法中。 换句话说，提供工厂方法。</p>
<p>让我们看一下它是如何工作的。想象一下，你正在使用一个开源的UI框架开发APP，你的APP需要一个圆型按钮，但是这个框架只提供的方形按钮。</p>
<p>你要做的第一件事情就是实现 <code>RoundButton</code> 类。但是现在你需要告诉 <code>UIFramework</code> 类去使用新创建的对象，而不是默认对象。</p>
<p>为了达到这个目的，你需要创建一个子类 <code>UIWithRoundButtons</code> 并且重写 <code>createButton</code> 方法. 这个方法仍然返回 <code>Button</code> 类，但是你的新子类将会提供 <code>RoundButton</code> 对象。现在，在你的App中，你需要使用 <code>UIWithRoundButtons</code> 而不是 <code>UIFramework</code> 来初始化这个框架。</p>
</li>
</ol>
<ol>
<li><p><strong>问题</strong>：当你想要保存系统资源并且重用已经存在的对象，而不是重新创建一个新的对象。</p>
<p>例如，当处理大的或者资源密集性的对象，例如数据库连接，等等。</p>
<p>方案：</p>
<p>想象一下，重复使用现有对象需要做多少工作：</p>
<ul>
<li>首先，您需要创建一个池来保留现有的对象。</li>
<li>当有人请求一个对象时，你会在该池内寻找一个空闲对象。</li>
<li>…并将其返回给客户端代码。</li>
<li>只有在没有空闲对象时，才会创建一个新对象（并将其添加到池中）。</li>
</ul>
<p>此代码必须放置在某处。 最方便的地方是一个构造函数。 这样，只要有人试图创建一个对象，所有这些检查都会被执行。 但是，唉，构造函数必须按照定义返回新对象，所以它们不能返回现有的实例。</p>
</li>
</ol>
<h2><span id="如何做">如何做</span></h2><ol>
<li><p>提取所有产品的通用接口。 这个接口应该声明对每个产品都有意义的方法。</p>
</li>
<li><p>在创建者类中添加一个空的工厂方法。 其方法签名应返回产品接口类型。</p>
</li>
<li><p>查看创建者的代码并查找对产品构造函数的所有引用。 一个接一个地将它们替换为对工厂方法的调用，但将产品创建代码提取到工厂方法。</p>
<p>您可能需要向工厂方法添加一个临时参数，该参数将用于控制将创建哪个产品。</p>
<p>在这一点上，工厂方法的代码可能看起来很丑陋。 它可能有一个大的开关操作员，可以选择要实例化的产品类别。 但别担心，我们会马上修复它。</p>
</li>
<li><p>现在，在子类中覆盖工厂方法，并在base方法中从switch操作符中移出相应的条件。</p>
</li>
<li><p>在基础创建者类中用到的控制参数也能够用到子类当中</p>
<p>例如，您可能拥有一个创建者的层次结构，其中包含基类 <code>Mail</code> 以及<code>Air</code>和<code>Ground</code>类以及产品类：<code>Plane</code>，<code>Truck</code>和<code>Train</code>。 <code>Air</code>与<code>Plane</code> 相匹配，同时<code>Ground</code>与<code>Truck</code>和<code>Train</code>同时匹配。 您可以创建一个新的子类来处理这两种情况，但还有另一种选择。 客户端代码可以将参数传递给Ground类的工厂方法，以控制它接收的产品。</p>
</li>
<li><p>如果基础工厂方法在完成代码的迁移后变成了空壳，则可以将其抽象化。</p>
</li>
</ol>
<h2><span id="优缺点">优缺点</span></h2><h4><span id="pros">Pros</span></h4><ul>
<li>遵循了开闭原则。</li>
<li>避免了具体产品和使用它们的代码之间的紧密耦合。</li>
<li>由于将所有创建代码移动到一个地方，因此简化了代码。</li>
<li>向程序添加一个新的产品变得非常方便。</li>
</ul>
<h4><span id="cons">Cons</span></h4><ul>
<li>需要额外的子类。</li>
</ul>
<h2><span id="jdk中的运用">JDK中的运用</span></h2><ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--" target="_blank" rel="external"><code>java.util.Calendar#getInstance()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-" target="_blank" rel="external"><code>java.util.ResourceBundle#getBundle()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--" target="_blank" rel="external"><code>java.text.NumberFormat#getInstance()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-" target="_blank" rel="external"><code>java.nio.charset.Charset#forName()</code></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html" target="_blank" rel="external"><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</code></a> (Returns different singleton objects, depending on a protocol)</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of(E" target="_blank" rel="external"><code>java.util.EnumSet#of()</code></a>)</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--" target="_blank" rel="external"><code>javax.xml.bind.JAXBContext#createMarshaller()</code></a> and other similar methods.</li>
</ul>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="https://github.com/wangweiX/backend-learning/tree/master/backend-design-patterns/src/main/java/one/wangwei/designpatterns/factorymethod" target="_blank" rel="external">本文源码</a></li>
<li><a href="https://github.com/wangweiX/java-design-patterns/tree/master/factory-method" target="_blank" rel="external">https://github.com/wangweiX/java-design-patterns/tree/master/factory-method</a></li>
<li><a href="https://refactoring.guru/design-patterns/factory-method" target="_blank" rel="external">https://refactoring.guru/design-patterns/factory-method</a></li>
<li><a href="https://sourcemaking.com/design_patterns/factory_method" target="_blank" rel="external">https://sourcemaking.com/design_patterns/factory_method</a></li>
<li>《图解设计模式》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Patterns </tag>
            
            <tag> Factory Method </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 栈]]></title>
      <url>/posts/d1e0a844.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="栈">栈</span></h1><h4><span id="定义">定义</span></h4><p>线性表中的一种特殊数据结构，数据只能从固定的一端插入数据或删除数据，另一端是封死的。</p><a id="more"></a><p><img src="https://img.i7years.com/blog/stack-1.png" alt=""></p><h4><span id="特点">特点</span></h4><ul><li>FILO（First In Last Out）: 先进后出</li><li>栈满还存会“上溢”，栈空再取会“下溢”</li></ul><h1><span id="分类">分类</span></h1><h3><span id="顺序栈">顺序栈</span></h3><h4><span id="特点">特点</span></h4><ul><li>采用数组实现，数据在物理结构上保持连续性。</li></ul><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.stack.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.IStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T[] array = (T[]) <span class="keyword">new</span> Object[DEFAULT_SIZE];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        array[size] = value;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容50%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> growSize = size + (size &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        array = Arrays.copyOf(array, growSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩50%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        array = Arrays.copyOf(array, shrinkSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T element = array[--size];</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            T t = array[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.equals(t)) &#123;</span><br><span class="line">                <span class="keyword">return</span> remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除 index 处的栈值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != --size) &#123;</span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>, array, index, size - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        array = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            T t = array[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.equals(t)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/stack/impl/ArrayStack.java" target="_blank" rel="external">查看源码</a></p>
</blockquote>
<h3><span id="链表栈">链表栈</span></h3><h4><span id="特点">特点</span></h4><ul>
<li>用线性表的链式结构存储，数据在物理结构上非连续</li>
</ul>
<h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.stack.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.IStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; top;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; newTop = <span class="keyword">new</span> Node&lt;&gt;(value);</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            top = newTop;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; oldTop = top;</span><br><span class="line">            top = newTop;</span><br><span class="line">            oldTop.above = top;</span><br><span class="line">            top.below = oldTop;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; needTop = top;</span><br><span class="line">        top = needTop.below;</span><br><span class="line">        <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</span><br><span class="line">            top.above = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T needValue = needTop.element;</span><br><span class="line">        needTop = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> needValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span> ? <span class="keyword">null</span> : top.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = top;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x.element != <span class="keyword">null</span>) &#123;</span><br><span class="line">                x = x.below;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; !value.equals(x.element)) &#123;</span><br><span class="line">                x = x.below;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> remove(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; above = node.above;</span><br><span class="line">        Node&lt;T&gt; below = node.below;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除中间元素</span></span><br><span class="line">        <span class="keyword">if</span> (above != <span class="keyword">null</span> &amp;&amp; below != <span class="keyword">null</span>) &#123;</span><br><span class="line">            above.below = below;</span><br><span class="line">            below.above = above;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除top元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (above == <span class="keyword">null</span> &amp;&amp; below != <span class="keyword">null</span>) &#123;</span><br><span class="line">            top = below;</span><br><span class="line">            top.above = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (above != <span class="keyword">null</span> &amp;&amp; below == <span class="keyword">null</span>) &#123;</span><br><span class="line">            above.below = <span class="keyword">null</span>;</span><br><span class="line">            below = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; below = x.below;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.above = <span class="keyword">null</span>;</span><br><span class="line">            x.below = <span class="keyword">null</span>;</span><br><span class="line">            x = below;</span><br><span class="line">        &#125;</span><br><span class="line">        top = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; x = x.below) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; x = x.below) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element.equals(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; above;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; below;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/stack/impl/LinkedStack.java" target="_blank" rel="external">查看源码</a></p>
</blockquote>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="http://data.biancheng.net/view/9.html" target="_blank" rel="external">http://data.biancheng.net/view/9.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Data structure </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 线性表 —— 链表]]></title>
      <url>/posts/cdd4b01b.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="链表">链表</span></h1><h4><span id="定义">定义</span></h4><p>逻辑结构上一个挨一个的数据，在实际存储时，并没有像顺序表那样也相互紧挨着。恰恰相反，数据随机分布在内存中的各个位置，这种存储结构称为<strong>线性表的链式存储</strong>。</p><a id="more"></a><p>由于分散存储，为了能够体现出数据元素之间的逻辑关系，每个数据元素在存储的同时，要配备一个指针，用于指向它的直接后继元素，即每一个数据元素都指向下一个数据元素（最后一个指向NULL(空)）。这种结构成为 “<strong>单向链表</strong>“。</p><p><img src="https://img.i7years.com/blog/SingleLinkedList.jpg" alt="SingleLinkedList"></p><p>在单向链表的基础上，给各个结点额外配备一个指针变量，用于指向每个结点的直接前趋元素。这样的链表被称为“<strong>双向链表</strong>”或者“双链表”。</p><p><img src="https://img.i7years.com/blog/DoublyLinkedList.jpg" alt="DoublyLinkedList"></p><p>当单向链表的尾部数据指向头部数据时，就构成了<strong>循环链表</strong>。</p><p><img src="https://img.i7years.com/blog/CyclicLinkedList.jpg" alt="CyclicLinkedList"></p><h1><span id="单向链表">单向链表</span></h1><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.interfaces.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(index, element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 末端元素添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(element, <span class="keyword">null</span>);</span><br><span class="line">        tail = newElement;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> prevIndex = index - <span class="number">1</span>;</span><br><span class="line">        Node&lt;T&gt; prev = prevIndex &lt; <span class="number">0</span> ? <span class="keyword">null</span> : node(prevIndex);</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; target = node(index);</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(element, target);</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> unlink(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> unlink(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> prevIndex = index - <span class="number">1</span>;</span><br><span class="line">        Node&lt;T&gt; prev = prevIndex &lt; <span class="number">0</span> ? <span class="keyword">null</span> : node(prevIndex);</span><br><span class="line">        Node&lt;T&gt; node = node(index);</span><br><span class="line">        Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除tail元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T element = node.element;</span><br><span class="line"></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卸载元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">unlink</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找到前驱元素</span></span><br><span class="line">        Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x.element != <span class="keyword">null</span>) &#123;</span><br><span class="line">                prev = x;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; !x.element.equals(node.element)) &#123;</span><br><span class="line">                prev = x;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除head元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除tail元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T element = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SingleLinkedList.java" target="_blank" rel="external">查看源代码</a></p>
</blockquote>
<h1><span id="循环链表">循环链表</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向循环链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyCircularLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(index, element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 末端元素添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(element, head);</span><br><span class="line">        tail = newElement;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> prevIndex = index - <span class="number">1</span>;</span><br><span class="line">        Node&lt;T&gt; prev = prevIndex &lt; <span class="number">0</span> ? tail : node(prevIndex);</span><br><span class="line">        Node&lt;T&gt; target = node(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(element, target);</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = newElement;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> unlink(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> unlink(x);</span><br><span class="line">            &#125;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> prevIndex = index - <span class="number">1</span>;</span><br><span class="line">        Node&lt;T&gt; prev = prevIndex &lt; <span class="number">0</span> ? tail : node(prevIndex);</span><br><span class="line">        Node&lt;T&gt; node = node(index);</span><br><span class="line">        Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == size - <span class="number">1</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.element = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line"></span><br><span class="line">        T element = node.element;</span><br><span class="line">        <span class="comment">// for GC</span></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卸载元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">unlink</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找到前驱元素</span></span><br><span class="line">        Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> prevIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.element != <span class="keyword">null</span> &amp;&amp; x.element.equals(node.element)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">            prevIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除head元素</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">            prev = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除tail元素</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == size - <span class="number">1</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for GC</span></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SinglyCircularLinkedList.java" target="_blank" rel="external">查看源代码</a></p>
</blockquote>
<h1><span id="双向链表">双向链表</span></h1><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.interfaces.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表结构</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(element, node(index));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 末端元素添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(last, element, <span class="keyword">null</span>);</span><br><span class="line">        tail = newElement;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(T element, Node&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; pred = target.prev;</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(pred, element, target);</span><br><span class="line">        target.prev = newElement;</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pred.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 二分查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;T&gt; x = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; x = tail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                x = x.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卸载元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">unlink</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T element = node.element;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; prev = node.prev;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除head元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除tail元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T element = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;T&gt; prev, T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/list/impl/DoublyLinkedList.java" target="_blank" rel="external">查看源代码</a></p>
</blockquote>
<h4><span id="特点">特点</span></h4><p>线性表的链式存储相比于顺序存储，有两大优势：</p>
<ol>
<li>链式存储的数据元素在物理结构没有限制，当内存空间中没有足够大的连续的内存空间供顺序表使用时，可能使用链表能解决问题。（链表每次申请的都是单个数据元素的存储空间，可以利用上一些内存碎片）</li>
<li>链表中结点之间采用指针进行链接，当对链表中的数据元素实行插入或者删除操作时，只需要改变指针的指向，无需像顺序表那样移动插入或删除位置的后续元素，简单快捷。</li>
</ol>
<p>链表和顺序表相比，不足之处在于，当做遍历操作时，由于链表中结点的物理位置不相邻，使得计算机查找起来相比较顺序表，速度要慢。</p>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/list/impl/MyLinkedList.java" target="_blank" rel="external">本文源码链接</a></li>
<li><a href="http://data.biancheng.net/view/5.html" target="_blank" rel="external">http://data.biancheng.net/view/5.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Data structure </tag>
            
            <tag> Algorithm </tag>
            
            <tag> List </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 线性表 —— 顺序表]]></title>
      <url>/posts/e7455888.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1><span id="线性表">线性表</span></h1><h4><span id="定义">定义</span></h4><p>将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。</p><p>线性，是指数据在<strong>逻辑结构</strong>上具有线性关系。</p><a id="more"></a><h4><span id="分类">分类</span></h4><p>逻辑结构上相邻的数据在物理结构存储分两种形式：</p><ul><li>数据在内存中集中存储，采用顺序表示结构，称为”顺序存储”；</li><li>数据在内存中分散存储，采用链式表示结构，称为”链式存储”；</li></ul><h1><span id="顺序表">顺序表</span></h1><h4><span id="定义">定义</span></h4><p>逻辑上具有线性关系的数据按照前后的次序全部存储在一整块连续的内存空间中，之间不存在空隙，这样的存储结构称为顺序存储结构。</p><p>使用线性表的顺序存储结构生成的表，称为顺序表。</p><p><img src="https://img.i7years.com/blog/2-1FHG4324N34.png" alt=""></p><h4><span id="实现">实现</span></h4><p>顺序表的存放数据的特点和数组一样，所以我们这里采用数组来实现，这里我们来用数组来简单实现java中常用的ArrayList。</p><p>接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线性表接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 index 位置上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index上的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.interfaces.IList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一个默认数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> T[] array = (T[]) <span class="keyword">new</span> Object[DEFAULT_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 扩容</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            array[size] = element;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.arraycopy(array, index, array, index + <span class="number">1</span>, size - index);</span><br><span class="line">            array[index] = element;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> growSize = size + (size &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        array = Arrays.copyOf(array, growSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缩减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        array = Arrays.copyOf(array, shrinkSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除第一个匹配的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    remove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i].equals(element)) &#123;</span><br><span class="line">                    remove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 index 位置上元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        T element = array[index];</span><br><span class="line">        <span class="keyword">if</span> (index != --size) &#123;</span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>, array, index, size - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置索引值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        T oldElement = array[index];</span><br><span class="line">        array[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(array[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/wangweiX/backend-learning/blob/master/backend-algorithms/src/main/java/one/wangwei/algorithms/datastructures/list/impl/MyArrayList.java" target="_blank" rel="external">查看源代码</a></p>
</blockquote>
<h4><span id="特点">特点</span></h4><ul>
<li>对数据进行遍历的时候，数据在连续的物理空间中进行存放，CPU的内部缓存结构会缓存连续的内存片段，可以大幅降低读取内存的性能开销，所以查询比较快；</li>
<li>删除线性表中的元素的时候，后面的元素会整体向前移动，所以删除的效率较低；</li>
</ul>
<h4><span id="参考资料">参考资料</span></h4><ul>
<li><a href="http://data.biancheng.net/view/4.html" target="_blank" rel="external">http://data.biancheng.net/view/4.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Data structure </tag>
            
            <tag> Algorithm </tag>
            
            <tag> List </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好用的工具清单]]></title>
      <url>/posts/e4de0f3.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>发现好东西，遇见好……</p><p>分享自己日常生活与工作中经常使用的工具、app以及网站，也欢迎分享你的好东西~</p><a id="more"></a><h1><span id="设备">设备</span></h1><ul><li style="list-style:none"><input type="checkbox">MacBook Pro</li><li style="list-style:none"><input type="checkbox">iPhone</li><li style="list-style:none"><input type="checkbox">iPad Pro</li><li style="list-style:none"><input type="checkbox">Apple Watch</li><li style="list-style:none"><input type="checkbox">iMac Pro</li><li style="list-style:none"><input type="checkbox">Kindle Oasis</li></ul><h1><span id="app">App</span></h1><h3><span id="成长学习">成长学习</span></h3><ul><li><a href="https://www.igetget.com/" target="_blank" rel="external">得到App</a></li><li><a href="http://www.hundun.cn/" target="_blank" rel="external">混沌大学</a></li><li><a href="https://time.geekbang.org/" target="_blank" rel="external">极客时间</a></li></ul><h3><span id="专注">专注</span></h3><ul><li>冥想：<a href="https://insighttimer.com/" target="_blank" rel="external">Insight Timer</a></li><li>专注：<a href="https://www.forestapp.cc/en/" target="_blank" rel="external">Forest</a></li></ul><h3><span id="阅读">阅读</span></h3><ul><li>Kindle</li><li>iBooks</li></ul><h3><span id="英语">英语</span></h3><ul><li><a href="https://itunes.apple.com/ca/app/ldoce-inapp-longman-dictionary-of-english-5th/id600007708?mt=8" target="_blank" rel="external">LDOCE</a></li><li><a href="https://www.eudic.net/v4/en/app/eudic" target="_blank" rel="external">Eudic</a></li></ul><h3><span id="记录">记录</span></h3><ul><li><a href="https://evernote.com/intl/en/" target="_blank" rel="external">evernote</a></li><li><a href="http://www.bear-writer.com/" target="_blank" rel="external">Bear</a></li><li><a href="https://mindnode.com/" target="_blank" rel="external">MindNode</a></li><li><a href="https://itunes.apple.com/cn/app/%E8%AE%AF%E9%A3%9E%E8%AF%AD%E8%AE%B0-%E8%AF%AD%E9%9F%B3%E5%8F%98%E6%96%87%E5%AD%97%E8%BE%93%E5%85%A5%E7%9A%84%E4%BA%91%E7%AC%94%E8%AE%B0/id931409652?mt=8" target="_blank" rel="external">讯飞语录</a></li></ul><h3><span id="时间记录">时间记录</span></h3><ul><li><a href="http://www.atimelogger.com/" target="_blank" rel="external">aTimelogger2</a></li></ul><h3><span id="任务管理">任务管理</span></h3><ul><li>Calendar</li><li><a href="https://www.omnigroup.com/omniFocus" target="_blank" rel="external">OmniFocus</a></li><li><a href="https://culturedcode.com/things/" target="_blank" rel="external">Things</a></li></ul><h3><span id="项目管理">项目管理</span></h3><ul><li><a href="https://www.omnigroup.com/omniPlan" target="_blank" rel="external">OmniPlan</a></li><li><a href="https://www.teambition.com/en" target="_blank" rel="external">Teambition</a></li></ul><h3><span id="账号安全">账号安全</span></h3><ul><li><a href="https://1password.com/" target="_blank" rel="external">1Password</a></li><li><a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" target="_blank" rel="external">Google Authenticator</a></li></ul><h3><span id="制图">制图</span></h3><ul><li><a href="https://www.omnigroup.com/omnigraffle" target="_blank" rel="external">OmniGraffle</a></li><li><a href="http://staruml.io/" target="_blank" rel="external">StarUML</a></li></ul><h3><span id="区块链">区块链</span></h3><ul><li><a href="https://itunes.apple.com/us/app/aicoin/id1287350112?mt=8" target="_blank" rel="external">AICoin</a></li><li><a href="https://itunes.apple.com/us/app/mytoken/id1271352380?mt=8" target="_blank" rel="external">MyToken</a></li></ul><h3><span id="社群">社群</span></h3><ul><li><a href="https://www.xiaomiquan.com/" target="_blank" rel="external">知识星球</a></li><li><a href="https://twitter.com/?lang=en" target="_blank" rel="external">Twitter</a></li><li><a href="https://telegram.org/" target="_blank" rel="external">Telegram</a></li></ul><h3><span id="健身">健身</span></h3><ul><li>Keep</li><li>Joyrun</li></ul><h3><span id="其他">其他</span></h3><ul><li>翻墙：<a href="https://itunes.apple.com/us/app/superwingy/id1290093815?mt=8" target="_blank" rel="external">SuperWingy</a></li><li>截图拼接：<a href="https://itunes.apple.com/us/app/tailor-screenshot-stitching/id926653095?mt=8" target="_blank" rel="external">Tailor</a></li><li>自动化处理：<a href="https://workflow.is/" target="_blank" rel="external">Workflow</a></li></ul><h1><span id="chrome-extensions">Chrome Extensions</span></h1><ul><li><a href="https://wangwei.one/posts/4c3b6bcb.html">好用的Chrome Extensions</a></li></ul><h2><span id="系统清理">系统清理</span></h2><ul><li><a href="https://wangwei.one/posts/80d694a6.html">Mac系统清理指南</a></li></ul><h2><span id="资源推荐">资源推荐</span></h2><ol><li><a href="https://sspai.com/" target="_blank" rel="external">少数派—高品质数字消费指南</a></li></ol>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM学习(1) | JVM内存模型]]></title>
      <url>/posts/71c1df10.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文我们来学习一下JDK 1.7 HotSpot VM的内存模型</p><a id="more"></a><h2><span id="jvm-architecture">JVM Architecture</span></h2><p><img src="https://img.i7years.com/blog/JVM%20Architecture.png" alt="JVM Architecture"></p><p>我们先来了解一下JVM的架构体系，JVM主要分三大子系统：Class Loader SubSystem、Runtime Data Area、Execution Engine 。</p><h4><span id="class-loader-subsystem">Class Loader SubSystem</span></h4><p>Java的动态类加载功能由类加载器子系统处理。 它在<strong>运行时</strong>第一次引用类时加载，链接和初始化类，而不是在编译时引用。 它执行三个主要功能，如加载，链接和初始化。</p><h4><span id="execution-engine">Execution Engine</span></h4><p>被分配给运行时数据区域中的字节码将被执行引擎来执行。 执行引擎读取字节代码并挨个挨个执行。</p><p>本篇重点介绍 Rumtime Date Area，至于Class Loader SubSystem和Execution Engine将放在后面的文章去介绍。</p><h2><span id="runtime-data-area">Runtime Data Area</span></h2><p>运行时数据区，是JVM内存管理的主要区域。Java虚拟机在程序执行的过程中，会把它所管理的内存划分为若干个不同的数据区域。主要分为：</p><ul><li>Program Counter Register：程序计数器</li><li>Java Virtual Machine Stacks：Java虚拟机栈</li><li>Native Method Stack：本地方法栈</li><li>Java Heap：堆</li><li>Method Area：方法区</li></ul><h3><span id="内存分配查询">内存分配查询</span></h3><p>我们可以使用如下命令查询系统默认分配的内存大小：</p><p><strong>Ubuntu &amp; RedHat</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -XX:+PrintFlagsFinal -version | grep -iE <span class="string">'HeapSize|PermSize|ThreadStackSize'</span></span><br></pre></td></tr></table></figure>
<p><strong>Windows</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; java -XX:+PrintFlagsFinal -version | findstr /i <span class="string">"HeapSize PermSize ThreadStackSize"</span></span><br></pre></td></tr></table></figure>
<p><strong>MacOS</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -XX:+PrintFlagsFinal -version | grep -iE <span class="string">'heapsize|permsize|threadstacksize'</span></span><br></pre></td></tr></table></figure>
<p>例如，我的Mac返回结果如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    uintx AdaptivePermSizeWeight                    = <span class="number">20</span>              &#123;product&#125;</span><br><span class="line">     intx CompilerThreadStackSize                   = <span class="number">0</span>               &#123;pd product&#125;</span><br><span class="line">    uintx ErgoHeapSizeLimit                         = <span class="number">0</span>               &#123;product&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = <span class="number">87241520</span>        &#123;product&#125;</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">134217728</span>       &#123;product&#125;</span><br><span class="line">    uintx LargePageHeapSizeThreshold                = <span class="number">134217728</span>       &#123;product&#125;</span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">2147483648</span>      &#123;product&#125;</span><br><span class="line">    uintx MaxPermSize                               = <span class="number">85983232</span>        &#123;pd product&#125;</span><br><span class="line">    uintx PermSize                                  = <span class="number">21757952</span>        &#123;pd product&#125;</span><br><span class="line">     intx ThreadStackSize                           = <span class="number">1024</span>            &#123;pd product&#125;</span><br><span class="line">     intx VMThreadStackSize                         = <span class="number">1024</span>            &#123;pd product&#125;</span><br><span class="line">java version <span class="string">"1.7.0_72"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.7</span>.<span class="number">0</span>_72-b14)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">24.72</span>-b04, mixed mode)</span><br></pre></td></tr></table></figure>
<h3><span id="控制参数">控制参数</span></h3><p><img src="https://img.i7years.com/blog/Runtime%20Date%20Area%20Allocation.png" alt="Runtime data area allocation"></p>
<p>控制参数：</p>
<ul>
<li>-Xms设置堆的最小空间大小。</li>
<li>-Xmx设置堆的最大空间大小。</li>
<li>-XX:NewSize设置新生代最小空间大小。</li>
<li>-XX:MaxNewSize设置新生代最大空间大小。</li>
<li>-XX:PermSize设置永久代最小空间大小。</li>
<li>-XX:MaxPermSize设置永久代最大空间大小。</li>
<li>-Xss设置每个线程的堆栈大小。</li>
</ul>
<h2><span id="program-counter-register">Program Counter Register</span></h2><ul>
<li>当前线程所执行的字节码的行号解释器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>
<li>此为线程的私有内存区域。任何一个确定的时刻，一个处理器或者内核，都只会执行一条线程中的指令，为了确保线程切换后还能回到正确的执行位置，每一个线程都有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储。</li>
<li>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ul>
<h2><span id="java-virtual-machine-stack">Java Virtual Machine Stack</span></h2><h4><span id="概念">概念</span></h4><ul>
<li>线程私有，生命周期与线程的一致。</li>
<li>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个<strong>栈帧（Stack Frame）</strong>用于存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li>
<li><strong>局部变量表</strong>存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</li>
<li>局部变量表所需的内存空间在<strong>编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li>
</ul>
<h4><span id="大小设置">大小设置</span></h4><p>Java虚拟机栈的默认大小与运行的操作系统有关：</p>
<table>
<thead>
<tr>
<th>Platform</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows IA32</td>
<td>64 KB</td>
</tr>
<tr>
<td>Linux IA32</td>
<td>128 KB</td>
</tr>
<tr>
<td>Windows x86_64</td>
<td>128 KB</td>
</tr>
<tr>
<td>Linux x86_64</td>
<td>256 KB</td>
</tr>
<tr>
<td>Windows IA64</td>
<td>320 KB</td>
</tr>
<tr>
<td>Linux IA64</td>
<td>1024 KB (1 MB)</td>
</tr>
<tr>
<td>Solaris Sparc</td>
<td>512 KB</td>
</tr>
</tbody>
</table>
<p>我们可以通过 <code>-Xss&lt;size&gt;</code> 来设置Java虚拟机栈大小，例如：-Xss128k，则大小为128k。</p>
<h4><span id="异常">异常</span></h4><h5><span id="stackoverflowerror">StackOverflowError</span></h5><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。</p>
<p>如下例子，通过限制虚拟机栈的大小，并产生大量的局部变量，以此来增加此方法帧中的本地变量表长度。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM args: -Xss:200k</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内容输出：</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.StackOverflowError</span><br><span class="line">stack length:<span class="number">1239</span></span><br><span class="line">	at com.thinkingjava.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:<span class="number">11</span>)</span><br><span class="line">	at com.thinkingjava.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>在单线程的情况下，无论是栈容量太大，还是虚拟机内存太小，当内存无法分配时，都会抛出StackOverflowError异常。</p>
<h5><span id="outofmemoryerror">OutOfMemoryError</span></h5><p>如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈内存大小 = 进程的内存大小 - 堆内存大小(-Xmx) - 方法区内存大小(-XX:MaxPermSize)</span><br></pre></td></tr></table></figure>
<p>由于操作系统给每一个进程的内存是有限制，除去Java堆内存大小（Xmx）和方法区的内存大小（MaxPermSize），剩余的内容就归Java虚拟机栈和本地方法栈分配了，每个线程可分配的栈容量越大，那么所能够产生的线程数则越少。建立线程越多，则越容易把内存消耗掉。</p>
<p>如果是建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能通过减少最大堆和减少栈容量来换取更多的线程。</p>
<p>如下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(++count);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10000000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">2032</span></span><br><span class="line">    </span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: unable to create <span class="keyword">new</span> <span class="keyword">native</span> thread</span><br><span class="line">	at java.lang.Thread.start0(Native Method)</span><br><span class="line">	at java.lang.Thread.start(Thread.java:<span class="number">714</span>)</span><br><span class="line">	at com.thinkingjava.JavaVMStackOOM.main(JavaVMStackOOM.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<h2><span id="native-method-stack">Native Method Stack</span></h2><ul>
<li>本地方法栈与Java虚拟机栈类似，区别在于 Java虚拟机栈为Java方法服务，而本地方法栈为Native方法服务。</li>
<li>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</li>
</ul>
<h2><span id="java-heap">Java Heap</span></h2><p>Java堆（Java Heap）主要用于所有<strong>对象实例与数组</strong>的分配，是Java虚拟机所管理的内存当中最大的一块。</p>
<blockquote>
<p>随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p>
</blockquote>
<p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）。</p>
<p>Java堆空间还可以细分为：</p>
<ul>
<li>Young Generation（新生代）、Tenured/Old Generation（老年代）</li>
<li>Young Generation又可以细分为：Eden（伊甸区）、From Survivor 0（幸存者0区） 、To Survivor 1（幸存者1区） </li>
</ul>
<p><img src="https://img.i7years.com/blog/Java%20Heap.PNG" alt="Java Heap"></p>
<h3><span id="异常">异常</span></h3><p>如果在堆中没有内存完成实例分配时，并且堆再也无法扩展时，将会抛出 OOM 异常。</p>
<blockquote>
<p>将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</p>
</blockquote>
<p>如下例子，不断地创造对象，最终导致Java堆内存溢出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;HeapObject&gt; heapObjectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            heapObjectList.add(<span class="keyword">new</span> HeapObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志输出：</span></span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid22301.hprof ...</span><br><span class="line">Heap dump file created [<span class="number">27600189</span> bytes in <span class="number">0.203</span> secs]</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:<span class="number">2245</span>)</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:<span class="number">2219</span>)</span><br><span class="line">	at java.util.ArrayList.grow(ArrayList.java:<span class="number">242</span>)</span><br><span class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:<span class="number">216</span>)</span><br><span class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:<span class="number">208</span>)</span><br><span class="line">	at java.util.ArrayList.add(ArrayList.java:<span class="number">440</span>)</span><br><span class="line">	at com.thinkingjava.HeapOOM.main(HeapOOM.java:<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2><span id="method-area">Method Area</span></h2><p>由于该区域使用的是永久代GC收集方法来实现，所以也称为”永久代”（Permanent Generation），用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p><strong>字符串常量池</strong>在JDK 1.7的HotSpot中已经从方法区移除掉了。</p>
<p>垃圾回收在这个区域较少出现，但这个区域的数据并非永久存在，这个区域的内存回收主要目标是针对常量池的回收和对类型的卸载。</p>
<h3><span id="异常">异常</span></h3><p>当方法区无法满足内存分配的需求时，将会抛出OutOfMemoryError异常。下面例子，运用cblib动态代理技术，产生大量的类型，导致OOM异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invoke(o, objects);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常输出：</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> </span><br><span class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread <span class="string">"main"</span></span><br></pre></td></tr></table></figure>
<h2><span id="运行时常量池">运行时常量池</span></h2><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种<strong>字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载进方法区后进入常量池存放。</p>
<p>运行时常量池相对于Class文件常量池的另一个重要特征，是具备动态性。Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern（）方法。</p>
<h3><span id="异常">异常</span></h3><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>
<p>String.intern()是一个Native方法，它的作用是：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。在JDK 1.6及之前的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JVM VM: -XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            stringList.add(String.valueOf(i).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: PermGen space</span><br><span class="line">	at java.lang.String.intern(Native Method)</span><br><span class="line">	at one.wangwei.java.App.main(App.java:<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h2><span id="direct-memory">Direct Memory</span></h2><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>
<p>在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>
<h3><span id="异常">异常</span></h3><p>本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p>
<p>DirectMemory容量可通过 <code>-XX:MaxDirectMemorySize</code> 指定，下面的代码越过了DirectByteBuffer类，直接通过反射获取Unsafe实例进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM Args：-Xmx20M -XX:MaxDirectMemorySize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALLOCATE_MEMORY = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">            unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                unsafe.allocateMemory(ALLOCATE_MEMORY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"></span><br><span class="line">java(<span class="number">45961</span>,<span class="number">0x70000a70c000</span>) malloc: *** mach_vm_map(size=<span class="number">10485760</span>) failed (error code=<span class="number">3</span>)</span><br><span class="line">*** error: can<span class="string">'t allocate region</span></span><br><span class="line"><span class="string">*** set a breakpoint in malloc_error_break to debug</span></span><br><span class="line"><span class="string">Exception in thread "main" java.lang.OutOfMemoryError</span></span><br><span class="line"><span class="string">	at sun.misc.Unsafe.allocateMemory(Native Method)</span></span><br><span class="line"><span class="string">	at one.wangwei.java.DirectMemory.main(DirectMemory.java:20)</span></span><br></pre></td></tr></table></figure>
<h2><span id="参考资料">参考资料</span></h2><ul>
<li>《JVM高级特性与最佳实践[第2版]》第2章节「Java内存区域与内存溢出异常」</li>
<li><a href="http://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java/" target="_blank" rel="external">http://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java/</a></li>
<li><a href="http://blog.jamesdbloom.com/JVMInternals.html#constant_pool" target="_blank" rel="external">http://blog.jamesdbloom.com/JVMInternals.html#constant_pool</a></li></ul>]]></content>
      
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好用的Chrome Extensions]]></title>
      <url>/posts/4c3b6bcb.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>整理分享自己平时使用比较多的一些Chrome插件。</p><a id="more"></a><h2><span id="学习类">学习类</span></h2><h4><span id="掘金">掘金</span></h4><ul><li><a href="https://juejin.im" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="external">安装</a></li></ul><h4><span id="google-translate">Google Translate</span></h4><ul><li><a href="https://translate.google.com/?hl=zh-CN&amp;tab=XT" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="external">安装</a></li></ul><h4><span id="evernote-web-clipper">Evernote Web Clipper</span></h4><ul><li><a href="https://www.evernote.com" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc" target="_blank" rel="external">安装</a></li></ul><h2><span id="隐私安全">隐私安全</span></h2><h4><span id="clickampclean">Click&amp;Clean</span></h4><ul><li><p><a href="https://www.hotcleaner.com/" target="_blank" rel="external">官网</a></p></li><li><p><a href="https://chrome.google.com/webstore/detail/clickclean/ghgabhipcejejjmhhchfonmamedcbeod" target="_blank" rel="external">安装</a></p></li></ul><h4><span id="adguard-adblocker">AdGuard AdBlocker</span></h4><ul><li><a href="https://adguard.com/en/welcome.html" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg" target="_blank" rel="external">安装</a></li></ul><h4><span id="1password">1Password</span></h4><ul><li><a href="https://1password.com" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/1password-extension-deskt/aomjjhallfgjeglblehebfpbcfeobpgk" target="_blank" rel="external">安装</a></li></ul><h2><span id="开发工具类">开发工具类</span></h2><h4><span id="postman">Postman</span></h4><ul><li><a href="https://www.getpostman.com/" target="_blank" rel="external">官网</a></li><li><a href="https://www.getpostman.com/apps" target="_blank" rel="external">安装</a></li></ul><h4><span id="json-formatter">JSON Formatter</span></h4><ul><li><a href="https://github.com/callumlocke/json-formatter" target="_blank" rel="external">官网</a></li><li><a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa" target="_blank" rel="external">安装</a></li></ul><h4><span id="wappalyzer">Wappalyzer</span></h4><ul><li><p><a href="https://www.wappalyzer.com/" target="_blank" rel="external">官网</a></p></li><li><p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg" target="_blank" rel="external">安装</a></p></li></ul><h2><span id="其他">其他</span></h2><h4><span id="btools">Btools</span></h4><ul><li><a href="https://chrome.google.com/webstore/detail/btools/aheookoeeopcgengpkngclcpcpjeigok" target="_blank" rel="external">安装</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iBooks自动导入Kindle电子书]]></title>
      <url>/posts/a1880e9.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>趁着五一小长期，把自己的电子书库整理了一番，最主要的工作是将Kindle电子书合并到了iBooks，实现了电子书的统一管理，方便Spotlight检索。用过Kindle和iBooks的同学，都应该清楚，这两者在阅读体验上没多大差别，但iBooks在做读书笔记，文字检索，终端数据同步等方面甩Kindle好几条大街。</p><p>试想一下，如果没有检索功能，想要在几百本甚至是上千本书中，找到自己想要的信息，堪比大海捞针，信息检索俨然已成为我们这个时代的刚性需求，快速定位自己想要的知识和素材，将更多的注意力、更多的时间留给大脑去思考、去写作，才是最重要的事情。</p><a id="more"></a><p>今天这篇文章主要教你如何通过Calibre将Kindle for Mac中的电子书自动导入到iBooks中去。</p><blockquote><ol><li>使用 Kindle for Mac 将你在 amazon 上购买的电子书同步到本地目录（暂且命名为path）；</li><li>使用 Mac 自带的 Automator 自动 Copy 上一步path下的电子书到另外一个文件夹（暂且命名为forder）；</li><li>使用 Calibre 自动加载上一步forder中的Kindle电子书，并自动转化为ePub格式；</li><li>将上一步转化好的ePub电子书到手动导入到iBooks中去（唯一一个需要手动操作的步骤）</li></ol></blockquote><hr><h3><span id="环境">环境</span></h3><ul><li>macOS 系统</li></ul><h3><span id="工具">工具</span></h3><ul><li>下载并安装<a href="https://itunes.apple.com/us/app/kindle/id405399194?mt=12" target="_blank" rel="external">Kindle for Mac</a>；</li><li>下载并安装<a href="https://calibre-ebook.com/download" target="_blank" rel="external">Calibre</a>；</li></ul><h3><span id="步骤">步骤</span></h3><h4><span id="step-1-同步kindle电子书到本地">Step 1. 同步Kindle电子书到本地</span></h4><h5><span id="登录kindle-for-mac">登录Kindle for Mac</span></h5><blockquote><p>注意：由于amazon不同国家间账号的数据互不相通，所以登录时请选择正确的登录域名，国内用户请选择amazon.cn</p></blockquote><p><img src="https://img.i7years.com/bolgReg_kindle4Mac.png" alt="register"></p><h5><span id="同步电子书到本地">同步电子书到本地</span></h5><ul><li><p>登录成功后，使用 ⌘ + R 同步电子书</p></li><li><p>在Kindle for Mac操作区外，使用 ⌘ + Shift + G 打开 Go to Folder，输入以下路劲：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Containers/com.amazon.Kindle/<span class="keyword">Data</span>/Library/Application Support/Kindle/My Kindle Content/</span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/bolgGo2Folder.png" alt="gotofolder"></p>
</li>
</ul>
<ul>
<li><p>以 .azw 或 .mobi 结尾的文件就是我们要找的Kindle电子书</p>
<p><img src="https://img.i7years.com/bolgKindleItems.png" alt="MyKindleContent"></p>
</li>
</ul>
<h4><span id="step-2-设置automator自动复制kindle-books">Step 2. 设置Automator自动复制Kindle Books</span></h4><ul>
<li><p>打开Mac 自带的应用软件 Automator；</p>
</li>
<li><p>选择”Folder Action”</p>
<p><img src="https://img.i7years.com/bolg/automator1.png" alt=""></p>
</li>
<li><p>点击右侧下拉选框 “Choose folder”，选择other，通过 ⌘ + Shift + G 可以快速定位到前面所说的Kindle电子书目录：My Kindle Content</p>
<p><img src="https://img.i7years.com/bolg/automator2.png" alt=""></p>
</li>
<li><p>选择 “Files &amp; Folders” ——&gt; 选择 “Copy Finder Items” ——&gt; 指定文件Copy的目标文件夹，我的路劲为 ~/Documents/003-Books/Kindle4MacItems，这个看个人喜好</p>
<p><img src="https://img.i7years.com/bolg/automator3.png" alt=""></p>
</li>
<li><p>按住 ⌘ + S 保存上面设置的 folder action. </p>
<p><img src="https://img.i7years.com/bolg/automator4.png" alt=""></p>
</li>
</ul>
<p>现在我们可以做个测试看看Automator是否生效</p>
<ul>
<li><p>打开Kindle for Mac，从Downloaded Items中删除一本书</p>
</li>
<li><p>双击 Archived Items 下刚刚删被除的书籍，下载完成后，会出现Automator的提示弹框，证明Automator copy设置成功，点击Continue即可。</p>
<blockquote>
<p>在Step 2中设置的Automator脚本，会随时监听My Kindle Content目录下的变化，一旦有新增书籍， Automator会自动Copy书籍到Kindle4MacItems目录下</p>
</blockquote>
<p><img src="https://img.i7years.com/blog/automator7.png" alt=""></p>
</li>
</ul>
<h4><span id="step-3-安装calibre-dedrm插件">Step 3. 安装Calibre DeDRM插件</span></h4><blockquote>
<p>DeDRM 可以移除Kindle电子书上的DRM保护，让Calibre自由转化Kindle电子书为你想要的格式</p>
</blockquote>
<ul>
<li><p>安装<a href="https://calibre-ebook.com/download" target="_blank" rel="external">Calibre</a>，设置工具栏上的 <code>Calibre Library</code> 地址，这个地址为Calibre的书库地址；</p>
</li>
<li><p>下载<a href="https://github.com/apprenticeharper/DeDRM_tools/archive/v6.5.3.zip" target="_blank" rel="external">DeDRM Tools</a>并解压，找到 DeDRM_plugin.zip 文件，相对路劲DeDRM_tools-6.5.3/DeDRM_calibre_plugin/DeDRM_plugin.zip</p>
</li>
<li><p>安装DeDRM_plugin.zip</p>
<p>Calibre → Preferences ——&gt; Plugins ——&gt; Load plugin from file ——&gt; 选取 DeDRM_plugin.zip ——&gt; 重启 Calibre.</p>
<p>​</p>
<p><img src="https://img.i7years.com/bolg/calibre1.png" alt=""></p>
<p><img src="https://img.i7years.com/bolg/calibre2.png" alt=""></p>
</li>
</ul>
<h4><span id="step-4-设置calibre自动加载kindle电子书并自动转化为epub格式">Step 4. 设置Calibre自动加载Kindle电子书并自动转化为ePub格式</span></h4><h5><span id="设置输出格式为epub">设置输出格式为ePub</span></h5><ul>
<li><p>Cabler ——&gt; Preferences ——&gt; Behavior</p>
<p><img src="https://img.i7years.com/bolg/calibre6.png" alt=""></p>
</li>
</ul>
<h5><span id="设置自动加载kindle电子书并自动转化">设置自动加载Kindle电子书并自动转化</span></h5><ul>
<li><p>Calibre ——&gt; Preferences ——&gt; Adding books ——&gt; The Add Process</p>
<p><img src="https://img.i7years.com/bolg/calibre3.png" alt=""></p>
<p><img src="https://img.i7years.com/bolg/calibre4.png" alt=""></p>
</li>
<li><p>Calibre ——&gt; Preferences ——&gt; Adding books ——&gt; Automatic Adding</p>
<p>选择Calibre要自动加载Kindle电子书目录，也就是我们在 <strong>Step2</strong> 中设置的复制目录 Kindle4MacItmes</p>
<blockquote>
<p>Calibre加载Kindle电子书后会自动删除源目录下的电子书，这也是为什么我们要使用Automator将Kindle for Mac 下的电子书复制到一个新的目录 Kindle4MacItems 下的原因</p>
</blockquote>
<p><img src="https://img.i7years.com/bolg/calibre5.png" alt=""></p>
</li>
</ul>
<h4><span id="step-5-使用ibooks打开-calibre-library-下epub电子书">Step 5. 使用iBooks打开 Calibre Library 下ePub电子书</span></h4><p>只有这一步是需要我们手动去完成的，使用 iBooks 打开转化后的ePub，你会发现文字排版、图片、表格等格式都与Kindle电子书一模一样。</p>
<p>嗯，就这样，希望对你有所帮助。</p>
<h3><span id="声明">声明</span></h3><p>DeDRM 是为了买来书后自己用的更方便，请不要传播盗版……</p>
<blockquote>
<p>参考：<a href="http://t.cn/RGA59Bo" target="_blank" rel="external">http://t.cn/RGA59Bo</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iBooks </tag>
            
            <tag> Kindle </tag>
            
            <tag> Calibre </tag>
            
            <tag> DeDRM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[带你看看外面的世界]]></title>
      <url>/posts/bc401e84.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>带你去看看外面的世界……</p><a id="more"></a><h1><span id="说明">说明</span></h1><ul><li><p>如果你是小白用户，我的建议是去购买稳定可靠、体验棒的产品和服务，这里强烈推荐rixcloud</p><ul><li><a href="https://portal.rixcloud.me/aff.php?aff=1491" target="_blank" rel="external">官网地址</a></li><li><a href="https://support.rixcloud.me/" target="_blank" rel="external">相关的配置教程</a></li></ul><blockquote><p>云梯、蓝灯……这些体检极差的产品就不要用了哈，用就要用省心的产品。</p></blockquote></li></ul><ul><li>已经购买了相关的VPN账号但是不知道如何配置的同学，可直接查看后面<code>客户端配置</code>部分内容，当然你也可以去看上面rixcloud的配置教程</li><li>如果你懂点技术，还是想自己动手捣腾，可以继续往下看后面的内容了……</li></ul><h1><span id="服务端搭建">服务端搭建</span></h1><h3><span id="准备云服务器">准备云服务器</span></h3><blockquote><p>推荐<code>vultr</code>，理由：<strong>便宜实惠</strong>，最重要的是政策风险小，不受中国政府监管。</p></blockquote><h5><span id="vultr">vultr</span></h5><ul><li>地址：<a href="https://www.vultr.com/" target="_blank" rel="external">https://www.vultr.com/</a></li><li>选择亚太地区(日本或新加坡)</li><li>系统要求：CentOS 7版本</li><li>配置要求：1核1G（最低配置即可）</li></ul><h5><span id="阿里云">阿里云</span></h5><ul><li><p>地址：<a href="https://www.aliyun.com/" target="_blank" rel="external">https://www.aliyun.com/</a></p></li><li><p>选择大陆以外的地区，推荐购买<strong>香港</strong>地区的服务器；</p></li><li><p>系统要求：CentOS 6或7版本</p></li><li><p>配置要求：1核1G（最低配置即可）</p><p>​</p></li></ul><h3><span id="安装">安装</span></h3><ol><li><p>登录服务器；</p></li><li><p>使用root权限执行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /tmp</span></span><br><span class="line"><span class="comment"># wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span></span><br><span class="line"><span class="comment"># chmod +x shadowsocks-libev.sh</span></span><br><span class="line"><span class="comment"># ./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装过程中，按照提示设置密码、端口号以及加密方式；</p>
<blockquote>
<p>端口号、加密方式选择默认即可</p>
</blockquote>
</li>
<li><p>安装完成，提示信息如下：</p>
<p><img src="https://img.i7years.com/blog/shadowsocks_confg1.png" alt=""></p>
</li>
<li><p>修改配置文件<code>/etc/shadowsocks-libev/config.json</code></p>
<ul>
<li>设置<code>server</code>为<code>0.0.0.0</code>，不是服务器的公网IP；</li>
<li>设置<code>local_address</code>为虚拟服务器的内网IP，不要设置为<code>127.0.0.1</code>；</li>
</ul>
</li>
<li><p>重启</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS <span class="number">7</span> 命令</span><br><span class="line"><span class="comment"># systemctl restart shadowsocks</span></span><br><span class="line"></span><br><span class="line">CentOS <span class="number">6</span> 命令</span><br><span class="line"><span class="comment"># service shadowsocks restart</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检查服务运行状态</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS <span class="number">7</span> 命令</span><br><span class="line"><span class="comment"># systemctl status shadowsocks </span></span><br><span class="line"></span><br><span class="line">CentOS <span class="number">6</span> 命令</span><br><span class="line"><span class="comment"># service shadowsocks status</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/blog/shaw_install.png" alt="WX20171008-132153@2x"></p>
<p>​</p>
</li>
<li><p>检查端口运行状态</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -anp | grep 8379</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.i7years.com/netstat_shawsocks.png" alt="WX20171008-132153@2x"></p>
<p>​</p>
</li>
<li><p>设置阿里云ECS安全组，开放VPN端口</p>
<blockquote>
<p>在阿里云上购买的服务，默认会加入<a href="https://help.aliyun.com/document_detail/31707.html" target="_blank" rel="external">安全组</a>，需要新增规则，开放shadowsocks端口，否则，无法使用。</p>
</blockquote>
<p><img src="https://img.i7years.com/blog/shadow_config2.png" alt=""></p>
</li>
</ol>
<h3><span id="卸载">卸载</span></h3><p>如果要重新安装，卸载命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./shadowsocks-libev.sh uninstall</span></span><br></pre></td></tr></table></figure>
<h1><span id="客户端配置">客户端配置</span></h1><h2><span id="mac端安装">Mac端安装</span></h2><h3><span id="客户端下载">客户端下载</span></h3><ul>
<li><p>官方地址：<a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/" target="_blank" rel="external">https://github.com/shadowsocks/ShadowsocksX-NG/releases/</a></p>
<p>​</p>
</li>
</ul>
<h3><span id="配置指南">配置指南</span></h3><ul>
<li><p>下载-解压-运行，桌面上方会出现一个纸飞机的小图标</p>
<p><img src="https://img.i7years.com/blog//WX20171115-214040@2x.png" alt="WX20171115-214040@2x"></p>
</li>
<li><p>点击图标，打开菜单——&gt; Servers ——&gt; Servers Preferences，配置地址、端口、加密方式以及密码，下面的<code>Enable OTA(deprecated)</code>和<code>Enable over kcptun</code>不用勾选，然后点击OK进行保存。</p>
<p><img src="https://img.i7years.com/blog//WX20171115-223431@2x.png" alt="WX20171115-223431@2x"></p>
</li>
<li><p>点击小图标打开菜单，点击菜单<code>Update PAC from GFW List</code>，更新成功提示如下：</p>
<p><img src="https://img.i7years.com/blog//WX20171115-223555@2x.png" alt="WX20171115-223555@2x"></p>
</li>
<li><p>重启一下shadowsocks，之后就可以畅游世界啦~~~</p>
</li>
</ul>
<h2><span id="iphone端安装">iPhone端安装</span></h2><h3><span id="客户端下载">客户端下载</span></h3><ul>
<li>App Store下载<code>SuperWingy</code></li>
</ul>
<h3><span id="配置指南">配置指南</span></h3><ul>
<li><p>点击添加配置，选择<code>ss</code>模式，打开如下页面，填写相关信息并保存</p>
<p><img src="https://img.i7years.com/blog//WX20171115-225625@2x.png" alt="WX20171115-225625@2x"></p>
</li>
<li><p>按照系统提示，允许<code>SuperWingy</code>添加VPN配置<img src="https://img.i7years.com/blog//WX20171115-230817@2x.png" alt="WX20171115-230817@2x"></p>
</li>
<li><p>配置成功后，手机界面上面会出现一个<code>vpn</code>的小图标</p>
<p><img src="https://img.i7years.com/blog//WX20171115-225747@2x.png" alt="WX20171115-225747@2x"></p>
</li>
</ul>
<h3><span id="注意">注意</span></h3><ul>
<li>如果你想修改<code>SuperWingy</code>上配置的VPN信息，请将原有配置删除后，重新进行添加，直接修改原有信息是无法生效的，这应该是个Bug</li>
</ul>
<h2><span id="windows用户">Windows用户</span></h2><h3><span id="客户端下载">客户端下载</span></h3><ul>
<li>官方地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-windows/releases</a></li>
</ul>
<h3><span id="配置指南">配置指南</span></h3><ul>
<li>请参考Mac端配置</li>
</ul>
<h2><span id="android用户">Android用户</span></h2><h3><span id="客户端下载">客户端下载</span></h3><ul>
<li>官方地址：<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-android/releases</a></li>
</ul>
<h3><span id="配置指南">配置指南</span></h3><ul>
<li>请参考iPhone配置</li>
</ul>
<h1><span id="最后">最后</span></h1><ul>
<li>纵使天网恢恢，也阻挡不了我们向往自由的心！Good Luck!</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="https://github.com/shadowsocks" target="_blank" rel="external">https://github.com/shadowsocks</a></li>
<li><a href="https://github.com/teddysun/shadowsocks_install" target="_blank" rel="external">https://github.com/teddysun/shadowsocks_install</a></li>
<li><a href="https://teddysun.com/357.html" target="_blank" rel="external">https://teddysun.com/357.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VPN </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac开发环境搭建清单]]></title>
      <url>/posts/917fb1e0.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>工欲善其事，必先利其器！</p><a id="more"></a><p>国外有位 <a href="https://github.com/sb2nov" target="_blank" rel="external">工程师</a> 在Github上整理了一份Mac上各种工具的安装指南，很是不错，强烈推荐：</p><blockquote><p><a href="https://github.com/sb2nov/mac-setup" target="_blank" rel="external">https://github.com/sb2nov/mac-setup</a></p></blockquote><p>我fork了一个自己仓库，添加了一些其它工具的安装指南：</p><blockquote><p><a href="https://github.com/wangweiX/mac-setup" target="_blank" rel="external">https://github.com/wangweiX/mac-setup</a></p></blockquote><h2><span id="环境">环境</span></h2><ul><li>macOS High Sierra</li><li>version 10.13.6</li></ul><h2><span id="适用人群">适用人群</span></h2><ul><li>程序员</li></ul><h2><span id="vpn配置">VPN配置</span></h2><blockquote><p>翻墙，是每一位有追求的程序员的必备技能</p></blockquote><p>指南：<a href="https://wangwei.one/posts/bc401e84.html">https://wangwei.one/posts/bc401e84.html</a></p><h2><span id="浏览器">浏览器</span></h2><ul><li>杜绝使用任何国产浏览器（前端|测试小伙伴除外）</li><li>务必使用这个星球上最好的浏览器——Google浏览器</li><li>插件推荐：<a href="https://wangwei.one/posts/4c3b6bcb.html">https://wangwei.one/posts/4c3b6bcb.html</a></li></ul><h2><span id="开发环境">开发环境</span></h2><h3><span id="java">Java</span></h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Java" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Java</a></p></blockquote><h3><span id="scala">Scala</span></h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Scala" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Scala</a></p></blockquote><h3><span id="python">Python</span></h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Python" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Python</a></p></blockquote><h3><span id="go">Go</span></h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Go" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Go</a></p></blockquote><h3><span id="nodejs">Node.js</span></h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Node.js" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Node.js</a></p></blockquote><h3><span id="git">Git</span></h3><blockquote><ol><li>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Git" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/Git</a></li><li>Git客户端下载：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">https://www.sourcetreeapp.com/</a></li><li>Git命令学习<ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></li></ul></li></ol></blockquote><h3><span id="maven">Maven</span></h3><h5><span id="安装">安装</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install maven</span><br></pre></td></tr></table></figure>
<h5><span id="配置">配置</span></h5><ul>
<li><p><code>settings.xml</code> 路劲：<code>/usr/local/Cellar/maven/3.5.4/libexec/conf</code></p>
</li>
<li><p>修改 <code>settings.xml</code> 配置</p>
<blockquote>
<ul>
<li>默认的配置下载jar包时，是从 <a href="http://search.maven.org/" target="_blank" rel="external">国外中央库</a>下载的，速度比较慢。</li>
<li>建议改为国内阿里云仓库，配置文件下载：<a href="http://attach.i7years.com/attach/settings.xml" target="_blank" rel="external">http://attach.i7years.com/attach/settings.xml</a></li>
</ul>
</blockquote>
</li>
</ul>
<h3><span id="tomcat">Tomcat</span></h3><h5><span id="安装">安装</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install tomcat</span><br></pre></td></tr></table></figure>
<h5><span id="管理">管理</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start|stop tomcat</span><br></pre></td></tr></table></figure>
<h2><span id="ide安装">IDE安装</span></h2><blockquote>
<p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/JetBrains%20IDEs" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/JetBrains%20IDEs</a></p>
</blockquote>
<h3><span id="安装">安装</span></h3><ol>
<li><p>这里统一推荐 <a href="https://www.jetbrains.com/" target="_blank" rel="external">jetbrains</a> 系列的产品，支持各种编程语言的IDE以及数据库操作。</p>
</li>
<li><p>这里推荐使用 <a href="https://www.jetbrains.com/toolbox/download/#section=mac" target="_blank" rel="external">toolbox</a> 安装中IDE，便于安装、卸载以及版本管理。</p>
<p><img src="https://img.i7years.com/blog/WX20171120-233139@3x.png" alt=""></p>
</li>
<li><p>调整IDEA工具，打开view —&gt; 勾选 Toolbar，效果如下：</p>
<p><img src="https://img.i7years.com/blog/WX20171120-234109@3x.png" alt=""></p>
</li>
<li><p>学习并掌握IDEA的常用快捷键，提高编码效率。</p>
</li>
</ol>
<h3><span id="ide插件推荐">IDE插件推荐</span></h3><ol>
<li><a href="https://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="external">Lombok</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration" target="_blank" rel="external">Git Flow Intergration</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="external">Alibaba Java Coding Guidelines</a></li>
</ol>
<h2><span id="开发工具">开发工具</span></h2><h3><span id="iterm">iTerm</span></h3><blockquote>
<p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/iTerm" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/iTerm</a></p>
</blockquote>
<h3><span id="zsh">Zsh</span></h3><blockquote>
<p>指南：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
</blockquote>
<h3><span id="postman">Postman</span></h3><blockquote>
<p>非常不错的http请求调试神器，便于API接口调试</p>
</blockquote>
<p>地址：<a href="https://www.getpostman.com/" target="_blank" rel="external">https://www.getpostman.com/</a></p>
<h3><span id="switchhosts">SwitchHosts</span></h3><blockquote>
<p>指南：<a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="external">https://github.com/oldj/SwitchHosts</a></p>
</blockquote>
<h2><span id="数据库">数据库</span></h2><h3><span id="mysql">Mysql</span></h3><blockquote>
<p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/MySQL" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/MySQL</a></p>
</blockquote>
<h3><span id="redis">Redis</span></h3><h5><span id="安装">安装</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install redis</span><br></pre></td></tr></table></figure>
<h5><span id="配置">配置</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>
<h5><span id="管理">管理</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start|stop redis</span><br></pre></td></tr></table></figure>
<h3><span id="客户端">客户端</span></h3><ul>
<li>redis：<a href="https://github.com/uglide/RedisDesktopManager" target="_blank" rel="external">https://github.com/uglide/RedisDesktopManager</a></li>
<li>mysql：[<strong>推荐</strong>]DataGrip: 使用<code>Jetbrains toolbox</code>进行安装</li>
</ul>
<h2><span id="文本编辑器">文本编辑器</span></h2><h3><span id="sublimetext">SublimeText</span></h3><blockquote>
<p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/SublimeText" target="_blank" rel="external">https://github.com/wangweiX/mac-setup/tree/master/SublimeText</a></p>
</blockquote>
<h3><span id="markdown">MarkDown</span></h3><ol>
<li>工具<ul>
<li>免费：<a href="http://typora.io" target="_blank" rel="external">typora</a></li>
<li>付费：<a href="https://itunes.apple.com/us/app/bear/id1016366447?mt=8" target="_blank" rel="external">Bear</a></li>
</ul>
</li>
<li><p>语法教学</p>
<ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">http://wowubuntu.com/markdown/basic.html</a></li>
<li><a href="http://www.maxiang.info/" target="_blank" rel="external">http://www.maxiang.info/</a></li>
</ul>
</li>
</ol>
<h3><span id="atom">Atom</span></h3><ul>
<li>下载地址：<a href="https://atom.io/" target="_blank" rel="external">https://atom.io/</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac、Linux常用命令清单]]></title>
      <url>/posts/e07d35dc.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>整理一下自己平时用的比较多的一些工具和命令，便于后期查阅。</p><a id="more"></a><h2><span id="mac命令">Mac命令</span></h2><h3><span id="brew">brew</span></h3><blockquote><p>官网：<a href="https://brew.sh/" target="_blank" rel="external">https://brew.sh/</a></p></blockquote><h5><span id="安装">安装</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure>
<h5><span id="常用命令">常用命令</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew update <span class="comment">#更新brew</span></span><br><span class="line">$ brew doctor <span class="comment"># 诊断</span></span><br><span class="line">$ brew upgrade <span class="comment"># 升级mac上的软件包</span></span><br><span class="line">$ brew cleanup <span class="comment"># 清除过时的就版本软件</span></span><br><span class="line">$ brew list  <span class="comment"># 列出本机通过brew安装的所有软件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以安装 nginx 为例</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ brew search nginx <span class="comment">#模糊搜索关键字openssl</span></span><br><span class="line">$ brew install nginx  <span class="comment">#安装openssl</span></span><br><span class="line">$ brew info nginx <span class="comment">#查询openssl的安装信息</span></span><br><span class="line">$ brew uninstall nginx <span class="comment">#卸载openssl</span></span><br><span class="line">$ brew uninstall --ignore-dependencies nginx <span class="comment">#强行卸载openssl</span></span><br><span class="line">$ brew upgrade nginx <span class="comment"># 升级openssl，如果不加软件名，就更新所有可以更新的软件</span></span><br><span class="line">$ brew service start|stop|restart nginx <span class="comment"># 启动/停止/重启 nginx服务</span></span><br></pre></td></tr></table></figure>
<h3><span id="jenv">Jenv</span></h3><blockquote>
<p>官网：<a href="http://www.jenv.be/" target="_blank" rel="external">http://www.jenv.be/</a></p>
</blockquote>
<h3><span id="其它">其它</span></h3><h5><span id="清除剪切板内容">清除剪切板内容</span></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pbcopy &lt; /dev/null</span><br></pre></td></tr></table></figure>
<h2><span id="文件操作">文件操作</span></h2><h4><span id="本地操作">本地操作</span></h4><ol>
<li><p>查询 <code>path1</code>目录中的java文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find path1 -type f -name <span class="string">"*.java"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>从 <code>path1</code> 目录同步 java 文件到 <code>path2</code> 中，并且: 1)同步目录结构;2)删除源文件;3)删除path2中的空文件夹</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -arv --prune-empty-dirs --remove-source-files --include=<span class="string">'*/'</span> --include=<span class="string">'*.java'</span> --exclude=<span class="string">'*'</span> path1 path2</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除 <code>path1</code> 目录中所有的空文件夹：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find path1 -type d -depth -empty -exec rmdir <span class="string">"&#123;&#125;"</span> \;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4><span id="远程操作">远程操作</span></h4><ol>
<li><p>同步远程服务器上的文件到本地</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avz --progress -e <span class="string">"ssh -p <span class="variable">$portNumber</span>"</span> user@remoteip:/path/to/files/ /local/path/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="进程amp端口">进程&amp;端口</span></h2><ol>
<li><p>检查端口运行</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -vanp tcp | grep <span class="variable">$port</span></span><br></pre></td></tr></table></figure>
<p>或    </p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsof -i tcp:<span class="variable">$port</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运维资料整理]]></title>
      <url>/posts/96a7dc5b.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>收集整理一些有关运维相关的操作指南</p><a id="more"></a><h1><span id="centos">CentOS</span></h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7" target="_blank" rel="external">防火墙配置</a></li><li><a href="https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/" target="_blank" rel="external">端口运行检查</a></li></ul><h1><span id="nginx">Nginx</span></h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="external">Nginx安装</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-centos-7" target="_blank" rel="external">Let’s Encrypt 安装</a></li><li><a href="https://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html" target="_blank" rel="external">Nginx安全设置</a></li><li><a href="https://github.com/denji/nginx-tuning" target="_blank" rel="external">Nginx性能优化</a></li></ul><h1><span id="git常用命令">Git常用命令</span></h1><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Https </tag>
            
            <tag> Let’s Encrypt </tag>
            
            <tag> CentOs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac系统清理指南]]></title>
      <url>/posts/80d694a6.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Mac电脑在使用一段时间之后，磁盘空间会逐渐减少，系统性能会逐渐降低，主要是由于在系统运行的过程中产生了大量的缓存文件（Cache File）、临时文件（Temp File）以及系统日志（System Logs），这些需要被清理的对象累计起来甚至可占用100G多的磁盘空间。这时就需要我们对这部分文件进行清理。</p><a id="more"></a><h1><span id="工具">工具</span></h1><ul><li>文件扫描工具：<a href="https://daisydiskapp.com/index.html" target="_blank" rel="external">DaisyDisk</a></li><li>文件清理工具：<a href="https://cleanmymac.com/" target="_blank" rel="external">CleanMac3</a></li></ul><h1><span id="步骤">步骤</span></h1><ul><li><strong>备份</strong>。准备一块移动硬盘，移动硬盘大小1TB，使用Mac自带的Time Machine将整个磁盘备份到移动硬盘上。</li><li>运行DaisyDisk，扫描整个磁盘，找出占用磁盘空间大的文件，进行针对性的删除。<img src="https://img.i7years.com/disk.png" alt="disk"></li></ul><ul><li><p>运行CleanMac，找出系统中的需要被清理的文件（Junk）,注意：CleanMac所扫描出来的需要我们自己检查一遍，以免误删文件。</p><p><img src="https://img.i7years.com/diskclean.png" alt="diskclean"></p></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
